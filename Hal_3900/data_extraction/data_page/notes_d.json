{"grouped":[{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Computer Systems Architecture 1/21"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Evolution of Operating Systems (OSs) 2/21"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Evolution of Operating Systems (OSs) 3/21"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Evolution of Operating Systems (OSs) 4/21"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Operating Systems 5/21"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Operating Systems 6/21"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Operating Systems 7/21"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Operating Systems 8/21"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Operating Systems 9/21"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Operating Systems 10/21"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"System Calls 11/21"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... System Calls 12/21"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Libraries 13/21"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Libraries 14/21"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Applications 15/21"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Applications 16/21"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Applications 17/21"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Applications 18/21"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Applications 19/21"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Applications 20/21"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Roadmap 21/21"}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" no OS ... one program at a time, manually loaded "},{"tags":[],"text":" programs had to take account of details of machine/devices "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" batch processing ... load several programs at once, run in sequence "},{"tags":[],"text":" programs had to take account of details of machine/devices "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" computers proliferate ... programmers want to transport code "},{"tags":[],"text":" having to cope with different config on each machine was tedious "},{"tags":[],"text":" solution: layer of software between raw machine and user programs "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" computers become smaller and faster (but still fridge-size) "},{"tags":[],"text":" complexity of 1960's OSs drove Bell Labs researchers to develop a small OS core, written mostly in HLL with a set of simple tools and ways of combining them led to the Unix programming environment "},{"tags":[],"text":" develop a small OS core, written mostly in HLL "},{"tags":[],"text":" with a set of simple tools and ways of combining them "},{"tags":[],"text":" led to the Unix programming environment "},{"tags":[],"text":" writing OS core in HLL made it portable same OS environment provided on many different machines "},{"tags":[],"text":" same OS environment provided on many different machines "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" develop a small OS core, written mostly in HLL "},{"tags":[],"text":" with a set of simple tools and ways of combining them "},{"tags":[],"text":" led to the Unix programming environment "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" same OS environment provided on many different machines "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" Unix and variants ported to wide variety of architectures BSD, SysV, Linux, OS X, Android all based on Unix approach "},{"tags":[],"text":" BSD, SysV, Linux, OS X, Android all based on Unix approach "},{"tags":[],"text":" developments in hardware/software led to more OS services databases, O-O programming, GUI interfaces, games networking, multi-CPU systems, mobile devices, etc. "},{"tags":[],"text":" databases, O-O programming, GUI interfaces, games "},{"tags":[],"text":" networking, multi-CPU systems, mobile devices, etc. "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" BSD, SysV, Linux, OS X, Android all based on Unix approach "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" databases, O-O programming, GUI interfaces, games "},{"tags":[],"text":" networking, multi-CPU systems, mobile devices, etc. "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" embedded systems, phones, workstations, servers, ... "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" provide an abstraction layer on top of hardware "},{"tags":[],"text":" i.e. same view available regardless of underlying hardware "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" have privileged access to the raw machine "},{"tags":[],"text":" manage use of machine resources (CPU, disk, memory, etc.) "},{"tags":[],"text":" provide uniform interface to access machine-level operations "},{"tags":[],"text":" arrange for controlled execution of user programs "},{"tags":[],"text":" provide multi-tasking and (pseudo) parallelism "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" batch (e.g. Eniac, early IBM OSs) computational jobs run one-at-a-time via a queue "},{"tags":[],"text":" computational jobs run one-at-a-time via a queue "},{"tags":[],"text":" multi-user (e.g. Multics, Unix/Linux, OSX, Windows) mulitple jobs (appear to) run in parallel "},{"tags":[],"text":" mulitple jobs (appear to) run in parallel "},{"tags":[],"text":" embedded (e.g. Android, iOS, ...) small(ish), cut-down OS embedded in a device "},{"tags":[],"text":" small(ish), cut-down OS embedded in a device "},{"tags":[],"text":" real-time (e.g. RTLinux, DuinOS, ...) specialised OS with time guarantees on job completion "},{"tags":[],"text":" specialised OS with time guarantees on job completion "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" computational jobs run one-at-a-time via a queue "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" mulitple jobs (appear to) run in parallel "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" small(ish), cut-down OS embedded in a device "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" specialised OS with time guarantees on job completion "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" users ... who can access (login to) the system "},{"tags":[],"text":" access rights ... what users are allowed to do "},{"tags":[],"text":" file system ... how data is organised on storage devices "},{"tags":[],"text":" input/output ... transferring data to/from devices "},{"tags":[],"text":" processes ... active \"computational entities\" on the system "},{"tags":[],"text":" communication ... how processes interact "},{"tags":[],"text":" networking ... how the system talks to other systems "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" privileged mode full access to all machine operations and memory regions "},{"tags":[],"text":" full access to all machine operations and memory regions "},{"tags":[],"text":" non-privileged (user) mode a limited set of operations (but still Turing complete) access to only part of the memory "},{"tags":[],"text":" a limited set of operations (but still Turing complete) "},{"tags":[],"text":" access to only part of the memory "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" full access to all machine operations and memory regions "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" a limited set of operations (but still Turing complete) "},{"tags":[],"text":" access to only part of the memory "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" to cross the privileged/user boundary "},{"tags":[],"text":" in a controlled manner, via well-defined requests "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" primarily for i/o (read/write) on various types "},{"tags":[],"text":" also memory allocation and process exit "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" process management (e.g. fork(), exec(), _exit(), ...) "},{"tags":[],"text":" file management (e.g. open(), read(), fstat(), ...) "},{"tags":[],"text":" device management (e.g. ioctl(), ...) "},{"tags":[],"text":" information maintenance (e.g. settimeofday(), getuid(), ...) "},{"tags":[],"text":" communication (e.g. pipe(), connect(), send(), ...) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" but system calls provide relatively low-level operations "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" collections of useful functions "},{"tags":[],"text":" referenced from within user programs as C functions "},{"tags":[],"text":" defined by #include <xxx.h> "},{"tags":[],"text":" integrated with user code at \"link time\" "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" stdio.h ... text-oriented, formatted input/output "},{"tags":[],"text":" stdlib.h ... wide range of functions, e.g. rand(), malloc() "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" possibly supplied with system e.g. ls, vim, gcc "},{"tags":[],"text":" possibly implemented by users e.g. dcc, check, Webcms3 "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" but may also make direct use of system calls "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" that runs as a user-level process (not privileged) "},{"tags":[],"text":" but can invoke other user-level processes "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" directly, through a library of system calls documented in Unix Programmers Manual section 2 (e.g. man 2 open) "},{"tags":[],"text":" documented in Unix Programmers Manual section 2 (e.g. man 2 open) "},{"tags":[],"text":" indirectly, through functions in the C libraries documented in Unix Programmers Manual section 3 (e.g. man 3 fopen) "},{"tags":[],"text":" documented in Unix Programmers Manual section 3 (e.g. man 3 fopen) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" documented in Unix Programmers Manual section 2 (e.g. man 2 open) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" documented in Unix Programmers Manual section 3 (e.g. man 3 fopen) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" file descriptors, open(), close(), read(), write() (via #include <unistd.h>) "},{"tags":[],"text":" file pointers (FILE*), fopen(), fclose, scanf(), printf() (via #include <stdio.h>) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" check return value of sys call function (-1 typically flags an error) "},{"tags":[],"text":" check global variable errno (contains specific error) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" unlike other languages, C provides no exception handling "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" unless the sysetm call has a result value (e.g. #bytes read) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" void perror(char *Message) "},{"tags":[],"text":" if Message not NULL, write to stderr "},{"tags":[],"text":" write standard message corresponding to errno "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" error(Status, ErrNum, Format, Expressions, ...) "},{"tags":[],"text":" print error message using prog name, Format and Expressions "},{"tags":[],"text":" if Status is non-zero, invoke exit(Status) after printing message "},{"tags":[],"text":" if ErrNum is non-zero, also print standard system error message "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" storage management disk storage, filesystems, Unix file system interface "},{"tags":[],"text":" disk storage, filesystems, Unix file system interface "},{"tags":[],"text":" memory management RAM, physical/virtual/process memory space, page faults "},{"tags":[],"text":" RAM, physical/virtual/process memory space, page faults "},{"tags":[],"text":" process management creating processes, process hierarchy, signals "},{"tags":[],"text":" creating processes, process hierarchy, signals "},{"tags":[],"text":" device management control registers, data transfer, interrupts "},{"tags":[],"text":" control registers, data transfer, interrupts "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" disk storage, filesystems, Unix file system interface "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" RAM, physical/virtual/process memory space, page faults "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" creating processes, process hierarchy, signals "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" control registers, data transfer, interrupts "}]}],"block":[{"tags":[{"name":"paragraph"}],"text":"D: Computer Systems Architecture"},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Computer Systems Architecture1/21 "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Evolution of Operating Systems (OSs)2/21 "},{"tags":[{"name":"paragraph"}],"text":" 1940's (e.g. ENIAC) "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Evolution of Operating Systems (OSs)3/21 "},{"tags":[{"name":"paragraph"}],"text":" 1970's (e.g. PDP-11) "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Evolution of Operating Systems (OSs)4/21 "},{"tags":[{"name":"paragraph"}],"text":" 1980's - present "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Operating Systems5/21 "},{"tags":[{"name":"paragraph"}],"text":" Modern computer: devices connected via a system bus ... "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Operating Systems6/21 "},{"tags":[{"name":"paragraph"}],"text":" Operating systems (OSs) "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Operating Systems7/21 "},{"tags":[{"name":"paragraph"}],"text":" Some different flavours of OSs ... "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Operating Systems8/21 "},{"tags":[{"name":"paragraph"}],"text":" Abstractions provided by modern OSs "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Operating Systems9/21 "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Operating Systems10/21 "},{"tags":[{"name":"paragraph"}],"text":" Critical to OS development: execution modes "},{"tags":[{"name":"paragraph"}],"text":" CPUs can typically run in two modes: "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" System Calls11/21 "},{"tags":[{"name":"paragraph"}],"text":" SPIM has no OS, but provides a simple set of \"system calls\" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... System Calls12/21 "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Libraries13/21 "},{"tags":[{"name":"paragraph"}],"text":" User programs can request services via system calls "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Libraries14/21 "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Applications15/21 "},{"tags":[{"name":"paragraph"}],"text":" User-level programs which perform some useful task "},{"tags":[{"name":"paragraph"}],"text":" Applications are generally built using libraries "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Applications16/21 "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Applications17/21 "},{"tags":[{"name":"paragraph"}],"text":" System calls are invoked ... "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Applications18/21 "},{"tags":[{"name":"paragraph"}],"text":" System calls attempt to perform actions, but may fail "},{"tags":[{"name":"paragraph"}],"text":" User programs can detect this in several ways "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Applications19/21 "},{"tags":[{"name":"paragraph"}],"text":" Action in response to failed system call is often e.g. "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Can give more precise feedback via library functions, e.g. "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Applications20/21 "},{"tags":[{"name":"paragraph"}],"text":" Linux library function to make it easy to report errors and exit "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" vs "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Roadmap21/21 "},{"tags":[{"name":"paragraph"}],"text":" Following sections consider OS modules: "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Produced: 8 Apr 2018 "}]}