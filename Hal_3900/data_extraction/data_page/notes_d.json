{"grouped":[{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"computer systems architecture 1 21"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"evolution of operating systems oss 2 21"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"evolution of operating systems oss 3 21"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"evolution of operating systems oss 4 21"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"operating systems 5 21"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"operating systems 6 21"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"operating systems 7 21"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"operating systems 8 21"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"operating systems 9 21"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"operating systems 10 21"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"system calls 11 21"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"system calls 12 21"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"libraries 13 21"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"libraries 14 21"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"applications 15 21"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"applications 16 21"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"applications 17 21"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"applications 18 21"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"applications 19 21"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"applications 20 21"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"roadmap 21 21"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"no os one program at a time manually loaded"},{"tags":[],"text":"programs had to take account of details of machine devices"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"batch processing load several programs at once run in sequence"},{"tags":[],"text":"programs had to take account of details of machine devices"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"computers proliferate programmers want to transport code"},{"tags":[],"text":"having to cope with different config on each machine was tedious"},{"tags":[],"text":"solution layer of software between raw machine and user programs"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"computers become smaller and faster but still fridge size"},{"tags":[],"text":"complexity of 1960 s oss drove bell labs researchers to develop a small os core written mostly in hll with a set of simple tools and ways of combining them led to the unix programming environment"},{"tags":[],"text":"develop a small os core written mostly in hll"},{"tags":[],"text":"with a set of simple tools and ways of combining them"},{"tags":[],"text":"led to the unix programming environment"},{"tags":[],"text":"writing os core in hll made it portable same os environment provided on many different machines"},{"tags":[],"text":"same os environment provided on many different machines"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"develop a small os core written mostly in hll"},{"tags":[],"text":"with a set of simple tools and ways of combining them"},{"tags":[],"text":"led to the unix programming environment"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"same os environment provided on many different machines"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"unix and variants ported to wide variety of architectures bsd sysv linux os x android all based on unix approach"},{"tags":[],"text":"bsd sysv linux os x android all based on unix approach"},{"tags":[],"text":"developments in hardware software led to more os services databases o o programming gui interfaces games networking multi cpu systems mobile devices etc"},{"tags":[],"text":"databases o o programming gui interfaces games"},{"tags":[],"text":"networking multi cpu systems mobile devices etc"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"bsd sysv linux os x android all based on unix approach"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"databases o o programming gui interfaces games"},{"tags":[],"text":"networking multi cpu systems mobile devices etc"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"embedded systems phones workstations servers"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"provide an abstraction layer on top of hardware"},{"tags":[],"text":"i e same view available regardless of underlying hardware"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"have privileged access to the raw machine"},{"tags":[],"text":"manage use of machine resources cpu disk memory etc"},{"tags":[],"text":"provide uniform interface to access machine level operations"},{"tags":[],"text":"arrange for controlled execution of user programs"},{"tags":[],"text":"provide multi tasking and pseudo parallelism"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"batch e g eniac early ibm oss computational jobs run one at a time via a queue"},{"tags":[],"text":"computational jobs run one at a time via a queue"},{"tags":[],"text":"multi user e g multics unix linux osx windows mulitple jobs appear to run in parallel"},{"tags":[],"text":"mulitple jobs appear to run in parallel"},{"tags":[],"text":"embedded e g android ios small ish cut down os embedded in a device"},{"tags":[],"text":"small ish cut down os embedded in a device"},{"tags":[],"text":"real time e g rtlinux duinos specialised os with time guarantees on job completion"},{"tags":[],"text":"specialised os with time guarantees on job completion"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"computational jobs run one at a time via a queue"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"mulitple jobs appear to run in parallel"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"small ish cut down os embedded in a device"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"specialised os with time guarantees on job completion"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"users who can access login to the system"},{"tags":[],"text":"access rights what users are allowed to do"},{"tags":[],"text":"file system how data is organised on storage devices"},{"tags":[],"text":"input output transferring data to from devices"},{"tags":[],"text":"processes active computational entities on the system"},{"tags":[],"text":"communication how processes interact"},{"tags":[],"text":"networking how the system talks to other systems"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"privileged mode full access to all machine operations and memory regions"},{"tags":[],"text":"full access to all machine operations and memory regions"},{"tags":[],"text":"non privileged user mode a limited set of operations but still turing complete access to only part of the memory"},{"tags":[],"text":"a limited set of operations but still turing complete"},{"tags":[],"text":"access to only part of the memory"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"full access to all machine operations and memory regions"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"a limited set of operations but still turing complete"},{"tags":[],"text":"access to only part of the memory"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"to cross the privileged user boundary"},{"tags":[],"text":"in a controlled manner via well defined requests"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"primarily for i o read write on various types"},{"tags":[],"text":"also memory allocation and process exit"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"process management e g fork exec exit"},{"tags":[],"text":"file management e g open read fstat"},{"tags":[],"text":"device management e g ioctl"},{"tags":[],"text":"information maintenance e g settimeofday getuid"},{"tags":[],"text":"communication e g pipe connect send"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"but system calls provide relatively low level operations"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"collections of useful functions"},{"tags":[],"text":"referenced from within user programs as c functions"},{"tags":[],"text":"defined by include"},{"tags":[],"text":"integrated with user code at link time"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"stdio h text oriented formatted input output"},{"tags":[],"text":"stdlib h wide range of functions e g rand malloc"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"possibly supplied with system e g ls vim gcc"},{"tags":[],"text":"possibly implemented by users e g dcc check webcms3"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"but may also make direct use of system calls"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"that runs as a user level process not privileged"},{"tags":[],"text":"but can invoke other user level processes"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"directly through a library of system calls documented in unix programmers manual section 2 e g man 2 open"},{"tags":[],"text":"documented in unix programmers manual section 2 e g man 2 open"},{"tags":[],"text":"indirectly through functions in the c libraries documented in unix programmers manual section 3 e g man 3 fopen"},{"tags":[],"text":"documented in unix programmers manual section 3 e g man 3 fopen"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"documented in unix programmers manual section 2 e g man 2 open"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"documented in unix programmers manual section 3 e g man 3 fopen"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"file descriptors open close read write via include"},{"tags":[],"text":"file pointers file fopen fclose scanf printf via include"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"check return value of sys call function 1 typically flags an error"},{"tags":[],"text":"check global variable errno contains specific error"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"unlike other languages c provides no exception handling"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"unless the sysetm call has a result value e g bytes read"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"void perror char message"},{"tags":[],"text":"if message not null write to stderr"},{"tags":[],"text":"write standard message corresponding to errno"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"error status errnum format expressions"},{"tags":[],"text":"print error message using prog name format and expressions"},{"tags":[],"text":"if status is non zero invoke exit status after printing message"},{"tags":[],"text":"if errnum is non zero also print standard system error message"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"storage management disk storage filesystems unix file system interface"},{"tags":[],"text":"disk storage filesystems unix file system interface"},{"tags":[],"text":"memory management ram physical virtual process memory space page faults"},{"tags":[],"text":"ram physical virtual process memory space page faults"},{"tags":[],"text":"process management creating processes process hierarchy signals"},{"tags":[],"text":"creating processes process hierarchy signals"},{"tags":[],"text":"device management control registers data transfer interrupts"},{"tags":[],"text":"control registers data transfer interrupts"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"disk storage filesystems unix file system interface"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"ram physical virtual process memory space page faults"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"creating processes process hierarchy signals"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"control registers data transfer interrupts"}]}],"block":[{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"d computer systems architecture"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"computer systems architecture1 21"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"evolution of operating systems oss 2 21"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"1940 s e g eniac"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"evolution of operating systems oss 3 21"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"1970 s e g pdp 11"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"evolution of operating systems oss 4 21"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"1980 s present"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"operating systems5 21"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"modern computer devices connected via a system bus"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"operating systems6 21"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"operating systems oss"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"operating systems7 21"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"some different flavours of oss"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"operating systems8 21"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"abstractions provided by modern oss"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"operating systems9 21"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"operating systems10 21"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"critical to os development execution modes"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"cpus can typically run in two modes"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"system calls11 21"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"spim has no os but provides a simple set of system calls"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"system calls12 21"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"libraries13 21"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"user programs can request services via system calls"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"libraries14 21"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"applications15 21"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"user level programs which perform some useful task"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"applications are generally built using libraries"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"applications16 21"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"applications17 21"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"system calls are invoked"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"applications18 21"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"system calls attempt to perform actions but may fail"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"user programs can detect this in several ways"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"applications19 21"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"action in response to failed system call is often e g"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"can give more precise feedback via library functions e g"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"applications20 21"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"linux library function to make it easy to report errors and exit"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"vs"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"roadmap21 21"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"following sections consider os modules"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"produced 8 apr 2018"}]}