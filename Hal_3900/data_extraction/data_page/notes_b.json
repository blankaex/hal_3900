{"grouped":[{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"c view","salience":1}],"text":"The C View of Data 1/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"c view","salience":1}],"text":"... The C View of Data 2/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"c view","salience":1}],"text":"... The C View of Data 3/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"c view","salience":1}],"text":"... The C View of Data 4/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"c view","salience":1}],"text":"... The C View of Data 5/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"physical view of data 6","salience":1}],"text":"The Physical View of Data 6/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Memory 7/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Memory 8/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Memory 9/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"data representation","salience":1}],"text":"Data Representation "}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"data representation","salience":1}],"text":"Data Representation 11/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"character data","salience":1}],"text":"Character Data 12/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"ascii","salience":0.6551247239112854},{"name":"character encoding","salience":0.3448752760887146}],"text":"ASCII Character Encoding 13/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"character encoding","salience":0.5330891609191895},{"name":"ascii","salience":0.46691086888313293}],"text":"... ASCII Character Encoding 14/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Unicode 15/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"utf-8","salience":0.7476610541343689},{"name":"character encoding 16","salience":0.2523389458656311}],"text":"UTF-8 Character Encoding 16/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"byte 2","salience":0.33091890811920166},{"name":"byte 1","salience":0.327221542596817},{"name":"byte 4","salience":0.23509830236434937},{"name":"byte 3","salience":0.10676124691963196}],"text":"#bytes #bits,Byte 1,Byte 2,Byte 3,Byte 4"},{"tags":[],"text":"1 7,0xxxxxxx,-,-,-"},{"tags":[],"text":"2 11,110xxxxx,10xxxxxx,-,-"},{"tags":[],"text":"3 16,1110xxxx,10xxxxxx,10xxxxxx,-"},{"tags":[],"text":"4 21,11110xxx,10xxxxxx,10xxxxxx,10xxxxxx"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"utf-8","salience":0.6897543668746948},{"name":"character encoding","salience":0.3102456331253052}],"text":"... UTF-8 Character Encoding 17/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"unicode","salience":0.4850001633167267},{"name":"bits","salience":0.21989427506923676},{"name":"binary","salience":0.17565958201885223},{"name":"binary","salience":0.08940254896879196},{"name":"utf-8","salience":0.030043449252843857}],"text":"ch unicode,bits,simple binary,UTF-8 binary"},{"tags":[],"text":"$ U+0024,7,010 0100,00100100"},{"tags":[{"name":"u+00a2","salience":1}],"text":"¬¢ U+00A2,11,000 1010 0010,11000010 10100010"},{"tags":[{"name":"u+20ac","salience":1}],"text":"‚Ç¨ U+20AC,16,0010 0000 1010 1100,11100010 10000010 10101100"},{"tags":[{"name":"u+","salience":1}],"text":"êçà U+10348,21,0 0001 0000 0011 0100 1000,11110000 10010000 10001101 10001000"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"utf-8","salience":0.784357488155365},{"name":"character encoding 18","salience":0.215642511844635}],"text":"... UTF-8 Character Encoding 18/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"data","salience":1}],"text":"Numeric Data 19/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"integer constants","salience":1}],"text":"Integer Constants 20/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"integers","salience":1}],"text":"Unsigned integers 21/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"integers","salience":1}],"text":"... Unsigned integers 22/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"integers","salience":1}],"text":"Signed integers 23/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"integers","salience":1}],"text":"... Signed integers 24/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"integers","salience":1}],"text":"... Signed integers 25/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"integers","salience":1}],"text":"... Signed integers 26/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"integers","salience":1}],"text":"... Signed integers 27/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"pointers","salience":1}],"text":"Pointers 28/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"pointers","salience":1}],"text":"... Pointers 29/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Floating Point Numbers 30/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"numbers","salience":1}],"text":"... Floating Point Numbers 31/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"numbers","salience":1}],"text":"... Floating Point Numbers 32/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"numbers","salience":1}],"text":"... Floating Point Numbers 33/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"numbers","salience":1}],"text":"... Floating Point Numbers 34/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"min value","salience":0.8897650837898254},{"name":"max value","salience":0.11023493856191635}],"text":"Component Min Value,Max Value"},{"tags":[{"name":"exponent","salience":1}],"text":"exponent 00000000 = -127,11111111 = 128"},{"tags":[],"text":"fraction 00...00 = 0,11...11 = 2-1+2-2+...+2-24"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"min value","salience":0.8897650837898254},{"name":"max value","salience":0.11023493856191635}],"text":"Component Min Value,Max Value"},{"tags":[{"name":"exponent","salience":1}],"text":"exponent 00000000000 = -2047,11111111111 = 2048"},{"tags":[],"text":"fraction 00...00 = 0,11...11 = 2-1+2-2+...+2-51"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"numbers","salience":1}],"text":"... Floating Point Numbers 35/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Arrays 36/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Arrays 37/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Arrays 38/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Arrays 39/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Structs 40/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Structs 41/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Structs 42/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"exercise","salience":0.804345965385437},{"name":"struct alternatives 43","salience":0.195654034614563}],"text":"Exercise 1: Struct Alternatives 43/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Variable-length Structs 44/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Variable-length Structs 45/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"bit-wise structs","salience":1}],"text":"Bit-wise Structs 46/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"bit-wise structs","salience":1}],"text":"... Bit-wise Structs 47/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"bit-wise structs","salience":1}],"text":"... Bit-wise Structs 48/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"bit-wise structs","salience":1}],"text":"... Bit-wise Structs 49/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"bit-wise structs","salience":1}],"text":"... Bit-wise Structs 50/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"unions","salience":1}],"text":"Unions 51/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"unions","salience":1}],"text":"... Unions 52/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"unions","salience":1}],"text":"... Unions 53/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"unions","salience":1}],"text":"... Unions 54/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[{"name":"unions","salience":1}],"text":"... Unions 55/56"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Enumerated Types 56/56"}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"location","salience":0.7983086109161377},{"name":"memory","salience":0.20169135928153992}],"text":" a location in memory "},{"tags":[{"name":"value","salience":0.7815695405006409},{"name":"bit-string","salience":0.21843047440052032}],"text":" a value (ultimately just a bit-string) "},{"tags":[{"name":"name","salience":0.7371235489845276},{"name":"malloc","salience":0.2628764510154724}],"text":" a name (unless created by malloc()) "},{"tags":[{"name":"type","salience":0.785416841506958},{"name":"size","salience":0.07618992775678635},{"name":"units","salience":0.051922980695962906},{"name":"operations","salience":0.03885543718934059},{"name":"value","salience":0.029226789250969887},{"name":"value","salience":0.018388010561466217}],"text":" a type, which determines ... its size (in units of whole bytes, sizeof) how to interpret its value what operations apply to the value "},{"tags":[{"name":"size","salience":0.7560663819313049},{"name":"units","salience":0.24393360316753387}],"text":" its size (in units of whole bytes, sizeof) "},{"tags":[{"name":"value","salience":1}],"text":" how to interpret its value "},{"tags":[{"name":"operations","salience":0.6688562631607056},{"name":"value","salience":0.33114370703697205}],"text":" what operations apply to the value "},{"tags":[{"name":"scope","salience":0.8607882857322693},{"name":"program","salience":0.1392117440700531}],"text":" a scope (where it's visible within the program) "},{"tags":[{"name":"lifetime","salience":0.5050798058509827},{"name":"part","salience":0.4397593140602112},{"name":"program execution","salience":0.055160898715257645}],"text":" a lifetime (during which part of program execution it exists) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"size","salience":0.7560663819313049},{"name":"units","salience":0.24393360316753387}],"text":" its size (in units of whole bytes, sizeof) "},{"tags":[{"name":"value","salience":1}],"text":" how to interpret its value "},{"tags":[{"name":"operations","salience":0.6688562631607056},{"name":"value","salience":0.33114370703697205}],"text":" what operations apply to the value "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"variables","salience":0.6251843571662903},{"name":"variables","salience":0.22808463871479034},{"name":"string constants","salience":0.14673100411891937}],"text":" global variables, static variables, string constants "},{"tags":[{"name":"objects","salience":0.7283564209938049},{"name":"duration","salience":0.15796199440956116},{"name":"program execution","salience":0.11368158459663391}],"text":" objects persist for entire duration of program execution "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"objects","salience":0.5961312651634216},{"name":"malloc","salience":0.20847399532794952},{"name":"calloc","salience":0.19539472460746765}],"text":" objects created by malloc, calloc, ... "},{"tags":[{"name":"objects","salience":0.7997286915779114},{"name":"heap","salience":0.20027127861976624}],"text":" objects persist in heap until explicitly free'd "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"region","salience":0.4766119718551636},{"name":"frame","salience":0.344807893037796},{"name":"function","salience":0.1785801202058792}],"text":" a small region (frame) for each active function "},{"tags":[{"name":"frames","salience":0.6733042001724243},{"name":"variables","salience":0.18997512757778168},{"name":"parameters","salience":0.1367206871509552}],"text":" frames contain local variables and parameters "},{"tags":[{"name":"frame","salience":0.8770638704299927},{"name":"function","salience":0.12293615192174911}],"text":" a frame is created when a function is called "},{"tags":[{"name":"frame","salience":0.7557774782180786},{"name":"function returns","salience":0.24422255158424377}],"text":" the frame is removed when the function returns "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" relatively large (e.g. 228 bytes) "},{"tags":[{"name":"byte","salience":0.8000344038009644},{"name":"cost","salience":0.19996561110019684}],"text":" any byte can be fetched with same cost "},{"tags":[{"name":"cost","salience":1}],"text":" cost of fetching 1,2,4,8 bytes is small (ns) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"dram","salience":0.5154759883880615},{"name":"data","salience":0.48452404141426086}],"text":" volatile (e.g. DRAM) ... data lost when powered off "},{"tags":[{"name":"eeprom","salience":0.5154759883880615},{"name":"data","salience":0.48452404141426086}],"text":" non-volatile (e.g. EEPROM) ... data stays when powered off "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"byte address","salience":0.7567278146743774},{"name":"object","salience":0.24327220022678375}],"text":" any byte address can be used to fetch 1-byte object "},{"tags":[{"name":"byte address","salience":0.7033371925354004},{"name":"object","salience":0.21875669062137604},{"name":"n","salience":0.07790611684322357}],"text":" byte address for N-byte object must be divisible by N "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"bit-strings","salience":0.578466534614563},{"name":"sizes","salience":0.4215334355831146}],"text":" load bit-strings of sizes 1,2,4,8 bytes "},{"tags":[{"name":"boundary addresses","salience":0.5346556305885315},{"name":"n-byte","salience":0.4653443396091461}],"text":" from N-byte boundary addresses "},{"tags":[{"name":"registers","salience":0.6507119536399841},{"name":"cpu","salience":0.34928804636001587}],"text":" into registers in the CPU "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"ascii","salience":0.19924694299697876},{"name":"iso","salience":0.19924694299697876},{"name":"values","salience":0.11507213860750198},{"name":"bit","salience":0.096076101064682},{"name":"bits","salience":0.09325186908245087},{"name":"byte","salience":0.09216266870498657},{"name":"digits","salience":0.06460585445165634},{"name":"alphabet","salience":0.04905610904097557},{"name":"punctuation","salience":0.04564068466424942},{"name":"control chars","salience":0.04564068466424942}],"text":" ASCII (ISO 646) 7-bit values, using lower 7-bits of a byte (top bit always zero) can encode roman alphabet, digits, punctuation, control chars "},{"tags":[{"name":"values","salience":0.39487576484680176},{"name":"bits","salience":0.28563982248306274},{"name":"bit","salience":0.22730785608291626},{"name":"byte","salience":0.09217654168605804}],"text":" 7-bit values, using lower 7-bits of a byte (top bit always zero) "},{"tags":[{"name":"digits","salience":0.38441699743270874},{"name":"alphabet","salience":0.2938084304332733},{"name":"control chars","salience":0.1963457316160202},{"name":"punctuation","salience":0.12542884051799774}],"text":" can encode roman alphabet, digits, punctuation, control chars "},{"tags":[{"name":"utf-8","salience":0.36432763934135437},{"name":"values","salience":0.19635429978370667},{"name":"ability","salience":0.1722249835729599},{"name":"values","salience":0.1693790704011917},{"name":"symbols","salience":0.05559282749891281},{"name":"human languages","salience":0.04212118685245514}],"text":" UTF-8 (Unicode) 8-bit values, with ability to extend to multi-byte values can encode all human languages plus other symbols (e.g. ‚àö ‚àë ‚àÄ ‚àÉ or ) "},{"tags":[{"name":"values","salience":0.492259681224823},{"name":"ability","salience":0.32047709822654724},{"name":"values","salience":0.18726322054862976}],"text":" 8-bit values, with ability to extend to multi-byte values "},{"tags":[{"name":"human languages","salience":0.5202887654304504},{"name":"symbols","salience":0.47971123456954956}],"text":" can encode all human languages plus other symbols (e.g. ‚àö ‚àë ‚àÄ ‚àÉ or ) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"values","salience":0.39487576484680176},{"name":"bits","salience":0.28563982248306274},{"name":"bit","salience":0.22730785608291626},{"name":"byte","salience":0.09217654168605804}],"text":" 7-bit values, using lower 7-bits of a byte (top bit always zero) "},{"tags":[{"name":"digits","salience":0.38441699743270874},{"name":"alphabet","salience":0.2938084304332733},{"name":"control chars","salience":0.1963457316160202},{"name":"punctuation","salience":0.12542884051799774}],"text":" can encode roman alphabet, digits, punctuation, control chars "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"values","salience":0.492259681224823},{"name":"ability","salience":0.32047709822654724},{"name":"values","salience":0.18726322054862976}],"text":" 8-bit values, with ability to extend to multi-byte values "},{"tags":[{"name":"human languages","salience":0.5202887654304504},{"name":"symbols","salience":0.47971123456954956}],"text":" can encode all human languages plus other symbols (e.g. ‚àö ‚àë ‚àÄ ‚àÉ or ) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"control characters","salience":1}],"text":" control characters (0..31) ... e.g. '\\0', '\\n' "},{"tags":[],"text":" punctuation chars (32..47,91..96,123..126) "},{"tags":[{"name":"digits","salience":1}],"text":" digits (48..57) ... '0'..'9' "},{"tags":[{"name":"case","salience":1}],"text":" upper case alphabetic (65..90) ... 'A'..'Z' "},{"tags":[{"name":"case alphabetic","salience":1}],"text":" lower case alphabetic (97..122) ... 'a'..'z' "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"writing systems","salience":0.6190752387046814},{"name":"symbols","salience":0.23195919394493103},{"name":"set","salience":0.14896556735038757}],"text":" not all writing systems use a small set of discrete symbols "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"symbols","salience":0.7416280508041382},{"name":"languages","salience":0.2583719491958618}],"text":" around 140K symbols, covering 140 different languages "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"punctuation","salience":0.41067931056022644},{"name":"alphabet","salience":0.4062919616699219},{"name":"bits","salience":0.18302874267101288}],"text":" e.g. standard roman alphabet + punctuation needs only 7-bits "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"uhexdigits","salience":0.5484389066696167},{"name":"code value","salience":0.4515610635280609}],"text":" \\uHexDigits ... insert Unicode code value "},{"tags":[{"name":"bytes","salience":1}],"text":" \\x2HexDigits ... insert individual bytes "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"integer","salience":0.6825929880142212},{"name":"subset","salience":0.15161938965320587},{"name":"range","salience":0.10601631551980972},{"name":"integers","salience":0.05977128446102142}],"text":" integer ... subset (range) of the mathematical integers "},{"tags":[{"name":"subset","salience":0.6514027118682861},{"name":"numbers","salience":0.34859731793403625}],"text":" floating point ... subset of the mathematical real numbers "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"decimal","salience":1}],"text":" 42 ... signed decimal (0..9) "},{"tags":[],"text":" 0x2A ... unsigned hexadecimal (0..F) "},{"tags":[{"name":"octal","salience":1}],"text":" 052 ... signed octal (0 ..7) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"int value","salience":0.5783335566520691},{"name":"bits","salience":0.4216664433479309}],"text":" 123U ... unsigned int value (typically 32 bits) "},{"tags":[{"name":"int value","salience":0.5783335566520691},{"name":"bits","salience":0.4216664433479309}],"text":" 123L ... long int value (typically 64 bits) "},{"tags":[{"name":"value","salience":0.5783335566520691},{"name":"bits","salience":0.4216664433479309}],"text":" 123S ... short int value (typically 16 bits) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"666666s","salience":1}],"text":" 4294967296, -1U, 666666S, 078 "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"bits","salience":0.41901466250419617},{"name":"values","salience":0.29990026354789734},{"name":"range","salience":0.2810850739479065}],"text":" commonly 32 bits, storing values in the range 0 .. 232-1 "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"bits","salience":0.578466534614563},{"name":"values","salience":0.4215334355831146}],"text":" commonly 32 bits, storing values in the range -231 .. 231-1 "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"magnitude","salience":0.4164244532585144},{"name":"sign","salience":0.3482881188392639},{"name":"magnitude","salience":0.23528742790222168}],"text":" signed magnitude ... first bit is sign, rest are magnitude "},{"tags":[{"name":"ones","salience":0.6554232835769653},{"name":"bits","salience":0.15626373887062073},{"name":"form -n","salience":0.1256481260061264},{"name":"n","salience":0.06266487389802933}],"text":" ones complement ... form -N by inverting all bits in N "},{"tags":[{"name":"twos","salience":0.6709980964660645},{"name":"n","salience":0.1914960891008377},{"name":"form -n","salience":0.13750582933425903}],"text":" twos complement ... form -N by inverting N and adding 1 "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"magnitude","salience":1}],"text":" 10000101 ... signed magnitude "},{"tags":[{"name":"ones","salience":1}],"text":" 11111010 ... ones complement "},{"tags":[{"name":"twos","salience":1}],"text":" 11111011 ... twos complement "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"numbers","salience":1}],"text":" what do these numbers represent? 00000000, 10000000 "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"numbers","salience":1}],"text":" what do these numbers represent? 00000000, 11111111 "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" -0 = ~00000000+1 = 11111111+1 = 00000000 "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"number","salience":0.4877510368824005},{"name":"bits","salience":0.25473251938819885},{"name":"memory size","salience":0.16325809061527252},{"name":"bits","salience":0.0942583680152893}],"text":" number of bits depends on memory size, but typically 32-bits "},{"tags":[{"name":"data pointers","salience":0.5136112570762634},{"name":"data","salience":0.186022087931633},{"name":"addresses","salience":0.1634683758020401},{"name":"stack regions","salience":0.08364943414926529},{"name":"heap","salience":0.0532488189637661}],"text":" data pointers reference addresses in data/heap/stack regions "},{"tags":[{"name":"function pointers reference addresses","salience":0.5783335566520691},{"name":"code region","salience":0.4216664433479309}],"text":" function pointers reference addresses in code region "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"sizeof","salience":0.34613001346588135},{"name":"int","salience":0.28166231513023376},{"name":"sizeof","salience":0.16445112228393555},{"name":"sizeof","salience":0.11811117082834244},{"name":"char","salience":0.0896453782916069}],"text":" sizeof(int *) = sizeof(char *) = sizeof(double *) = sizeof(struct X *) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"char","salience":0.8312284350395203},{"name":"byte address","salience":0.16877159476280212}],"text":" (char *) ... can reference any byte address "},{"tags":[{"name":"int","salience":1}],"text":" (int *) ... must have addr %4 == 0 "},{"tags":[],"text":" (double *) ... must have addr %8 == 0 "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"values","salience":0.5714789032936096},{"name":"representation","salience":0.4285210967063904}],"text":" many real values don't have exact representation (e.g. 1/3) "},{"tags":[{"name":"results","salience":0.6746734380722046},{"name":"calculations","salience":0.18832780420780182},{"name":"inaccuracies","salience":0.1369987279176712}],"text":" results of calculations may contain small inaccuracies "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"numbers","salience":0.7350949645042419},{"name":"precision","salience":0.26490503549575806}],"text":" numbers close to zero have higher precision (more accurate) "},{"tags":[{"name":"numbers","salience":0.5916900038719177},{"name":"zero","salience":0.21187329292297363},{"name":"precision","salience":0.19643671810626984}],"text":" numbers further from zero have lower precision (less accurate) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"quantity","salience":0.4872622489929199},{"name":"range","salience":0.35067135095596313},{"name":"precision","salience":0.16206640005111694}],"text":" float ... typically 32-bit quantity (lower precision, narrower range) "},{"tags":[{"name":"quantity","salience":0.4872622489929199},{"name":"range","salience":0.35067135095596313},{"name":"precision","salience":0.16206640005111694}],"text":" double ... typically 64-bit quantity (higher precision, wider range) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"notation","salience":0.5942226648330688},{"name":"f","salience":0.19889585673809052},{"name":"e","salience":0.14198505878448486},{"name":"exponent","salience":0.06489639729261398}],"text":" scientific notation with fraction F and exponent E "},{"tags":[{"name":"form","salience":0.41462966799736023},{"name":"numbers","salience":0.4035051167011261},{"name":"f","salience":0.13887836039066315},{"name":"e","salience":0.04298686608672142}],"text":" numbers have form F √ó 2E, where both F and E can be -ve "},{"tags":[{"name":"infinity","salience":0.580581545829773},{"name":"representation","salience":0.41941845417022705}],"text":" INFINITY = representation for ‚àû and -‚àû (e.g. 1.0/0) "},{"tags":[{"name":"nan","salience":0.48959818482398987},{"name":"representation","salience":0.23140735924243927},{"name":"value","salience":0.1637355387210846}],"text":" NAN = representation for invalid value NaN (e.g. sqrt(-1.0)) "},{"tags":[{"name":"single-precision","salience":0.6512718200683594},{"name":"precision","salience":0.3487281799316406}],"text":" 32-bit single-precision, 64-bit double precision "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" 1010.1011 is normalized as 1.0101011√ó2011 "},{"tags":[],"text":" 1010.1011 = 10 + 11/16 = 10.6875 "},{"tags":[],"text":" 1.0101011√ó2011 = (1 + 43/128) * 23 = 1.3359375 * 8 = 10.6875 "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"part","salience":0.7021917700767517},{"name":"bbbbbbbb","salience":0.2978082299232483}],"text":" fraction part is always 1.bbbbbbbb; don't store 1 "},{"tags":[{"name":"exponent","salience":0.8408939838409424},{"name":"exponent bits","salience":0.15910598635673523}],"text":" exponent is offset relative to a baseline -2b-1-1, b = #exponent bits "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"baseline","salience":0.6327669620513916},{"name":"aka bias","salience":0.19755101203918457},{"name":"exponent","salience":0.16968201100826263}],"text":" the baseline (aka bias) is 127, the exponent is 27 "},{"tags":[{"name":"exponent","salience":1}],"text":" so, in the exponent, we store 127+7 = 134 = 10000110 "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"array elements","salience":0.5759657621383667},{"name":"indices","salience":0.4240342378616333}],"text":" individual array elements are accessed via indices 0..N-1 "},{"tags":[{"name":"amount","salience":0.56426602602005},{"name":"space","salience":0.2639947533607483},{"name":"type","salience":0.1348271369934082},{"name":"n √ó sizeof","salience":0.036912113428115845}],"text":" total amount of space allocated to array N √ó sizeof(Type ) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"strings","salience":1}],"text":" constant strings have '\\0' added automatically "},{"tags":[{"name":"string buffers","salience":0.7825830578804016},{"name":"element","salience":0.21741695702075958}],"text":" string buffers must allow for element to hold '\\0' "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"component","salience":0.6448712348937988},{"name":"name","salience":0.20650902390480042},{"name":"type","salience":0.14861975610256195}],"text":" each component has a Name and a Type "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"object","salience":0.5758325457572937},{"name":"component","salience":0.4241674542427063}],"text":" define the dynamic object as the last component "},{"tags":[{"name":"malloc","salience":0.6219350099563599},{"name":"space","salience":0.21984653174877167},{"name":"struct","salience":0.15821844339370728}],"text":" malloc() more space than the struct requires "},{"tags":[{"name":"component","salience":1}],"text":" to make the final component as large as required "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"c","salience":0.619809627532959},{"name":"programmers","salience":0.18530435860157013},{"name":"bit-wise","salience":0.1337524801492691},{"name":"structs","salience":0.06113357096910477}],"text":" C allows programmers to specify structs bit-wise "}]},{"tags":[{"name":"list"}],"items":[{"tags":[{"name":"components","salience":0.5731943249702454},{"name":"types","salience":0.42680567502975464}],"text":" specify unnamed components using standard types "},{"tags":[{"name":"bit fields","salience":0.5783335566520691},{"name":"component","salience":0.4216664433479309}],"text":" specify named individual bit fields in each component "}]}],"block":[{"tags":[{"name":"paragraph"},{"name":"course","salience":0.4898326098918915},{"name":"b","salience":0.22917072474956512},{"name":"memory","salience":0.16395482420921326},{"name":"data representation","salience":0.11704183369874954}],"text":"Course Notes B: Memory and Data Representation"},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"c view","salience":0.516575276851654},{"name":"data1","salience":0.48342469334602356}],"text":" The C View of Data1/56 "},{"tags":[{"name":"paragraph"},{"name":"program","salience":0.4448021650314331},{"name":"ac","salience":0.29507169127464294},{"name":"data","salience":0.14156831800937653},{"name":"variables","salience":0.07244281470775604},{"name":"collection","salience":0.04611501097679138}],"text":" A C program sees data as a collection of variables "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"variable","salience":0.4780922532081604},{"name":"properties","salience":0.13253426551818848},{"name":"number","salience":0.13102979958057404},{"name":"name","salience":0.12232905626296997},{"name":"size","salience":0.09371926635503769},{"name":"type","salience":0.04229535534977913}],"text":" Each variable has a number of properties (e.g. name, type, size) "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"c view","salience":0.517509937286377},{"name":"data2","salience":0.48249009251594543}],"text":" ... The C View of Data2/56 "},{"tags":[{"name":"paragraph"},{"name":"variables","salience":0.8732617497444153},{"name":"objects","salience":0.1267382800579071}],"text":" Variables are examples of computational objects "},{"tags":[{"name":"paragraph"},{"name":"object","salience":1}],"text":" Each computational object has "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"c view","salience":0.517509937286377},{"name":"data3","salience":0.48249009251594543}],"text":" ... The C View of Data3/56 "},{"tags":[{"name":"paragraph"},{"name":"c","salience":0.5968132019042969},{"name":"data objects","salience":0.2521738111972809},{"name":"memoryduring program execution","salience":0.0921475887298584},{"name":"regions","salience":0.05886537581682205}],"text":" C allocates data objects to various well-defined regions of memoryduring program execution "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"c view","salience":0.517509937286377},{"name":"data4","salience":0.48249009251594543}],"text":" ... The C View of Data4/56 "},{"tags":[{"name":"paragraph"},{"name":"data area","salience":1}],"text":" The global data area contains "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"c view","salience":0.517509937286377},{"name":"data5","salience":0.48249009251594543}],"text":" ... The C View of Data5/56 "},{"tags":[{"name":"paragraph"},{"name":"example","salience":0.5871303081512451},{"name":"call","salience":0.20754346251487732},{"name":"runtime stack","salience":0.20532624423503876}],"text":" Example of runtime stack during call to h() "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"physical view","salience":0.516575276851654},{"name":"data6","salience":0.48342469334602356}],"text":" The Physical View of Data6/56 "},{"tags":[{"name":"paragraph"},{"name":"memory","salience":0.6163578033447266},{"name":"array","salience":0.22308970987796783},{"name":"bytes","salience":0.1605524867773056}],"text":" Memory = indexed array of bytes "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"},{"name":"a.k.a.","salience":0.9518525004386902},{"name":"pointers","salience":0.04814750328660011}],"text":" Indexes are \"memory addresses\" (a.k.a. pointers) "},{"tags":[{"name":"paragraph"},{"name":"data","salience":0.7466492652893066},{"name":"chunks","salience":0.25335073471069336}],"text":" Data can be fetched in chunks of 1,2,4,8 bytes "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"memory7","salience":1}],"text":" Memory7/56 "},{"tags":[{"name":"paragraph"},{"name":"memory","salience":0.4518224895000458},{"name":"ram","salience":0.3978986144065857},{"name":"storage","salience":0.15027891099452972}],"text":" Also called: RAM, main memory, primary storage, ... "},{"tags":[{"name":"paragraph"},{"name":"technology","salience":1}],"text":" Technology: semiconductor-based "},{"tags":[{"name":"paragraph"},{"name":"features","salience":1}],"text":" Distinguishing features "},{"tags":[{"name":"paragraph"},{"name":"properties","salience":0.6507119536399841},{"name":"data persistence","salience":0.34928804636001587}],"text":" Two properties related to data persistence "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"memory8","salience":1}],"text":" ... Memory8/56 "},{"tags":[{"name":"paragraph"},{"name":"objects","salience":0.5783335566520691},{"name":"memory","salience":0.4216664433479309}],"text":" When addressing objects in memory "},{"tags":[{"name":"paragraph"},{"name":"data bytes","salience":0.5308383107185364},{"name":"registers","salience":0.21593494713306427},{"name":"order","salience":0.14294464886188507},{"name":"memory","salience":0.11028207838535309}],"text":" Data bytes in registers may be in different order to memory, e.g. "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"memory9","salience":1}],"text":" ... Memory9/56 "},{"tags":[{"name":"paragraph"},{"name":"memories","salience":1}],"text":" Memories can be categorised as big-endian or little-endian "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"data representation","salience":1}],"text":" Data Representation "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"data representation11","salience":1}],"text":" Data Representation11/56 "},{"tags":[{"name":"paragraph"},{"name":"memory","salience":1}],"text":" Ultimately, memory allows you to "},{"tags":[{"name":"paragraph"},{"name":"bit-string","salience":0.6372127532958984},{"name":"value","salience":0.36278724670410156}],"text":" Need to interpret this bit-string as a meaningful value "},{"tags":[{"name":"paragraph"},{"name":"data representations","salience":0.5749074220657349},{"name":"meaning","salience":0.1780550479888916},{"name":"way","salience":0.1487511545419693},{"name":"bit-strings","salience":0.09828637540340424}],"text":" Data representations provide a way of assigning meaning to bit-strings "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"character data12","salience":1}],"text":" Character Data12/56 "},{"tags":[{"name":"paragraph"},{"name":"character data","salience":0.6547073721885681},{"name":"representations","salience":0.19440597295761108},{"name":"encodings","salience":0.1508866399526596}],"text":" Character data has several possible representations (encodings) "},{"tags":[{"name":"paragraph"},{"name":"common","salience":1}],"text":" The two most common: "},{"tags":[{"name":"paragraph"}],"text":" (e.g. ‚àö ‚àë ‚àÄ ‚àÉ or ) "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"ascii character encoding13","salience":1}],"text":" ASCII Character Encoding13/56 "},{"tags":[{"name":"paragraph"},{"name":"uses","salience":0.7229015231132507},{"name":"0x00","salience":0.27709847688674927}],"text":" Uses values in the range 0x00 to 0x7F (0..127) "},{"tags":[{"name":"paragraph"},{"name":"characters","salience":0.7815695405006409},{"name":"groups","salience":0.21843047440052032}],"text":" Characters partitioned into sequential groups "},{"tags":[{"name":"paragraph"},{"name":"nature","salience":0.7260252833366394},{"name":"groups","salience":0.2739746868610382}],"text":" Sequential nature of groups allow for e.g. (ch - '0') "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"ascii character encoding14","salience":1}],"text":" ... ASCII Character Encoding14/56 "},{"tags":[{"name":"paragraph"},{"name":"ascii char table","salience":0.3629664480686188},{"name":"man","salience":0.34019461274147034},{"name":"ascii","salience":0.2968389391899109}],"text":" Hexademical ASCII char table (from man 7 ascii) "},{"tags":[{"name":"paragraph"},{"name":"0x20","salience":0.7529358267784119},{"name":"eof","salience":0.24706417322158813}],"text":" 0x0a = '\\n', 0x20 = ' ', 0x09 = '\\t', but note no EOF "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"unicode15","salience":1}],"text":" Unicode15/56 "},{"tags":[{"name":"paragraph"},{"name":"standard","salience":0.5758325457572937},{"name":"writing systems","salience":0.4241674542427063}],"text":" Widely-used standard for expressing \"writing systems\" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"utf-8","salience":0.7619693279266357},{"name":"character encoding16","salience":0.23803067207336426}],"text":" UTF-8 Character Encoding16/56 "},{"tags":[{"name":"paragraph"},{"name":"utf-8","salience":0.8341385126113892},{"name":"encoding","salience":0.16586148738861084}],"text":" UTF-8 uses a variable-length encoding as follows "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"},{"name":"codes","salience":0.7510206699371338},{"name":"ascii","salience":0.2489793598651886}],"text":" The 127 1-byte codes are compatible with ASCII "},{"tags":[{"name":"paragraph"},{"name":"codes","salience":0.6806408166885376},{"name":"latin-script alphabets","salience":0.3193591833114624}],"text":" The 2048 2-byte codes include most Latin-script alphabets "},{"tags":[{"name":"paragraph"},{"name":"codes","salience":0.5420400500297546},{"name":"languages","salience":0.2471202313899994},{"name":"asian","salience":0.21083971858024597}],"text":" The 65536 3-byte codes include most Asian languages "},{"tags":[{"name":"paragraph"},{"name":"codes","salience":0.4741525948047638},{"name":"symbols","salience":0.38702186942100525},{"name":"emojis","salience":0.13882553577423096}],"text":" The 2097152 4-byte codes include symbols and emojis and ... "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"utf-8","salience":0.784357488155365},{"name":"character encoding17","salience":0.215642511844635}],"text":" ... UTF-8 Character Encoding17/56 "},{"tags":[{"name":"paragraph"},{"name":"utf-8","salience":0.8456545472145081},{"name":"examples","salience":0.15434543788433075}],"text":" UTF-8 examples "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"},{"name":"strings","salience":0.7229015231132507},{"name":"c","salience":0.27709847688674927}],"text":" Unicode strings can be manipulated in C (e.g. \"\") "},{"tags":[{"name":"paragraph"},{"name":"c strings","salience":0.5985071063041687},{"name":"byte","salience":0.4014928936958313}],"text":" Like other C strings, they are terminated by a 0 byte (i.e. '\\0') "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"utf-8","salience":0.784357488155365},{"name":"character encoding18","salience":0.215642511844635}],"text":" ... UTF-8 Character Encoding18/56 "},{"tags":[{"name":"paragraph"},{"name":"constants","salience":0.7983086109161377},{"name":"c strings","salience":0.20169135928153992}],"text":" Unicode constants in C strings ... "},{"tags":[{"name":"paragraph"},{"name":"notations","salience":0.5758325457572937},{"name":"contexts","salience":0.4241674542427063}],"text":" The following two notations work in some contexts "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"bytes","salience":0.39619770646095276},{"name":"sequences","salience":0.34875884652137756},{"name":"symbol","salience":0.20022666454315186},{"name":"unicode","salience":0.05481678247451782}],"text":" The red sequences produce 3 bytes and 1 Unicode symbol. "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"numeric data19","salience":1}],"text":" Numeric Data19/56 "},{"tags":[{"name":"paragraph"},{"name":"data","salience":0.6951217651367188},{"name":"forms","salience":0.30487826466560364}],"text":" Numeric data comes in two major forms "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"integer constants20","salience":1}],"text":" Integer Constants20/56 "},{"tags":[{"name":"paragraph"},{"name":"ways","salience":0.6436845660209656},{"name":"integer constants","salience":0.2557733654975891},{"name":"c","salience":0.10054204612970352}],"text":" Three ways to write integer constants in C "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"integers21","salience":1}],"text":" Unsigned integers21/56 "},{"tags":[{"name":"paragraph"},{"name":"int data type","salience":1}],"text":" The unsigned int data type "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"integers22","salience":1}],"text":" ... Unsigned integers22/56 "},{"tags":[{"name":"paragraph"},{"name":"value","salience":0.7815695405006409},{"name":"binary number","salience":0.21843047440052032}],"text":" Value interpreted as binary number "},{"tags":[{"name":"paragraph"},{"name":"e.g.","salience":0.8342920541763306},{"name":"int","salience":0.16570793092250824}],"text":" E.g. consider an 8-bit unsigned int "},{"tags":[{"name":"paragraph"}],"text":" 01001101 = 26 + 23 + 22 + 20 = 64 + 8 + 4 + 1 = 77 "},{"tags":[{"name":"paragraph"},{"name":"addition","salience":0.7980157136917114},{"name":"carry","salience":0.20198428630828857}],"text":" Addition is bitwise with carry "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"machines","salience":0.6618804335594177},{"name":"overflow","salience":0.21694540977478027},{"name":"example","salience":0.1211741641163826}],"text":" Most machines will also flag the overflow in the fourth example "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Signed integers23/56 "},{"tags":[{"name":"paragraph"},{"name":"int data type","salience":1}],"text":" The int data type "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Signed integers24/56 "},{"tags":[{"name":"paragraph"},{"name":"representations","salience":0.5758325457572937},{"name":"values","salience":0.4241674542427063}],"text":" Several possible representations for negative values "},{"tags":[{"name":"paragraph"},{"name":"examples","salience":0.5428842306137085},{"name":"representations","salience":0.4571157395839691}],"text":" Examples: representations of (8-bit) -5 (where 5 is 00000101) "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"integers25","salience":1}],"text":" ... Signed integers25/56 "},{"tags":[{"name":"paragraph"},{"name":"magnitude","salience":0.7573765516281128},{"name":"x","salience":0.17376640439033508},{"name":"bit","salience":0.06885704398155212}],"text":" Signed magnitude: Easy to form -X from X ... OR in high-order bit "},{"tags":[{"name":"paragraph"},{"name":"problem","salience":1}],"text":" A problem (using 8-bit ints) ... "},{"tags":[{"name":"paragraph"},{"name":"problem","salience":0.8312284350395203},{"name":"addition","salience":0.16877159476280212}],"text":" Another problem: x + -x ‚â† 0 (mostly) with simple addition "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"alu","salience":0.5955686569213867},{"name":"hardware","salience":0.4044313132762909}],"text":" To fix requires extra hardware in ALU "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Signed integers26/56 "},{"tags":[{"name":"paragraph"},{"name":"ones","salience":0.8130149245262146},{"name":"bits","salience":0.06851248443126678},{"name":"x","salience":0.0603899210691452},{"name":"neg","salience":0.05808268114924431}],"text":" Ones complement: Easy to form -X from X ... NEG all bits "},{"tags":[{"name":"paragraph"},{"name":"problem","salience":1}],"text":" A problem (using 8-bit ints) ... "},{"tags":[{"name":"paragraph"},{"name":"one","salience":0.521580696105957},{"name":"addition","salience":0.29132723808288574},{"name":"zeroes","salience":0.18709208071231842}],"text":" At least x + -x is equal to one of the zeroes with simple addition "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"integers27","salience":1}],"text":" ... Signed integers27/56 "},{"tags":[{"name":"paragraph"},{"name":"twos","salience":0.724388062953949},{"name":"x","salience":0.16880294680595398},{"name":"neg","salience":0.06820756942033768},{"name":"bits","salience":0.03860145062208176}],"text":" Twos complement: to form -X from X ... NEG all bits, then add 1 "},{"tags":[{"name":"paragraph"},{"name":"representation","salience":1}],"text":" Now have only one representation for zero (00000000) "},{"tags":[{"name":"paragraph"},{"name":"addition","salience":0.6068437695503235},{"name":"cases","salience":0.3931562006473541}],"text":" Even better, x + -x = 0 in all cases with simple addition "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Always produces an \"overflow\" bit, but can ignore this "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"pointers28","salience":1}],"text":" Pointers28/56 "},{"tags":[{"name":"paragraph"},{"name":"pointers","salience":0.7171128988265991},{"name":"memory addresses","salience":0.17519478499889374},{"name":"locations","salience":0.10769229382276535}],"text":" Pointers represent memory addresses/locations "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"pointers29","salience":1}],"text":" ... Pointers29/56 "},{"tags":[{"name":"paragraph"},{"name":"object","salience":0.5557078719139099},{"name":"pointer arithmetic","salience":0.2572709918022156},{"name":"object","salience":0.1870211362838745}],"text":" Can \"move\" from object to object by pointer arithmetic "},{"tags":[{"name":"paragraph"},{"name":"pointer t *p","salience":0.7624593377113342},{"name":"sizeof","salience":0.23754069209098816}],"text":" For any pointer T *p;, p++ increases p by sizeof(T ) "},{"tags":[{"name":"paragraph"},{"name":"examples","salience":0.8837491273880005},{"name":"pointers","salience":0.11625086516141891}],"text":" Examples (assuming 16-bit pointers): "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"paradigm","salience":0.6537261009216309},{"name":"string","salience":0.34627392888069153}],"text":" A common (efficient) paradigm for scanning a string "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"floating point numbers30","salience":1}],"text":" Floating Point Numbers30/56 "},{"tags":[{"name":"paragraph"},{"name":"floating point numbers","salience":0.6811220049858093},{"name":"subset","salience":0.1638956218957901},{"name":"r","salience":0.15498238801956177}],"text":" Floating point numbers model a (tiny) subset of ‚Ñù "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"floating point numbers31","salience":1}],"text":" ... Floating Point Numbers31/56 "},{"tags":[{"name":"paragraph"},{"name":"c","salience":0.7414977550506592},{"name":"types","salience":0.25850221514701843}],"text":" C has two floating point types "},{"tags":[{"name":"paragraph"},{"name":"display","salience":0.8837491273880005},{"name":"printf","salience":0.11625086516141891}],"text":" Display via printf "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"w","salience":0.47991862893104553},{"name":"p","salience":0.2283143252134323},{"name":"width","salience":0.17356601357460022},{"name":"dec point","salience":0.07939990609884262},{"name":"#digits","salience":0.03880111500620842}],"text":" W gives total width (blank padded), P gives #digits after dec point "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"floating point numbers32","salience":1}],"text":" ... Floating Point Numbers32/56 "},{"tags":[{"name":"paragraph"},{"name":"ieee 754","salience":1}],"text":" IEEE 754 standard ... "},{"tags":[{"name":"paragraph"},{"name":"example","salience":0.6815314292907715},{"name":"normalising","salience":0.2383394092321396},{"name":"binary","salience":0.08012917637825012}],"text":" Example of normalising in binary: "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"floating point numbers33","salience":1}],"text":" ... Floating Point Numbers33/56 "},{"tags":[{"name":"paragraph"},{"name":"structure","salience":0.6507119536399841},{"name":"values","salience":0.34928804636001587}],"text":" Internal structure of floating point values "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"},{"name":"int","salience":0.6514027118682861},{"name":"dd","salience":0.34859731793403625}],"text":" More complex than int because 1.dddd e dd "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"floating point numbers34","salience":1}],"text":" ... Floating Point Numbers34/56 "},{"tags":[{"name":"paragraph"},{"name":"details","salience":0.8837491273880005},{"name":"structure","salience":0.11625086516141891}],"text":" Details of internal structure "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"},{"name":"bits","salience":0.6512718200683594},{"name":"bits","salience":0.3487281799316406}],"text":" 00...00 = 24 zero bits, 11...11 = 24 one bits "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"},{"name":"bits","salience":0.6512718200683594},{"name":"bits","salience":0.3487281799316406}],"text":" 00...00 = 24 zero bits, 11...11 = 24 one bits "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"floating point numbers35","salience":1}],"text":" ... Floating Point Numbers35/56 "},{"tags":[{"name":"paragraph"},{"name":"example","salience":1}],"text":" Example (single-precision): "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"sign bit","salience":0.40638408064842224},{"name":"exponent","salience":0.38088518381118774},{"name":"fraction","salience":0.2127307504415512}],"text":" where red is sign bit, green is exponent, blue is fraction "},{"tags":[{"name":"paragraph"},{"name":"note","salience":1}],"text":" Note: "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"arrays36","salience":1}],"text":" Arrays36/56 "},{"tags":[{"name":"paragraph"},{"name":"arrays","salience":0.6206515431404114},{"name":"n elements","salience":0.20545892417430878},{"name":"type t","salience":0.10610680282115936},{"name":"each","salience":0.06778274476528168}],"text":" Arrays are defined to have N elements, each of type T "},{"tags":[{"name":"paragraph"},{"name":"examples","salience":1}],"text":" Examples: "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"elements","salience":0.7815695405006409},{"name":"memory","salience":0.21843047440052032}],"text":" Elements are laid out adjacent in memory "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"arrays37","salience":1}],"text":" ... Arrays37/56 "},{"tags":[{"name":"paragraph"},{"name":"array declaration","salience":0.6275835633277893},{"name":"type v","salience":0.3724164664745331}],"text":" Assuming an array declaration like Type v[N ] ... "},{"tags":[{"name":"paragraph"},{"name":"name","salience":0.5074037909507751},{"name":"array","salience":0.23739148676395416},{"name":"pointer","salience":0.15714845061302185},{"name":"element type type","salience":0.09805627912282944}],"text":" Name of array can be treated as a pointer to element type Type "},{"tags":[{"name":"paragraph"},{"name":"array indexing","salience":0.7290391325950623},{"name":"v","salience":0.27096083760261536}],"text":" Array indexing can be treated as v[i] ‚âÖ *(v+i) "},{"tags":[{"name":"paragraph"},{"name":"element","salience":0.656381368637085},{"name":"array","salience":0.3436186611652374}],"text":" If have pointer to first element, can use it just like an array "},{"tags":[{"name":"paragraph"},{"name":"strings","salience":0.8142310976982117},{"name":"char","salience":0.12296368181705475},{"name":"terminator","salience":0.06280522793531418}],"text":" Strings are just arrays of char with a '\\0' terminator "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"arrays38","salience":1}],"text":" ... Arrays38/56 "},{"tags":[{"name":"paragraph"},{"name":"arrays","salience":0.7229015231132507},{"name":"function","salience":0.27709847688674927}],"text":" When arrays are \"passed\" to a function, actually pass &a[0] "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"arrays39","salience":1}],"text":" ... Arrays39/56 "},{"tags":[{"name":"paragraph"},{"name":"arrays","salience":0.8770638704299927},{"name":"malloc","salience":0.12293615192174911}],"text":" Arrays can be created automatically or via malloc() "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"arrays","salience":0.7217008471488953},{"name":"contents","salience":0.27829912304878235}],"text":" Two separate arrays (different &'s), but have same contents "},{"tags":[{"name":"paragraph"},{"name":"parts","salience":0.5783335566520691},{"name":"arrays","salience":0.4216664433479309}],"text":" (except for the unitialised parts of the arrays) "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"structs40","salience":1}],"text":" Structs40/56 "},{"tags":[{"name":"paragraph"},{"name":"structs","salience":0.7696633338928223},{"name":"components","salience":0.14090658724308014},{"name":"number","salience":0.08943008631467819}],"text":" Structs are defined to have a number of components "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"structs41","salience":1}],"text":" ... Structs41/56 "},{"tags":[{"name":"paragraph"},{"name":"layout","salience":0.5947269201278687},{"name":"components","salience":0.23518185317516327},{"name":"compiler","salience":0.17009124159812927}],"text":" Internal layout of struct components determined by compiler "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"},{"name":"name maps","salience":0.4766119718551636},{"name":"byte","salience":0.344807893037796},{"name":"struct","salience":0.1785801202058792}],"text":" Each name maps to a byte offset within the struct "},{"tags":[{"name":"paragraph"},{"name":"e.g.","salience":0.533840537071228},{"name":"example","salience":0.37574535608291626},{"name":"family","salience":0.09041408449411392}],"text":" E.g. in first example id = offset 0, given = offset 4, family = offset 54, etc. "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"structs42","salience":1}],"text":" ... Structs42/56 "},{"tags":[{"name":"paragraph"},{"name":"alignment","salience":0.5934883952140808},{"name":"padding","salience":0.4065115749835968}],"text":" To ensure alignment, internal \"padding\" may be needed "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"},{"name":"wastes space","salience":0.4331277012825012},{"name":"fields","salience":0.3133489191532135},{"name":"waste","salience":0.2535233795642853}],"text":" Padding wastes space; re-order fields to minimise waste. "},{"tags":[{"name":"paragraph"},{"name":"clang","salience":0.7137685418128967},{"name":"wpadded","salience":0.15555782616138458},{"name":"structs","salience":0.1306736171245575}],"text":" clang has -Wpadded to warn about padding in structs "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"exercise 1","salience":0.7619693279266357},{"name":"struct alternatives43","salience":0.23803067207336426}],"text":" Exercise 1: Struct Alternatives43/56 "},{"tags":[{"name":"paragraph"},{"name":"nodes","salience":0.33012455701828003},{"name":"representations","salience":0.32649651169776917},{"name":"strings","salience":0.23566481471061707},{"name":"list","salience":0.10771413147449493}],"text":" Consider these two possible representations of Nodes in a linked list of strings: "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Show how they would be (a) defined, (b) initialised. How large is each? "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Variable-length Structs44/56 "},{"tags":[{"name":"paragraph"},{"name":"structs","salience":0.6733042001724243},{"name":"pointers","salience":0.18997512757778168},{"name":"objects","salience":0.1367206871509552}],"text":" Structs can contain pointers to dynamic objects "},{"tags":[{"name":"paragraph"},{"name":"object","salience":0.5630180835723877},{"name":"malloc","salience":0.4369819462299347}],"text":" But we can also \"embed\" one dynamic object in a malloc'd struct "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Variable-length Structs45/56 "},{"tags":[{"name":"paragraph"},{"name":"amount","salience":0.5428593158721924},{"name":"memory","salience":0.2652464807033539},{"name":"struct","salience":0.19189421832561493}],"text":" Amount of memory allocated to struct is determined dynamically: "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"bit-wise structs46","salience":1}],"text":" Bit-wise Structs46/56 "},{"tags":[{"name":"paragraph"},{"name":"control","salience":0.35946354269981384},{"name":"layout","salience":0.33630555868148804},{"name":"structs","salience":0.1856406331062317},{"name":"fields","salience":0.11859025806188583}],"text":" For fine-grained control over layout of fields in structs "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"component","salience":0.46939438581466675},{"name":"bit fields","salience":0.28335896134376526},{"name":"component","salience":0.247246652841568}],"text":" Has one component and three bit fields within that component. "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"bit-wise structs47","salience":1}],"text":" ... Bit-wise Structs47/56 "},{"tags":[{"name":"paragraph"},{"name":"ways","salience":0.7983086109161377},{"name":"bit fields","salience":0.20169135928153992}],"text":" Two ways of declaring bit fields: "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"cases","salience":0.5411773920059204},{"name":"sizeof","salience":0.4588226079940796}],"text":" In both cases, sizeof(struct _bit_fields) is 4 bytes. "},{"tags":[{"name":"paragraph"},{"name":"way","salience":0.8692774772644043},{"name":"int","salience":0.1307225525379181}],"text":" First way makes it clearer that a single unsigned int is used. "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"bit-wise structs48","salience":1}],"text":" ... Bit-wise Structs48/56 "},{"tags":[{"name":"paragraph"},{"name":"example","salience":0.5934883952140808},{"name":"graphics objects","salience":0.4065115749835968}],"text":" Another example (graphics objects): "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"bit-wise structs49","salience":1}],"text":" ... Bit-wise Structs49/56 "},{"tags":[{"name":"paragraph"},{"name":"graphics object","salience":0.7983086109161377},{"name":"memory","salience":0.20169135928153992}],"text":" The graphics object would be stored in memory as: "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"bit-wise structs50","salience":1}],"text":" ... Bit-wise Structs50/56 "},{"tags":[{"name":"paragraph"},{"name":"bit-fields","salience":0.43412506580352783},{"name":"alternative","salience":0.24282048642635345},{"name":"masks","salience":0.22171589732170105},{"name":"bit operators","salience":0.10133857280015945}],"text":" Bit-fields provide an alternative to bit operators and masks: "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"unions51","salience":1}],"text":" Unions51/56 "},{"tags":[{"name":"paragraph"},{"name":"unions","salience":0.5853666067123413},{"name":"programmers","salience":0.16974963247776031},{"name":"interpretations","salience":0.12051118910312653},{"name":"memory","salience":0.08555646240711212},{"name":"piece","salience":0.03881613165140152}],"text":" Unions allow programmers to specify multiple interpretations for a single piece of memory. "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"unions52","salience":1}],"text":" ... Unions52/56 "},{"tags":[{"name":"paragraph"},{"name":"example","salience":0.5947922468185425},{"name":"union type","salience":0.21025189757347107},{"name":"cf","salience":0.19495584070682526}],"text":" Example of defining a union type (cf. struct): "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"myunion","salience":1}],"text":" myUnion is a single 4-byte memory object "},{"tags":[{"name":"paragraph"},{"name":"programmers","salience":0.630904495716095},{"name":"bits","salience":0.20679238438606262},{"name":"field names","salience":0.1623031347990036}],"text":" Programmers can specify how to interpret bits using field names. "},{"tags":[{"name":"paragraph"},{"name":"example","salience":0.6715108752250671},{"name":"components","salience":0.22983276844024658},{"name":"size","salience":0.09865634888410568}],"text":" In the example above, all components are coincidentally the same size (4 bytes) "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"unions53","salience":1}],"text":" ... Unions53/56 "},{"tags":[{"name":"paragraph"},{"name":"difference","salience":0.6219350099563599},{"name":"struct","salience":0.21984653174877167},{"name":"union","salience":0.15821844339370728}],"text":" Difference between a struct and a union "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"unions54","salience":1}],"text":" ... Unions54/56 "},{"tags":[{"name":"paragraph"},{"name":"syntax","salience":0.6320440173149109},{"name":"union types","salience":0.2071658819913864},{"name":"variables","salience":0.16079013049602509}],"text":" General syntax for defining union types and variables: "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"c type","salience":0.9295089244842529},{"name":"member names","salience":0.07049105316400528}],"text":" Type can be any C type; Member names must be distinct "},{"tags":[{"name":"paragraph"},{"name":"size","salience":0.42495569586753845},{"name":"union","salience":0.3833286762237549},{"name":"member","salience":0.19171561300754547}],"text":" sizeof(Union) is the size of the largest member "},{"tags":[{"name":"paragraph"}],"text":" &uvar.Member1 == &uvar.Member2 == &uvar.Member3 ... "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"unions55","salience":1}],"text":" ... Unions55/56 "},{"tags":[{"name":"paragraph"},{"name":"use","salience":0.6508029103279114},{"name":"union types","salience":0.2300509661436081},{"name":"variables","salience":0.11914613842964172}],"text":" Common use of union types: \"generic\" variables "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"types56","salience":1}],"text":" Enumerated Types56/56 "},{"tags":[{"name":"paragraph"},{"name":"types","salience":0.61500084400177},{"name":"programmers","salience":0.18989861011505127},{"name":"set","salience":0.12570911645889282},{"name":"values","salience":0.0693914145231247}],"text":" Enumerated types allow programmers to define a set of distinct named values "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"names","salience":0.7371235489845276},{"name":"int values","salience":0.2628764510154724}],"text":" The names are assigned consecutive int values, starting from 0 "},{"tags":[{"name":"paragraph"},{"name":"type","salience":0.5653051733970642},{"name":"primarycolors","salience":0.4346948564052582}],"text":" Above PrimaryColors type is equivalent to "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"variables","salience":0.8395260572433472},{"name":"type enum","salience":0.16047394275665283}],"text":" Variables of type enum... are effectively unsigned ints. "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Produced: 1 Mar 2018 "}]}