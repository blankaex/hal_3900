{"grouped":[{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"the c view of data 1 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"the c view of data 2 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"the c view of data 3 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"the c view of data 4 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"the c view of data 5 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"the physical view of data 6 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"memory 7 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"memory 8 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"memory 9 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"data representation"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"data representation 11 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"character data 12 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"ascii character encoding 13 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"ascii character encoding 14 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"unicode 15 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"utf 8 character encoding 16 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"bytes bits byte 1 byte 2 byte 3 byte 4"},{"tags":[],"text":"1 7 0xxxxxxx"},{"tags":[],"text":"2 11 110xxxxx 10xxxxxx"},{"tags":[],"text":"3 16 1110xxxx 10xxxxxx 10xxxxxx"},{"tags":[],"text":"4 21 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"utf 8 character encoding 17 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"ch unicode bits simple binary utf 8 binary"},{"tags":[],"text":"u 0024 7 010 0100 00100100"},{"tags":[],"text":"u 00a2 11 000 1010 0010 11000010 10100010"},{"tags":[],"text":"u 20ac 16 0010 0000 1010 1100 11100010 10000010 10101100"},{"tags":[],"text":"u 10348 21 0 0001 0000 0011 0100 1000 11110000 10010000 10001101 10001000"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"utf 8 character encoding 18 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"numeric data 19 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"integer constants 20 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"unsigned integers 21 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"unsigned integers 22 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"signed integers 23 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"signed integers 24 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"signed integers 25 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"signed integers 26 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"signed integers 27 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"pointers 28 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"pointers 29 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"floating point numbers 30 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"floating point numbers 31 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"floating point numbers 32 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"floating point numbers 33 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"floating point numbers 34 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"component min value max value"},{"tags":[],"text":"exponent 00000000 127 11111111 128"},{"tags":[],"text":"fraction 00 00 0 11 11 2 1 2 2 2 24"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"component min value max value"},{"tags":[],"text":"exponent 00000000000 2047 11111111111 2048"},{"tags":[],"text":"fraction 00 00 0 11 11 2 1 2 2 2 51"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"floating point numbers 35 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"arrays 36 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"arrays 37 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"arrays 38 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"arrays 39 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"structs 40 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"structs 41 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"structs 42 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"exercise 1 struct alternatives 43 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"variable length structs 44 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"variable length structs 45 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"bit wise structs 46 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"bit wise structs 47 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"bit wise structs 48 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"bit wise structs 49 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"bit wise structs 50 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"unions 51 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"unions 52 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"unions 53 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"unions 54 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"unions 55 56"}]},{"tags":[{"name":"table","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"enumerated types 56 56"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"a location in memory"},{"tags":[],"text":"a value ultimately just a bit string"},{"tags":[],"text":"a name unless created by malloc"},{"tags":[],"text":"a type which determines its size in units of whole bytes sizeof how to interpret its value what operations apply to the value"},{"tags":[],"text":"its size in units of whole bytes sizeof"},{"tags":[],"text":"how to interpret its value"},{"tags":[],"text":"what operations apply to the value"},{"tags":[],"text":"a scope where it s visible within the program"},{"tags":[],"text":"a lifetime during which part of program execution it exists"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"its size in units of whole bytes sizeof"},{"tags":[],"text":"how to interpret its value"},{"tags":[],"text":"what operations apply to the value"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"global variables static variables string constants"},{"tags":[],"text":"objects persist for entire duration of program execution"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"objects created by malloc calloc"},{"tags":[],"text":"objects persist in heap until explicitly free d"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"a small region frame for each active function"},{"tags":[],"text":"frames contain local variables and parameters"},{"tags":[],"text":"a frame is created when a function is called"},{"tags":[],"text":"the frame is removed when the function returns"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"relatively large e g 228 bytes"},{"tags":[],"text":"any byte can be fetched with same cost"},{"tags":[],"text":"cost of fetching 1 2 4 8 bytes is small ns"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"volatile e g dram data lost when powered off"},{"tags":[],"text":"non volatile e g eeprom data stays when powered off"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"any byte address can be used to fetch 1 byte object"},{"tags":[],"text":"byte address for n byte object must be divisible by n"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"load bit strings of sizes 1 2 4 8 bytes"},{"tags":[],"text":"from n byte boundary addresses"},{"tags":[],"text":"into registers in the cpu"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"ascii iso 646 7 bit values using lower 7 bits of a byte top bit always zero can encode roman alphabet digits punctuation control chars"},{"tags":[],"text":"7 bit values using lower 7 bits of a byte top bit always zero"},{"tags":[],"text":"can encode roman alphabet digits punctuation control chars"},{"tags":[],"text":"utf 8 unicode 8 bit values with ability to extend to multi byte values can encode all human languages plus other symbols e g or"},{"tags":[],"text":"8 bit values with ability to extend to multi byte values"},{"tags":[],"text":"can encode all human languages plus other symbols e g or"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"7 bit values using lower 7 bits of a byte top bit always zero"},{"tags":[],"text":"can encode roman alphabet digits punctuation control chars"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"8 bit values with ability to extend to multi byte values"},{"tags":[],"text":"can encode all human languages plus other symbols e g or"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"control characters 0 31 e g 0 n"},{"tags":[],"text":"punctuation chars 32 47 91 96 123 126"},{"tags":[],"text":"digits 48 57 0 9"},{"tags":[],"text":"upper case alphabetic 65 90 a z"},{"tags":[],"text":"lower case alphabetic 97 122 a z"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"not all writing systems use a small set of discrete symbols"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"around 140k symbols covering 140 different languages"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"e g standard roman alphabet punctuation needs only 7 bits"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"uhexdigits insert unicode code value"},{"tags":[],"text":"x2hexdigits insert individual bytes"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"integer subset range of the mathematical integers"},{"tags":[],"text":"floating point subset of the mathematical real numbers"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"42 signed decimal 0 9"},{"tags":[],"text":"0x2a unsigned hexadecimal 0 f"},{"tags":[],"text":"052 signed octal 0 7"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"123u unsigned int value typically 32 bits"},{"tags":[],"text":"123l long int value typically 64 bits"},{"tags":[],"text":"123s short int value typically 16 bits"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"4294967296 1u 666666s 078"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"commonly 32 bits storing values in the range 0 232 1"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"commonly 32 bits storing values in the range 231 231 1"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"signed magnitude first bit is sign rest are magnitude"},{"tags":[],"text":"ones complement form n by inverting all bits in n"},{"tags":[],"text":"twos complement form n by inverting n and adding 1"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"10000101 signed magnitude"},{"tags":[],"text":"11111010 ones complement"},{"tags":[],"text":"11111011 twos complement"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"what do these numbers represent 00000000 10000000"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"what do these numbers represent 00000000 11111111"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"0 00000000 1 11111111 1 00000000"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"number of bits depends on memory size but typically 32 bits"},{"tags":[],"text":"data pointers reference addresses in data heap stack regions"},{"tags":[],"text":"function pointers reference addresses in code region"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"sizeof int sizeof char sizeof double sizeof struct x"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"char can reference any byte address"},{"tags":[],"text":"int must have addr 4 0"},{"tags":[],"text":"double must have addr 8 0"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"many real values don t have exact representation e g 1 3"},{"tags":[],"text":"results of calculations may contain small inaccuracies"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"numbers close to zero have higher precision more accurate"},{"tags":[],"text":"numbers further from zero have lower precision less accurate"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"float typically 32 bit quantity lower precision narrower range"},{"tags":[],"text":"double typically 64 bit quantity higher precision wider range"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"scientific notation with fraction f and exponent e"},{"tags":[],"text":"numbers have form f 2e where both f and e can be ve"},{"tags":[],"text":"infinity representation for and e g 1 0 0"},{"tags":[],"text":"nan representation for invalid value nan e g sqrt 1 0"},{"tags":[],"text":"32 bit single precision 64 bit double precision"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"1010 1011 is normalized as 1 0101011 2011"},{"tags":[],"text":"1010 1011 10 11 16 10 6875"},{"tags":[],"text":"1 0101011 2011 1 43 128 23 1 3359375 8 10 6875"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"fraction part is always 1 bbbbbbbb don t store 1"},{"tags":[],"text":"exponent is offset relative to a baseline 2b 1 1 b exponent bits"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"the baseline aka bias is 127 the exponent is 27"},{"tags":[],"text":"so in the exponent we store 127 7 134 10000110"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"individual array elements are accessed via indices 0 n 1"},{"tags":[],"text":"total amount of space allocated to array n sizeof type"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"constant strings have 0 added automatically"},{"tags":[],"text":"string buffers must allow for element to hold 0"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"each component has a name and a type"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"define the dynamic object as the last component"},{"tags":[],"text":"malloc more space than the struct requires"},{"tags":[],"text":"to make the final component as large as required"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"c allows programmers to specify structs bit wise"}]},{"tags":[{"name":"list","salience":0.5,"theta":1}],"items":[{"tags":[],"text":"specify unnamed components using standard types"},{"tags":[],"text":"specify named individual bit fields in each component"}]}],"block":[{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"course notes b memory and data representation"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"the c view of data1 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"a c program sees data as a collection of variables"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"each variable has a number of properties e g name type size"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"the c view of data2 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"variables are examples of computational objects"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"each computational object has"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"the c view of data3 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"c allocates data objects to various well defined regions of memoryduring program execution"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"the c view of data4 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"the global data area contains"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"the c view of data5 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"example of runtime stack during call to h"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"the physical view of data6 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"memory indexed array of bytes"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"indexes are memory addresses a k a pointers"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"data can be fetched in chunks of 1 2 4 8 bytes"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"memory7 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"also called ram main memory primary storage"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"technology semiconductor based"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"distinguishing features"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"two properties related to data persistence"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"memory8 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"when addressing objects in memory"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"data bytes in registers may be in different order to memory e g"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"memory9 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"memories can be categorised as big endian or little endian"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"data representation"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"data representation11 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"ultimately memory allows you to"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"need to interpret this bit string as a meaningful value"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"data representations provide a way of assigning meaning to bit strings"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"character data12 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"character data has several possible representations encodings"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"the two most common"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"e g or"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"ascii character encoding13 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"uses values in the range 0x00 to 0x7f 0 127"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"characters partitioned into sequential groups"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"sequential nature of groups allow for e g ch 0"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"ascii character encoding14 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"hexademical ascii char table from man 7 ascii"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"0x0a n 0x20 0x09 t but note no eof"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"unicode15 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"widely used standard for expressing writing systems"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"utf 8 character encoding16 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"utf 8 uses a variable length encoding as follows"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"the 127 1 byte codes are compatible with ascii"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"the 2048 2 byte codes include most latin script alphabets"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"the 65536 3 byte codes include most asian languages"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"the 2097152 4 byte codes include symbols and emojis and"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"utf 8 character encoding17 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"utf 8 examples"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"unicode strings can be manipulated in c e g"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"like other c strings they are terminated by a 0 byte i e 0"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"utf 8 character encoding18 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"unicode constants in c strings"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"the following two notations work in some contexts"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"the red sequences produce 3 bytes and 1 unicode symbol"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"numeric data19 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"numeric data comes in two major forms"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"integer constants20 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"three ways to write integer constants in c"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"unsigned integers21 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"the unsigned int data type"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"unsigned integers22 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"value interpreted as binary number"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"e g consider an 8 bit unsigned int"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"01001101 26 23 22 20 64 8 4 1 77"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"addition is bitwise with carry"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"most machines will also flag the overflow in the fourth example"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"signed integers23 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"the int data type"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"signed integers24 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"several possible representations for negative values"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"examples representations of 8 bit 5 where 5 is 00000101"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"signed integers25 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"signed magnitude easy to form x from x or in high order bit"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"a problem using 8 bit ints"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"another problem x x 0 mostly with simple addition"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"to fix requires extra hardware in alu"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"signed integers26 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"ones complement easy to form x from x neg all bits"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"a problem using 8 bit ints"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"at least x x is equal to one of the zeroes with simple addition"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"signed integers27 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"twos complement to form x from x neg all bits then add 1"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"now have only one representation for zero 00000000"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"even better x x 0 in all cases with simple addition"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"always produces an overflow bit but can ignore this"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"pointers28 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"pointers represent memory addresses locations"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"pointers29 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"can move from object to object by pointer arithmetic"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"for any pointer t p p increases p by sizeof t"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"examples assuming 16 bit pointers"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"a common efficient paradigm for scanning a string"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"floating point numbers30 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"floating point numbers model a tiny subset of"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"floating point numbers31 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"c has two floating point types"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"display via printf"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"w gives total width blank padded p gives digits after dec point"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"floating point numbers32 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"ieee 754 standard"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"example of normalising in binary"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"floating point numbers33 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"internal structure of floating point values"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"more complex than int because 1 dddd e dd"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"floating point numbers34 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"details of internal structure"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"00 00 24 zero bits 11 11 24 one bits"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"00 00 24 zero bits 11 11 24 one bits"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"floating point numbers35 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"example single precision"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"where red is sign bit green is exponent blue is fraction"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"note"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"arrays36 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"arrays are defined to have n elements each of type t"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"examples"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"elements are laid out adjacent in memory"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"arrays37 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"assuming an array declaration like type v n"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"name of array can be treated as a pointer to element type type"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"array indexing can be treated as v i v i"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"if have pointer to first element can use it just like an array"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"strings are just arrays of char with a 0 terminator"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"arrays38 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"when arrays are passed to a function actually pass a 0"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"arrays39 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"arrays can be created automatically or via malloc"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"two separate arrays different s but have same contents"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"except for the unitialised parts of the arrays"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"structs40 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"structs are defined to have a number of components"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"structs41 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"internal layout of struct components determined by compiler"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"each name maps to a byte offset within the struct"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"e g in first example id offset 0 given offset 4 family offset 54 etc"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"structs42 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"to ensure alignment internal padding may be needed"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"padding wastes space re order fields to minimise waste"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"clang has wpadded to warn about padding in structs"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"exercise 1 struct alternatives43 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"consider these two possible representations of nodes in a linked list of strings"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"show how they would be a defined b initialised how large is each"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"variable length structs44 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"structs can contain pointers to dynamic objects"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"but we can also embed one dynamic object in a malloc d struct"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"variable length structs45 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"amount of memory allocated to struct is determined dynamically"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"bit wise structs46 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"for fine grained control over layout of fields in structs"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"has one component and three bit fields within that component"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"bit wise structs47 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"two ways of declaring bit fields"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"in both cases sizeof struct bit fields is 4 bytes"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"first way makes it clearer that a single unsigned int is used"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"bit wise structs48 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"another example graphics objects"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"bit wise structs49 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"the graphics object would be stored in memory as"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"bit wise structs50 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"bit fields provide an alternative to bit operators and masks"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"unions51 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"unions allow programmers to specify multiple interpretations for a single piece of memory"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"unions52 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"example of defining a union type cf struct"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"myunion is a single 4 byte memory object"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"programmers can specify how to interpret bits using field names"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"in the example above all components are coincidentally the same size 4 bytes"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"unions53 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"difference between a struct and a union"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"unions54 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"general syntax for defining union types and variables"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"type can be any c type member names must be distinct"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"sizeof union is the size of the largest member"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"uvar member1 uvar member2 uvar member3"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"unions55 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"common use of union types generic variables"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"enumerated types56 56"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"enumerated types allow programmers to define a set of distinct named values"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"the names are assigned consecutive int values starting from 0"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"above primarycolors type is equivalent to"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"variables of type enum are effectively unsigned ints"},{"tags":[{"name":"paragraph","salience":0.5,"theta":1}],"text":"produced 1 mar 2018"}]}