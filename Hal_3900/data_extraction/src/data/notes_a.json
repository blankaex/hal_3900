{"grouped":[{"tags":["table"],"items":[{"text":"Course Introduction"}]},{"tags":["table"],"items":[{"text":"COMP1521 18s1Computer Systems Fundamentals2/74"}]},{"tags":["table"],"items":[{"text":"Course Staff3/74"}]},{"tags":["table"],"items":[{"text":"COMP1521 on the Web4/74"}]},{"tags":["table"],"items":[{"text":"... COMP1521 on the Web5/74"}]},{"tags":["table"],"items":[{"text":"Me6/74"}]},{"tags":["table"],"items":[{"text":"You7/74"}]},{"tags":["table"],"items":[{"text":"Course Goals8/74"}]},{"tags":["table"],"items":[{"text":"Course Context9/74"}]},{"tags":["table"],"items":[{"text":"Themes10/74"}]},{"tags":["table"],"items":[{"text":"Detailed Topics11/74"}]},{"tags":["table"],"items":[{"text":"Textbook12/74"}]},{"tags":["table"],"items":[{"text":"... Textbook13/74"}]},{"tags":["table"],"items":[{"text":" Recommended reference ... Computer Systems: A Programmer's Perspective, Bryant and O'Halloren covers most topics, and quite well but uses a different machine code Available in UNSW Bookroom "}]},{"tags":["table"],"items":[]},{"tags":["table"],"items":[{"text":"Books vs Notes vs Slides14/74"}]},{"tags":["table"],"items":[{"text":"Systems and Tools15/74"}]},{"tags":["table"],"items":[{"text":"Classes16/74"}]},{"tags":["table"],"items":[{"text":"... Classes17/74"}]},{"tags":["table"],"items":[{"text":"Assessments18/74"}]},{"tags":["table"],"items":[{"text":"... Assessments19/74"}]},{"tags":["table"],"items":[{"text":"Quizzes20/74"}]},{"tags":["table"],"items":[{"text":"Blogs21/74"}]},{"tags":["table"],"items":[{"text":"Misconduct22/74"}]},{"tags":["table"],"items":[{"text":"Final Exam23/74"}]},{"tags":["table"],"items":[{"text":"Course Assessment24/74"}]},{"tags":["table"],"items":[{"text":"Supplementary Exams25/74"}]},{"tags":["table"],"items":[{"text":"Summary26/74"}]},{"tags":["table"],"items":[{"text":"Computer Systems"}]},{"tags":["table"],"items":[{"text":"Some History28/74"}]},{"tags":["table"],"items":[{"text":"... Some History29/74"}]},{"tags":["table"],"items":[{"text":"... Some History30/74"}]},{"tags":["table"],"items":[{"text":"Computer Systems31/74"}]},{"tags":["table"],"items":[{"text":"Processor32/74"}]},{"tags":["table"],"items":[{"text":"Storage33/74"}]},{"tags":["table"],"items":[{"text":"... Storage34/74"}]},{"tags":["table"],"items":[{"text":"Computer System Layers35/74"}]},{"tags":["table"],"items":[{"text":"C Program Life-cycle36/74"}]},{"tags":["table"],"items":[{"text":"... C Program Life-cycle37/74"}]},{"tags":["table"],"items":[{"text":"History of C Compilers38/74"}]},{"tags":["table"],"items":[{"text":"C Revisited"}]},{"tags":["table"],"items":[{"text":"What (I assume) You Know40/74"}]},{"tags":["table"],"items":[{"text":"Type Definitions41/74"}]},{"tags":["table"],"items":[{"text":"Assignment as Expression42/74"}]},{"tags":["table"],"items":[{"text":"... Assignment as Expression43/74"}]},{"tags":["table"],"items":[{"text":"Ignoring Expression Results44/74"}]},{"tags":["table"],"items":[{"text":"... Ignoring Expression Results45/74"}]},{"tags":["table"],"items":[{"text":"Fine Control46/74"}]},{"tags":["table"],"items":[{"text":"... Fine Control47/74"}]},{"tags":["table"],"items":[{"text":"Fine Function Control48/74"}]},{"tags":["table"],"items":[{"text":"Fine Program Control49/74"}]},{"tags":["table"],"items":[{"text":"Stacks, Queues, PriorityQs50/74"}]},{"tags":["table"],"items":[{"text":"... Stacks, Queues, PriorityQs51/74"}]},{"tags":["table"],"items":[{"text":"... Stacks, Queues, PriorityQs52/74"}]},{"tags":["table"],"items":[{"text":"Example Stack/Queue/PriorityQ Usage53/74"}]},{"tags":["table"],"items":[{"text":"... Example Stack/Queue/PriorityQ Usage54/74"}]},{"tags":["table"],"items":[{"text":"... Example Stack/Queue/PriorityQ Usage55/74"}]},{"tags":["table"],"items":[{"text":"... Example Stack/Queue/PriorityQ Usage56/74"}]},{"tags":["table"],"items":[{"text":"... Example Stack/Queue/PriorityQ Usage57/74"}]},{"tags":["table"],"items":[{"text":"... Example Stack/Queue/PriorityQ Usage58/74"}]},{"tags":["table"],"items":[{"text":"... Example Stack/Queue/PriorityQ Usage59/74"}]},{"tags":["table"],"items":[{"text":"Stack Data Structure60/74"}]},{"tags":["table"],"items":[{"text":"Example Stack Client61/74"}]},{"tags":["table"],"items":[{"text":"Queue Data Structure62/74"}]},{"tags":["table"],"items":[{"text":"Priority Queue Data Structure63/74"}]},{"tags":["table"],"items":[{"text":"Bit Manipulation"}]},{"tags":["table"],"items":[{"text":"Bits in Bytes in Words65/74"}]},{"tags":["table"],"items":[{"text":"Binary Constants66/74"}]},{"tags":["table"],"items":[{"text":"Bitwise AND67/74"}]},{"tags":["table"],"items":[{"text":"Bitwise OR68/74"}]},{"tags":["table"],"items":[{"text":"Flag-bits69/74"}]},{"tags":["table"],"items":[{"text":"... Flag-bits70/74"}]},{"tags":["table"],"items":[{"text":"Bitwise XOR71/74"}]},{"tags":["table"],"items":[{"text":"Bitwise NEG72/74"}]},{"tags":["table"],"items":[{"text":"Left Shift73/74"}]},{"tags":["table"],"items":[{"text":"Right Shift74/74"}]},{"tags":["list"],"items":[{"text":" Convenor: John Shepherd "},{"text":" Course Admin: Wael Alghamdi "},{"text":" Tutors: Louis Cheung, Matthew Gibson, Alexander Hinds, Aydin Itil, Jashank Jeremy, Thomas Kilkelly, Daniel Li, Alex Nendick, Leon Nguyen, Kevin Ni, Ellen Oates, Shanush Prema Thasarathan, Minjie Shen "},{"text":" Lab assistants: Caspian Baska, Dylan Brotherston, Jason Chu, Jesse Colville, Junjie Lei, Oliver Richards, Harrison Scott, Simon Shields, James Ye, Michael Yoo "}]},{"tags":["list"],"items":[{"text":" quizzes, polls, comments/forums, forming groups, ... "}]},{"tags":["list"],"items":[{"text":" information extraction, database systems, online learning "}]},{"tags":["list"],"items":[{"text":" UG: COMP{1921,1511,1521,2041,3311,4011} "},{"text":" PG: COMP{9311,9315}, GSOE9010 "}]},{"tags":["list"],"items":[{"text":" Deputy Head of School (Education) "}]},{"tags":["list"],"items":[{"text":" Craft Beer, AFL, Craft Beer, K-Drama, Craft Beer, Nordic Noir, ... "}]},{"tags":["list"],"items":[{"text":" COMP1511 or COMP1917 or COMP1911 (maybe with bridging) "}]},{"tags":["list"],"items":[{"text":" review/strengthen C knowledge "},{"text":" introduce/revise core data structures (stacks, queues) "}]},{"tags":["list"],"items":[{"text":" gets you thinking like a programmer "},{"text":" solving problems by developing programs "},{"text":" expressing your solution in the C language "}]},{"tags":["list"],"items":[{"text":" gets you thinking like a systems programmer "},{"text":" with a deep understanding of run-time behaviour "},{"text":" and better able to reason about your C programs "}]},{"tags":["list"],"items":[{"text":" Processors data representation, instruction set assembler programming "},{"text":" data representation, instruction set "},{"text":" assembler programming "},{"text":" Program execution (mapping C to assembler) memory layout: stack, heap, code control structures, function calls "},{"text":" memory layout: stack, heap, code "},{"text":" control structures, function calls "},{"text":" Operating system architecture memory, cache, devices, i/o, interrupts virtual memory, processes, file systems "},{"text":" memory, cache, devices, i/o, interrupts "},{"text":" virtual memory, processes, file systems "},{"text":" Concurrency parallelism, synchronisation, coordination "},{"text":" parallelism, synchronisation, coordination "},{"text":" Network architecture "}]},{"tags":["list"],"items":[{"text":" data representation, instruction set "},{"text":" assembler programming "}]},{"tags":["list"],"items":[{"text":" memory layout: stack, heap, code "},{"text":" control structures, function calls "}]},{"tags":["list"],"items":[{"text":" memory, cache, devices, i/o, interrupts "},{"text":" virtual memory, processes, file systems "}]},{"tags":["list"],"items":[{"text":" parallelism, synchronisation, coordination "}]},{"tags":["list"],"items":[{"text":" \"Introduction to Computing Systems: from bits and gates to C and beyond\", Patt and Patel "},{"text":" \"From NAND to Tetris: Building a modern computer system from first principles\", Nisan and Schocken "},{"text":" COMP2121 Course Web Site, Parameswaran and Guo "}]},{"tags":["list"],"items":[{"text":" Computer Systems: A Programmer's Perspective, Bryant and O'Halloren "},{"text":" covers most topics, and quite well "},{"text":" but uses a different machine code "}]},{"tags":["list"],"items":[{"text":" cover some parts of syllabus in great detail "}]},{"tags":["list"],"items":[{"text":" cover whole syllabus, but not in great detail "}]},{"tags":["list"],"items":[{"text":" summarize Course Notes and add exercises "}]},{"tags":["list"],"items":[{"text":" all tools available on the CSE lab machines "},{"text":" can use VLab to connect to CSE from home "}]},{"tags":["list"],"items":[{"text":" 4 hours/week for 9 Weeks (a la UNSW3+) "},{"text":" all lectures will be video'd (Echo360 and YouTube) "}]},{"tags":["list"],"items":[{"text":" 10 Weeks, 1 hour tute, followed by 2-hour lab "},{"text":" explore lecture material via exercises "}]},{"tags":["list"],"items":[{"text":" small(ish) implementation tasks, done in pairs "},{"text":" give skills practice (leading on to assignments/exam) "}]},{"tags":["list"],"items":[{"text":" go to a different tute in that week "},{"text":" go to a different lab if you need help "},{"text":" submit lab by next Sunday, get your tutor to assess "}]},{"tags":["list"],"items":[{"text":" submitted before Sunday at end of week X "},{"text":" demonstrated to tutor during Week X lab OR, demonstrated at the start of Week X+1 lab "},{"text":" aim of demo is to get feedback on design and style "}]},{"tags":["list"],"items":[{"text":" Ass1: Assembly Language, weeks 3-6, 9 marks "},{"text":" Ass2: C Programming, weeks 7-10, 11 marks "},{"text":" both assignments are completed individually "},{"text":" can be completed on your own machine but you must test on the CSE machines before you submit "},{"text":" but you must test on the CSE machines before you submit "}]},{"tags":["list"],"items":[{"text":" but you must test on the CSE machines before you submit "}]},{"tags":["list"],"items":[{"text":" 3-4 questions, multiple-choice format "},{"text":" primarily for review of recent topics "},{"text":" taken in your own time (via Webcms3) "}]},{"tags":["list"],"items":[{"text":" write it at least weekly "},{"text":" reflect on and plan your learning "}]},{"tags":["list"],"items":[{"text":" you maintain regularly (weekly) "},{"text":" what you write is interesting "}]},{"tags":["list"],"items":[{"text":" MIPS / QtSpim / C quick reference guides "},{"text":" Unix Programmers Manual (man) (very handy) "}]},{"tags":["list"],"items":[{"text":" some programming exercises (Prac) "},{"text":" some descriptive/analytical questions (Theory) "}]},{"tags":["list"],"items":[{"text":" do not attend the final exam "},{"text":" have a documented reason for not attending "}]},{"tags":["list"],"items":[{"text":" have (ExamOK && 47 ≤ FinalMark < 50) "}]},{"tags":["list"],"items":[{"text":" more confident in your own ability "},{"text":" with an expanded set of tools to draw on "},{"text":" a deeper understanding of \"run-time\" behaviour "},{"text":" able to view software from systems-level perspective "},{"text":" producing better engineered software "},{"text":" ultimately, enjoying the programming process more "}]},{"tags":["list"],"items":[{"text":" 1613 ... first use of the word \"computer\" (meaning \"a person who performs computations\") "},{"text":" 1800's ... Babbage's mechanical computers (Analytical Engine and Difference Engine, with Ada Lovelace) "},{"text":" 1936 ... Zuse's Z1 electro-mechanical computer (first binary programmable computer) "},{"text":" 1943 ... Eckert/Mauchley's ENIAC (first fully functional electric digital computer ... 18000 valves) "},{"text":" 1949 ... EDSAC and Manchester Mark 1 (first generation stored program computers ... valves) "},{"text":" 1955 ... Whirlwhind at MIT (first digital computer with magnetic core RAM) "},{"text":" 1960 ... Digital Equipment Corporation PDP-1 (first mini-computer ... recognisable as \"modern\" computer) "},{"text":" 1971 ... Intel 4004 (first microprocessor) "}]},{"tags":["list"],"items":[{"text":" control, arithmetic, logic, bit operators "},{"text":" relatively small set of simple instructions "},{"text":" small amount of very fast storage (registers) "},{"text":" small number of control registers (e.g. PC) "},{"text":" fast fetch-decode-execute cycle (ns) "},{"text":" access to system bus to communicate with other components "},{"text":" all integrated on a single chip "}]},{"tags":["list"],"items":[{"text":" very large random-addressable array of bytes "},{"text":" can fetch single bytes into CPU registers "},{"text":" can fetch multi-byte chunks into CPU (e.g. 4-byte int) "},{"text":" typically: access time 70 ns, size 64 GB "}]},{"tags":["list"],"items":[{"text":" very very large block-oriented storage "},{"text":" often on spinning disk, fetching 512B-4KB per request "},{"text":" typically: access time 30 ms, size 8 TB "},{"text":" nowadays, SSD: access time 0.8ms, size 1GB "}]},{"tags":["list"],"items":[{"text":" well-designed, readable, maintainable, ... "}]},{"tags":["list"],"items":[{"text":" efficiently producing correct results "},{"text":" handling error conditions robustly "},{"text":" utlising services of underlying operating system "}]},{"tags":["list"],"items":[{"text":" cc ... original compiler by Dennis Ricthie (1971) "},{"text":" gcc ... open source compiler by Richard Stallman et al (1987) "},{"text":" gcc 2.0 ... added C++ compilation (1992) "},{"text":" clang ... gcc replacement by Apple et al (2007) "},{"text":" dcc ... Python wrapper on clang by Andrew Taylor (2012?) augments error messages to be more helpful to novices incorporates useful run-time checking to help debugging "},{"text":" augments error messages to be more helpful to novices "},{"text":" incorporates useful run-time checking to help debugging "}]},{"tags":["list"],"items":[{"text":" augments error messages to be more helpful to novices "},{"text":" incorporates useful run-time checking to help debugging "}]},{"tags":["list"],"items":[{"text":" design an algorithmic solution "},{"text":" describe your solution in C code, using ... variables, assignment, tests (==, !, <=, &&, etc) if, while, for, break, scanf(), printf() functions, return, prototypes, *.h, *.c arrays, files, structs, pointers, malloc(), free() "},{"text":" variables, assignment, tests (==, !, <=, &&, etc) "},{"text":" if, while, for, break, scanf(), printf() "},{"text":" functions, return, prototypes, *.h, *.c "},{"text":" arrays, files, structs, pointers, malloc(), free() "}]},{"tags":["list"],"items":[{"text":" variables, assignment, tests (==, !, <=, &&, etc) "},{"text":" if, while, for, break, scanf(), printf() "},{"text":" functions, return, prototypes, *.h, *.c "},{"text":" arrays, files, structs, pointers, malloc(), free() "}]},{"tags":["list"],"items":[{"text":" linked structures, ADTs, sorting, recursion, bit operations "}]},{"tags":["list"],"items":[{"text":" are typically success/failure status "}]},{"tags":["list"],"items":[{"text":" extreemly unlikely to occur "},{"text":" not fatal if the failure occurs "}]},{"tags":["list"],"items":[{"text":" break exits the innermost enclosing loop "},{"text":" continue goes directly to the next iteration "}]},{"tags":["list"],"items":[{"text":" same effect can be achieved using ifs inside loop "}]},{"tags":["list"],"items":[{"text":" but, used carefully, can make code easier to understand "}]},{"tags":["list"],"items":[{"text":" a function can contain several returns "},{"text":" each can capture a specific condition to complete function "}]},{"tags":["list"],"items":[{"text":" stacks ... last-in-first-out lists e.g. used to represent function local variables "},{"text":" e.g. used to represent function local variables "},{"text":" queues ... first-in-first-out lists e.g. used to ensure fair access to a resource "},{"text":" e.g. used to ensure fair access to a resource "},{"text":" priority queues ... highest-priority-out lists e.g. used to represent weighted lists of processes "},{"text":" e.g. used to represent weighted lists of processes "}]},{"tags":["list"],"items":[{"text":" e.g. used to represent function local variables "}]},{"tags":["list"],"items":[{"text":" e.g. used to ensure fair access to a resource "}]},{"tags":["list"],"items":[{"text":" e.g. used to represent weighted lists of processes "}]},{"tags":["list"],"items":[{"text":" a sequence of items "},{"text":" an operation to insert an item into the sequence "},{"text":" an operation to remove an item from the sequence "}]},{"tags":["list"],"items":[{"text":" stack ... insert adds on top, removes from top "},{"text":" queue ... insert adds at tail, removes from head "},{"text":" priorityQ ... inserts in priority order, removes from head "}]},{"tags":["list"],"items":[{"text":" insert operation called push() "},{"text":" remove operation called pop() "},{"text":" has a top (last item added) and a size "}]},{"tags":["list"],"items":[{"text":" insert operation called enter (or enqueue()) "},{"text":" remove operation called leave (or dequeue()) "},{"text":" has a head (first item added), a tail (last item added), and a size "}]},{"tags":["list"],"items":[{"text":" insert operation called enter (or enqueue()) "},{"text":" remove operation called leave (or dequeue()) "},{"text":" has a head (next for removal), a tail (lowest-priority), and a size "}]},{"tags":["list"],"items":[{"text":" char = 1 byte = 8 bits ('a' is 01100001) "},{"text":" short = 2 bytes = 16 bits (42 is 0000000000101010) "},{"text":" int = 4 bytes = 32 bits (42 is 0000000000...0000101010) "},{"text":" double = 8 bytes = 64 bits "}]},{"tags":["list"],"items":[{"text":" takes two values (1,2,4,8 bytes), treats as sequence of bits "},{"text":" performs logical AND on each corresponding pair of bits "},{"text":" result contains same number of bits as inputs "}]},{"tags":["list"],"items":[{"text":" takes two values (1,2,4,8 bytes), treats as sequence of bits "},{"text":" performs logical OR on each corresponding pair of bits "},{"text":" result contains same number of bits as inputs "}]},{"tags":["list"],"items":[{"text":" rwx gives permissions for the owner of the file "},{"text":" rw- gives permissions for group members "},{"text":" r-- gives permissions for everyone else "}]},{"tags":["list"],"items":[{"text":" takes two values (1,2,4,8 bytes), treats as sequence of bits "},{"text":" performs logical XOR on each corresponding pair of bits "},{"text":" result contains same number of bits as inputs "}]},{"tags":["list"],"items":[{"text":" takes a single value (1,2,4,8 bytes), treats as sequence of bits "},{"text":" performs logical negation of each bit "},{"text":" result contains same number of bits as input "}]},{"tags":["list"],"items":[{"text":" takes a single value (1,2,4,8 bytes), treats as sequence of bits "},{"text":" and a small positive integer x "},{"text":" moves (shifts) each bit x positions to the left "},{"text":" left-end bit vanishes; right-end bit replaced by zero "},{"text":" result contains same number of bits as input "}]},{"tags":["list"],"items":[{"text":" takes a single value (1,2,4,8 bytes), treats as sequence of bits "},{"text":" and a small positive integer x "},{"text":" moves (shifts) each bit x positions to the right "},{"text":" right-end bit vanishes; left-end bit replaced by zero** "},{"text":" result contains same number of bits as input "}]}],"block":[{"tags":["paragraph"],"text":"A: Introduction, C Language"},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Course Introduction "},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" COMP1521 18s1Computer Systems Fundamentals2/74 "},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Course Staff3/74 "},{"tags":["paragraph"],"text":" The Cast (of thousands): "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" COMP1521 on the Web4/74 "},{"tags":["paragraph"],"text":" Primary entry point is Webcms3 "},{"tags":["paragraph"],"text":" http://webcms3.cse.unsw.edu.au/COMP1521/18s1/ "},{"tags":["paragraph"],"text":" Most of the content lives under "},{"tags":["paragraph"],"text":" /home/cs1521/web/18s1/... (e.g.lecs,labs,tutes,...) "},{"tags":["paragraph"],"text":" Most content is web-accessible via "},{"tags":["paragraph"],"text":" http://cgi.cse.unsw.edu.au/~cs1521/18s1/index.php "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... COMP1521 on the Web5/74 "},{"tags":["paragraph"],"text":" Most material on Webcms3 is publically readable. "},{"tags":["paragraph"],"text":" Login to Webcms3 is via zID/zPass, and is needed for "},{"tags":["paragraph"],"text":" Check marks via sturec (on cmd line or via Webcms3) "},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":" For questions: use Webcms3 forum or email cs1521@cse "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Me6/74 "},{"tags":["paragraph"],"text":" Research: "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" You7/74 "},{"tags":["paragraph"],"text":" Students in this course have completed: "},{"tags":["paragraph"],"text":" COMP1511/1917 also studied linked lists, ADTs and sorting "},{"tags":["paragraph"],"text":" Since not everyone has seen these, we won't use them "},{"tags":["paragraph"],"text":" For this week ... "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Course Goals8/74 "},{"tags":["paragraph"],"text":" COMP1511/1911/1917 ... "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Course Context9/74 "},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Themes10/74 "},{"tags":["paragraph"],"text":" Major themes ... "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Detailed Topics11/74 "},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Textbook12/74 "},{"tags":["paragraph"],"text":" There is no prescribed textbook "},{"tags":["paragraph"],"text":" Material has been drawn from: "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... Textbook13/74 "},{"tags":["paragraph"],"text":" Recommended reference ... Computer Systems: A Programmer's Perspective, Bryant and O'Halloren covers most topics, and quite well but uses a different machine code Available in UNSW Bookroom Books vs Notes vs Slides14/74 "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":" Textbooks ... "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Systems and Tools15/74 "},{"tags":["paragraph"],"text":" Prac work based on Linux tools "},{"tags":["paragraph"],"text":" Assembly language: MIPS on QtSpim (also xspim in CSE) "},{"tags":["paragraph"],"text":" Use your own favourite text editor ( I use vim ) "},{"tags":["paragraph"],"text":" Other tools: make, gdb, man, bc -l "},{"tags":["paragraph"],"text":" Learn to love the shell and command-line ... very useful "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Classes16/74 "},{"tags":["paragraph"],"text":" Lectures ... "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... Classes17/74 "},{"tags":["paragraph"],"text":" Public Holidays: Friday Week 5, Wednesday Week 8 "},{"tags":["paragraph"],"text":" Fortunately, public holidays don't clobber lecture slots "},{"tags":["paragraph"],"text":" BUT if you have tute/lab on Friday or Wednesday "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Assessments18/74 "},{"tags":["paragraph"],"text":" Lab exercises contribute 10% to overall mark. "},{"tags":["paragraph"],"text":" Ideally, the lab exercise for Week X must be "},{"tags":["paragraph"],"text":" Exceptionally good submissions can get bonus (A+) "},{"tags":["paragraph"],"text":" Total mark for labs can be > 10 (capped at 11). "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... Assessments19/74 "},{"tags":["paragraph"],"text":" Two assignments ... "},{"tags":["paragraph"],"text":" Good time management avoids late penalties "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Quizzes20/74 "},{"tags":["paragraph"],"text":" Five small online quizzes ... "},{"tags":["paragraph"],"text":" Starting this week ... C revision quiz "},{"tags":["paragraph"],"text":" Then in weeks 2, 4, 6, 8, 10 "},{"tags":["paragraph"],"text":" Each quiz due before Sunday 11:59pm at end of week "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Blogs21/74 "},{"tags":["paragraph"],"text":" Keep a blog about what you're learning "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Misconduct22/74 "},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Final Exam23/74 "},{"tags":["paragraph"],"text":" 3-hour on-line torture exam during the exam period. "},{"tags":["paragraph"],"text":" Held in CSE labs (must know lab environment) "},{"tags":["paragraph"],"text":" On-line documentation available in exam: "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Course Assessment24/74 "},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Supplementary Exams25/74 "},{"tags":["paragraph"],"text":" Supplementary Exams are available to students who "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Summary26/74 "},{"tags":["paragraph"],"text":" The goal is for you to become a better programmer "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Computer Systems "},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Some History28/74 "},{"tags":["paragraph"],"text":" A potted history of \"computer systems\" ... "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... Some History29/74 "},{"tags":["paragraph"],"text":" ENIAC ... "},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... Some History30/74 "},{"tags":["paragraph"],"text":" Whirlwind ... "},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Computer Systems31/74 "},{"tags":["paragraph"],"text":" Component view of typical modern computer system "},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Processor32/74 "},{"tags":["paragraph"],"text":" Modern processors provide "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Storage33/74 "},{"tags":["paragraph"],"text":" Memory (main memory) consists of "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... Storage34/74 "},{"tags":["paragraph"],"text":" Run-time memory usage depends on language processor. "},{"tags":["paragraph"],"text":" How typical C compiler uses the memory: "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Computer System Layers35/74 "},{"tags":["paragraph"],"text":" View of software layers in typical computer system "},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" C Program Life-cycle36/74 "},{"tags":["paragraph"],"text":" Your C programs start as text "},{"tags":["paragraph"],"text":" How to make one C program run on different machine architectures? "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... C Program Life-cycle37/74 "},{"tags":["paragraph"],"text":" From source code to machine code ... "},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" History of C Compilers38/74 "},{"tags":["paragraph"],"text":" Milestones in C history "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" C Revisited "},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" What (I assume) You Know40/74 "},{"tags":["paragraph"],"text":" Given a problem specification ... "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Type Definitions41/74 "},{"tags":["paragraph"],"text":" Reminder: you can give a name to a C type definition e.g. "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" and then use the name instead of the type definition e.g. "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Assignment as Expression42/74 "},{"tags":["paragraph"],"text":" Assignments can be treated as expressions returning a value "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Can be useful "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Can be dangerous "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... Assignment as Expression43/74 "},{"tags":["paragraph"],"text":" Assignment-as-expression often used to simplify loops, e.g. "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" rather than "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Ignoring Expression Results44/74 "},{"tags":["paragraph"],"text":" We usually ignore the value returned by an assignment. "},{"tags":["paragraph"],"text":" Some C functions return a result which is often ignored, e.g. "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" printf() returns the number of characters printed. "},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":" Exercise: what value does the above printf() return? "},{"tags":["paragraph"],"text":" Choose answer at www.zeetings.com/jas1/0004-2402-0001 "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... Ignoring Expression Results45/74 "},{"tags":["paragraph"],"text":" Return values not related to function semantics "},{"tags":["paragraph"],"text":" Ignored return error statuses (stati?) are generally "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Fine Control46/74 "},{"tags":["paragraph"],"text":" break and continue provide fine loop control "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... Fine Control47/74 "},{"tags":["paragraph"],"text":" Example: scan a[N], stop on zero or at end, ignore negative values "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Fine Function Control48/74 "},{"tags":["paragraph"],"text":" return returns the result of a function "},{"tags":["paragraph"],"text":" Good style says \"have a single return at end\" "},{"tags":["paragraph"],"text":" However ... "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Fine Program Control49/74 "},{"tags":["paragraph"],"text":" Good style says \"Program returns at end of main()\" "},{"tags":["paragraph"],"text":" However, exceptional conditions may require early exit "},{"tags":["paragraph"],"text":" exit() terminates program with return code "},{"tags":["paragraph"],"text":" Can be used from anywhere in program (even deeply nested functions) "},{"tags":["paragraph"],"text":" assert() can also be used to trigger program exit "},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Stacks, Queues, PriorityQs50/74 "},{"tags":["paragraph"],"text":" Computer systems frequently make use of: "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... Stacks, Queues, PriorityQs51/74 "},{"tags":["paragraph"],"text":" All of these data structures have "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... Stacks, Queues, PriorityQs52/74 "},{"tags":["paragraph"],"text":" Data structures differ in "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Example Stack/Queue/PriorityQ Usage53/74 "},{"tags":["paragraph"],"text":" Starting from data containing one item, insert 3 "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... Example Stack/Queue/PriorityQ Usage54/74 "},{"tags":["paragraph"],"text":" Then insert 6 "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... Example Stack/Queue/PriorityQ Usage55/74 "},{"tags":["paragraph"],"text":" Then insert 2 "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... Example Stack/Queue/PriorityQ Usage56/74 "},{"tags":["paragraph"],"text":" Then remove item "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... Example Stack/Queue/PriorityQ Usage57/74 "},{"tags":["paragraph"],"text":" Then insert 4 "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... Example Stack/Queue/PriorityQ Usage58/74 "},{"tags":["paragraph"],"text":" Then remove item "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... Example Stack/Queue/PriorityQ Usage59/74 "},{"tags":["paragraph"],"text":" Then remove item "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Stack Data Structure60/74 "},{"tags":["paragraph"],"text":" Stack: Last-in, First-out (LIFO) protocol "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Example Stack Client61/74 "},{"tags":["paragraph"],"text":" A program to use a stack of int values "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Queue Data Structure62/74 "},{"tags":["paragraph"],"text":" Queue: First-in, First-out (FIFO) protocol "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Implementation covered in tute exercises. "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Priority Queue Data Structure63/74 "},{"tags":["paragraph"],"text":" Queue: Highest-priority-out protocol "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Implementation left as an exercise for the reader. "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Bit Manipulation "},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Bits in Bytes in Words65/74 "},{"tags":["paragraph"],"text":" Values that we normally treat as atomic can be viewed as bits, e.g. "},{"tags":["paragraph"],"text":" C provides a set of operators that act bit-by-bit on pairs of bytes. "},{"tags":["paragraph"],"text":" E.g. (10101010 & 11110000) yields 10100000 (bitwise AND) "},{"tags":["paragraph"],"text":" C bitwise operators: & | ^ ~ << >> "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Binary Constants66/74 "},{"tags":["paragraph"],"text":" C does not have a way of directly writing binary numbers "},{"tags":["paragraph"],"text":" Can write numbers in decimal, hexadecimal and octal. "},{"tags":["paragraph"],"text":" In hexadecimal, each digit represents 4 bits "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" In octal, each digit represents 3 bits "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Bitwise AND67/74 "},{"tags":["paragraph"],"text":" The & operator "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Used for e.g. checking whether a bit is set "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Bitwise OR68/74 "},{"tags":["paragraph"],"text":" The | operator "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Used for e.g. ensuring that a bit is set "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Flag-bits69/74 "},{"tags":["paragraph"],"text":" Consider file permissions in the Unix file system "},{"tags":["paragraph"],"text":" Each file has three sets of \"flags\" defining it permissions "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... Flag-bits70/74 "},{"tags":["paragraph"],"text":" One possible representation: "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Another possible representation: "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Compact representation: "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Last representation uses 1-bit per permission \"flag\" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Bitwise XOR71/74 "},{"tags":["paragraph"],"text":" The ^ operator "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Used in e.g. generating random numbers, building adder circuits "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Bitwise NEG72/74 "},{"tags":["paragraph"],"text":" The ~ operator "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Used for e.g. creating useful bit patterns "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Left Shift73/74 "},{"tags":["paragraph"],"text":" The << operator "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Right Shift74/74 "},{"tags":["paragraph"],"text":" The >> operator "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ** if signed quantity, sign bit replaces left-end bit "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Produced: 2 Apr 2018 "}]}