{"grouped":[{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Storage Management "}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Storage Management 2/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Disks 3/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Disks 4/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Disks 5/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Disks 6/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"SSDs 7/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... SSDs 8/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Operating Systems and Storage 9/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"File Systems "}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"File Systems 11/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Unix/Linux File System 12/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Unix/Linux File System 13/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Unix/Linux File System 14/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Unix/Linux File System 15/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Unix/Linux File System 16/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"File System Operations 17/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"open() / close() 18/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... open() / close() 19/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... open() / close() 20/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":" read() / write() 21/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... read() / write() 22/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... read() / write() 23/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... read() / write() 24/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... read() / write() 25/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":" seek() 26/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... seek() 27/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":" stat() 28/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Links 29/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Links 30/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Links 31/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Links 32/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Links 33/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Links 34/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"File System Summary 35/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Memory Management "}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Memory 37/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Processes 38/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Memory Management 39/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Memory Management 40/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Memory Management 41/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Memory Management 42/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Memory Management 43/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Memory Management 44/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Memory Management 45/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Memory Management 46/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Memory Management 47/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Memory Management 48/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Memory Management 49/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Memory Management 50/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Memory Management Review 51/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Address Mapping 52/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Address Mapping 53/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Virtual Memory 54/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Virtual Memory 55/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Virtual Memory 56/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Virtual Memory 57/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Virtual Memory 58/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"An Aside: Working Sets 59/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... An Aside: Working Sets 60/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Virtual Memory 61/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Virtual Memory 62/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Virtual Memory 63/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Virtual Memory 64/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Page Faults 65/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Page Faults 66/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Page Replacement 67/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Page Replacement 68/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Page Replacement 69/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Page Replacement 70/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Virtual Memory 71/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Virtual Memory 72/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Virtual Memory 73/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Cache Memory 74/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Cache Memory 75/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Memory Management Hardware 76/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Memory Management Hardware 77/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Process Management "}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Processes 79/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Processes 80/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Processes 81/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Process Management 82/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Process Management 83/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Unix/Linux Processes 84/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Unix/Linux Processes 85/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Unix/Linux Processes 86/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Unix/Linux Processes 87/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Process-related System Calls 88/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Process-related System Calls 89/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Process-related System Calls 90/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Process-related System Calls 91/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Process-related System Calls 92/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Process-related System Calls 93/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Process-related System Calls 94/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Process-related System Calls 95/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Process-related System Calls 96/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Process-related System Calls 97/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Process-related System Calls 98/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Process-related System Calls 99/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Process-related System Calls 100/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Process-related System Calls 101/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Process-related System Calls 102/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Process-related System Calls 103/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Process-related System Calls 104/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Process Control Flow 105/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Process Control Flow 106/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Process Control Flow 107/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Process Control Flow 108/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Signals 109/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Signals 110/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Signals 111/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Signal Handlers 112/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Signal Handlers 113/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Signal Handlers 114/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Signal Handlers 115/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Signal Handlers 116/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Signal Handlers 117/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Interrupts 118/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Interrupts 119/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Interrupts 120/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Exceptions 121/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Exceptions 122/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Multi-tasking 123/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Process States 124/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Scheduling 125/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Scheduling 126/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Scheduling 127/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Device Management "}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Device Management 129/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"I/O Devices 130/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... I/O Devices 131/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... I/O Devices 132/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... I/O Devices 133/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... I/O Devices 134/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Device Drivers 135/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Memory-mapped I/O 136/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Memory-mapped I/O 137/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Devices on Unix/Linux 138/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Devices on Unix/Linux 139/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Devices on Unix/Linux 140/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Devices on Unix/Linux 141/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"Buffered I/O 142/143"}]},{"tags":[{"name":"table"}],"items":[{"tags":[],"text":"... Buffered I/O 143/143"}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" magnetic medium, arranged in concentric tracks "},{"tags":[],"text":" usually multiple surfaces for storing data "},{"tags":[],"text":" rotates at very high speed (e.g. 7200rpm) "},{"tags":[],"text":" each track divided into fixed size sectors outer tracks have more sectors than inner tracks "},{"tags":[],"text":" outer tracks have more sectors than inner tracks "},{"tags":[],"text":" read/write head which can read/write one sector at-a-time "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" outer tracks have more sectors than inner tracks "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" head moves to track (mechanical motion) "},{"tags":[],"text":" head waits for sector to rotate under head (mechanical) "},{"tags":[],"text":" read/write data from/to disk surface (electronic) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" seek time (move to track) in range 0ms .. 12ms "},{"tags":[],"text":" rotational latency (wait for sector) in range 2ms .. 4ms "},{"tags":[],"text":" data transfer ... typically 200 MB/s (relatively small) "},{"tags":[],"text":" Overall: tens of milliseconds for a single access "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" capacity ... 4TB ... available storage 3.5TB "},{"tags":[],"text":" size ... 2.5/3cm, volume ... 34cm3, weight ... 60g "},{"tags":[],"text":" speed ... ~20ms to find sector, < 1ms to read sector "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" capacity ... 3MB ... available storage 2.5MB "},{"tags":[],"text":" size ... 1.5m, volume ... 2m3, weight ... 900kg "},{"tags":[],"text":" speed ... ~600ms to find sector, 5ms to read sector "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" all data transfers read/write fixed number of bytes "},{"tags":[],"text":" even if only one byte is required "},{"tags":[],"text":" typical transfer size 512 bytes .. 4096 bytes "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" each block comprised of one or more sectors "},{"tags":[],"text":" sectors for block arranged to minimse head movement/latency "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" don't have mechanical delays that HDDs do (R/W much faster) "},{"tags":[],"text":" better thermal performance that HDDs (e.g. no fans needed) "},{"tags":[],"text":" controller more complex/spohisticated than HDD controller "},{"tags":[],"text":" relatively expensive per byte of storage (compared to HDDs) "},{"tags":[],"text":" limited number of read/writes on each block before failure "},{"tags":[],"text":" data \"leaks\" over time (over years ... but worse than HDDs) "},{"tags":[],"text":" writing requires erase-then-overwrite "},{"tags":[],"text":" susceptible to elector-magnetic fluctations (e.g. power-outs) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" block-oriented devices but much faster than HDDs (e.g. 0.1ms) "},{"tags":[],"text":" but limited number (105) of erases on each block before failure "},{"tags":[],"text":" easier to access logical blocks (access to multiple SSD blocks) "},{"tags":[],"text":" less fragmentation problems than HDDs "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" drop-in, high-speed replacement for HDD "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" provides an abstract view of devices "},{"tags":[],"text":" hiding details of device control and data transfer "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" typically on a disk device (or, nowadays, on SSD) "},{"tags":[],"text":" allocating chunks of space on the device to files where a file is viewed as a sequence of bytes "},{"tags":[],"text":" where a file is viewed as a sequence of bytes "},{"tags":[],"text":" allowing access to files by name and with access rights "},{"tags":[],"text":" arranging access to files via directories (folders) "},{"tags":[],"text":" maintaining information about files/directories (meta-data) "},{"tags":[],"text":" dealing with damage on the storage device (\"bad blocks\") "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" where a file is viewed as a sequence of bytes "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" current working directory (CWD) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" files, directories (folders), devices, processes, sockets, ... "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" absolute (full path from root) e.g. /usr/include/stdio.h, /home/jas/cs1521/ "},{"tags":[],"text":" relative (path starts from CWD) e.g. ../../another/path/prog.c, ./a.out, a.out "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" off_t ... offsets within files typically, long and signed to allow backward refs "},{"tags":[],"text":" typically, long and signed to allow backward refs "},{"tags":[],"text":" size_t ... number of bytes in some object unsigned, since objects can't have negative size "},{"tags":[],"text":" unsigned, since objects can't have negative size "},{"tags":[],"text":" ssize_t ... sizes of read/written blocks like size_t, but signed to allow for error values "},{"tags":[],"text":" like size_t, but signed to allow for error values "},{"tags":[],"text":" struct stat ... file system object metadata stores information about file, but stores no content requires ino_t, dev_t, time_t, uid_t, ... "},{"tags":[],"text":" stores information about file, but stores no content "},{"tags":[],"text":" requires ino_t, dev_t, time_t, uid_t, ... "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" typically, long and signed to allow backward refs "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" unsigned, since objects can't have negative size "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" like size_t, but signed to allow for error values "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" stores information about file, but stores no content "},{"tags":[],"text":" requires ino_t, dev_t, time_t, uid_t, ... "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" physical location on storage device of file data "},{"tags":[],"text":" file type (regular file, directory, ...), file size (bytes/blocks) "},{"tags":[],"text":" ownership, access permissions, timestamps (create/access/update) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" where a directory is effectively a list of (name,inode) pairs "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" open directory and scan for name "},{"tags":[],"text":" if not found, \"No such file or directory\" "},{"tags":[],"text":" if found as (name,ino), access inode table inodes[ino] "},{"tags":[],"text":" collect file metadata and ... check file access permissions given current user/group if don't have required access, \"Permission denied\" collect information about file's location and size update access timestamp "},{"tags":[],"text":" check file access permissions given current user/group if don't have required access, \"Permission denied\" "},{"tags":[],"text":" if don't have required access, \"Permission denied\" "},{"tags":[],"text":" collect information about file's location and size "},{"tags":[],"text":" update access timestamp "},{"tags":[],"text":" use physical location to access device and read/write file's data "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" check file access permissions given current user/group if don't have required access, \"Permission denied\" "},{"tags":[],"text":" if don't have required access, \"Permission denied\" "},{"tags":[],"text":" collect information about file's location and size "},{"tags":[],"text":" update access timestamp "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" if don't have required access, \"Permission denied\" "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" functions/syscalls manipulate objects as a stream of bytes "},{"tags":[],"text":" accessed via a file descriptor (index into a system table) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" open() ... open a file system object, returning a file descriptor "},{"tags":[],"text":" close() ... stop using a file descriptor "},{"tags":[],"text":" read() ... read some bytes into a buffer from a file descriptor "},{"tags":[],"text":" write() ... write some bytes from a buffer to a file descriptor "},{"tags":[],"text":" lseek() ... move to a specified offset within a file "},{"tags":[],"text":" stat() ... get meta-data about a file system object "},{"tags":[],"text":" mount() ... place a filesystem on a device "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" attempt to open an object at Path, according to Flags "},{"tags":[],"text":" flags (defined in <fcntl.h>) O_RDONLY ... open object for reading O_WRONLY ... open object for writing O_APPEND ... open object for writing at end O_RDWR ... open object for reading and writing O_CREAT ... create object if doesn't exist "},{"tags":[],"text":" O_RDONLY ... open object for reading "},{"tags":[],"text":" O_WRONLY ... open object for writing "},{"tags":[],"text":" O_APPEND ... open object for writing at end "},{"tags":[],"text":" O_RDWR ... open object for reading and writing "},{"tags":[],"text":" O_CREAT ... create object if doesn't exist "},{"tags":[],"text":" flags can be combined e.g. (O_WRONLY|O_CREAT) "},{"tags":[],"text":" if successful, return file descriptor (small +ve int) "},{"tags":[],"text":" if unsuccessful, return -1 and set errno "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" O_RDONLY ... open object for reading "},{"tags":[],"text":" O_WRONLY ... open object for writing "},{"tags":[],"text":" O_APPEND ... open object for writing at end "},{"tags":[],"text":" O_RDWR ... open object for reading and writing "},{"tags":[],"text":" O_CREAT ... create object if doesn't exist "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" attempt to release an open file descriptor "},{"tags":[],"text":" if this is the last reference to object, release its resources "},{"tags":[],"text":" if successful, return 0 "},{"tags":[],"text":" if unsuccessful, return -1 and set errno "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" removes the object's entry from a directory "},{"tags":[],"text":" but the inode and data persist until all processes accessing the object close() their handle all references to the inode from other directories are removed "},{"tags":[],"text":" all processes accessing the object close() their handle "},{"tags":[],"text":" all references to the inode from other directories are removed "},{"tags":[],"text":" after this, the inode and the blocks on storage device are recycled "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" all processes accessing the object close() their handle "},{"tags":[],"text":" all references to the inode from other directories are removed "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" attempt to read Count bytes from FileDesc into Buffer "},{"tags":[],"text":" if \"successful\", return number of bytes actually read (NRead) "},{"tags":[],"text":" if currently positioned at end of file, return 0 "},{"tags":[],"text":" if unsuccessful, return -1 and set errno "},{"tags":[],"text":" does not check whether Buffer contains enough space "},{"tags":[],"text":" advances the file offset by NRead "},{"tags":[],"text":" does not treat '\\n' as special "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" the \"current position\" in the file is maintained as part of the fd entry "},{"tags":[],"text":" the \"current position\" is modified by read(), write() and lseek() "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" attempt to write Count bytes from Buffer onto FileDesc "},{"tags":[],"text":" if \"successful\", return number of bytes actually written (NWritten) "},{"tags":[],"text":" if unsuccessful, return -1 and set errno "},{"tags":[],"text":" does not check whether Buffer has Count bytes of data "},{"tags":[],"text":" advances the file offset by NWritten bytes "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" bytes can be interpreted as char, int, struct, etc "},{"tags":[],"text":" so, many kinds of objects can be read() or write() ** "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" list of double values read from sensor device "},{"tags":[],"text":" collection of Student records "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" because they refer to memory addresses within a process instance "},{"tags":[],"text":" and a different process instance might already have used those addresses "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" either, write()ing chunks of bytes from struct objects "},{"tags":[],"text":" or, printing formatted text representation of struct data "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" no need to worry about formatting issues "},{"tags":[],"text":" writes entire structure, even if string buffers half empty "},{"tags":[],"text":" can lseek() to ith struct via i*sizeof(StructType) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" produces files that are human-readable "},{"tags":[],"text":" only uses as many bytes as required from string buffers "},{"tags":[],"text":" can access structures only sequentially (unless using padding) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" set the \"current position\" of the FileDesc "},{"tags":[],"text":" Offset is in units of bytes, and can be negative "},{"tags":[],"text":" Whence can be one of ... SEEK_SET ... set file position to Offset from start of file SEEK_CUR ... set file position to Offset from current position SEEK_END ... set file position to Offset from end of file "},{"tags":[],"text":" SEEK_SET ... set file position to Offset from start of file "},{"tags":[],"text":" SEEK_CUR ... set file position to Offset from current position "},{"tags":[],"text":" SEEK_END ... set file position to Offset from end of file "},{"tags":[],"text":" seeking beyond end of file leaves a gap which reads as 0's "},{"tags":[],"text":" seeking back beyond start of file sets position to start of file "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" SEEK_SET ... set file position to Offset from start of file "},{"tags":[],"text":" SEEK_CUR ... set file position to Offset from current position "},{"tags":[],"text":" SEEK_END ... set file position to Offset from end of file "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" stores meta-data associated with FileName into StatBuf "},{"tags":[],"text":" information includes inode number, file type + access mode, owner, group size in bytes, storage block size, allocated blocks time of last access/modification/status-change "},{"tags":[],"text":" inode number, file type + access mode, owner, group "},{"tags":[],"text":" size in bytes, storage block size, allocated blocks "},{"tags":[],"text":" time of last access/modification/status-change "},{"tags":[],"text":" returns -1 and sets errno if meta-data not accessible "},{"tags":[],"text":" if FileName is a symbolic link, returns info on referenced file "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" inode number, file type + access mode, owner, group "},{"tags":[],"text":" size in bytes, storage block size, allocated blocks "},{"tags":[],"text":" time of last access/modification/status-change "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" same as stat() but gets data via an open file descriptor "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" same as stat() but doesn't follow symbolic links "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" multiple directory entries referencing the same inode "},{"tags":[],"text":" the two entries must be on the same filesystem "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" a file containing the path name of another file "},{"tags":[],"text":" opening the symlink opens the file being referenced "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" create a new directory called PathName with mode Mode "},{"tags":[],"text":" if PathName is e.g. a/b/c/d all of the directories a, b and c must exist directory c must be writeable to the caller directory d must not already exist "},{"tags":[],"text":" all of the directories a, b and c must exist "},{"tags":[],"text":" directory c must be writeable to the caller "},{"tags":[],"text":" directory d must not already exist "},{"tags":[],"text":" the new directory contains two initial entries . is a reference to itself .. is a reference to its parent directory "},{"tags":[],"text":" . is a reference to itself "},{"tags":[],"text":" .. is a reference to its parent directory "},{"tags":[],"text":" returns 0 if successful, returns -1 and sets errno otherwise "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" all of the directories a, b and c must exist "},{"tags":[],"text":" directory c must be writeable to the caller "},{"tags":[],"text":" directory d must not already exist "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" . is a reference to itself "},{"tags":[],"text":" .. is a reference to its parent directory "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" ensure that data associated with FileDesc is written to storage "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" data \"written\" to a file is initially stored in memory buffers "},{"tags":[],"text":" eventually, it makes its way onto permanent storage device "},{"tags":[],"text":" fsync() forces this to happen now "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" fsync() is normally called just once at process exit "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" file systems normally exist on permanent storage devices "},{"tags":[],"text":" mount attaches a file system to a specific location in the file hierarchy "},{"tags":[],"text":" Source is often a storage device (e.g. /dev/disk) "},{"tags":[],"text":" Source contains a file system (inode table, data chunks) "},{"tags":[],"text":" Target (aka mount point) is a path in the file hierarchy "},{"tags":[],"text":" FileSysType specifies a particular layout/drivers "},{"tags":[],"text":" Flags specify various properties of the filesys (e.g. read-only) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" as an abstraction over physical storage devices (e.g. disks) "},{"tags":[],"text":" providing named access to chunks of related data (files) "},{"tags":[],"text":" providing access (sequential/random) to the contents of files "},{"tags":[],"text":" allowing files to be arranged in a hierarchy of directories "},{"tags":[],"text":" providing control over access to files and directories "},{"tags":[],"text":" managing other meta-data associated with files (size, location, ...) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" memory, processes, processor time, i/o devices, networking, ... "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" RAM: code (read-only), data (read/write) "},{"tags":[],"text":" Registers: program counter (PC) and other registers "},{"tags":[],"text":" other management info, discussed later "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" typically not all loaded in RAM at once "},{"tags":[],"text":" processes can be suspended (waiting) "},{"tags":[],"text":" restoring a process: load code, data, registers "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" the process can use the entire memory "},{"tags":[],"text":" addresses within process code are absolute "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" addreses in proc1 are absolute "},{"tags":[],"text":" all addresses in proc2 need to be interpreted relative to p1size "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" copy code+data to memory, starting at address 0 "},{"tags":[],"text":" set stack pointer to p1size-4 "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" \"fix\" them when process code+data is loaded replace each address in code by addr+p1size "},{"tags":[],"text":" replace each address in code by addr+p1size "},{"tags":[],"text":" \"map\" addresses during execution after a memory address is computed in machine code incremement it by p1size before accessing memory requires extra hardware (holding proc2's start address) "},{"tags":[],"text":" after a memory address is computed in machine code "},{"tags":[],"text":" incremement it by p1size before accessing memory "},{"tags":[],"text":" requires extra hardware (holding proc2's start address) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" replace each address in code by addr+p1size "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" after a memory address is computed in machine code "},{"tags":[],"text":" incremement it by p1size before accessing memory "},{"tags":[],"text":" requires extra hardware (holding proc2's start address) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" remember base address for each process (process table) "},{"tags":[],"text":" when process (re)starts, load base into mapping hardware "},{"tags":[],"text":" interpret every address addr in program as base+addr "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" process can be loaded anywhere in memory without change "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" each chunk of process address space has its own base "},{"tags":[],"text":" each chunk of process address space has its own size "},{"tags":[],"text":" each chunk of process address space has its own memory location "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" call each chunk of address space a page "},{"tags":[],"text":" all pages are the same size P (PageSize ) "},{"tags":[],"text":" process memory is spread across ⌈ProcSize/P ⌉ pages "},{"tags":[],"text":" page i has addresses A in range i*P ≤ A < (i+1)*P "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" each process has an array of page entries "},{"tags":[],"text":" each page entry contains start address of one chunk "},{"tags":[],"text":" can compute index of relevant page entry by (A / P ) "},{"tags":[],"text":" can compute offset within page by (A % P ) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" process has (virtual) address space 0..N-1 bytes "},{"tags":[],"text":" memory has (physical) address space 0..M-1 bytes "},{"tags":[],"text":" both address spaces partitioned in P byte pages "},{"tags":[],"text":" process address space contains K = ⌈N/P⌉ pages "},{"tags":[],"text":" memory address space has L = ⌈M/P⌉ frames "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" takes address (Vaddr) in process address space "},{"tags":[],"text":" returns address (Paddr) in memory address space "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" to save space, just store frame number F "},{"tags":[],"text":" compute physical address via (P * F + Offset) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" don't need to load all of process's pages up-front "},{"tags":[],"text":" start with a small memory \"footprint\" (e.g. main + stack top) "},{"tags":[],"text":" load new process address pages into memory as needed "},{"tags":[],"text":" grow up to the size of the (available) physical memory "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" dividing process memory space into fixed-size pages "},{"tags":[],"text":" on-demand loading of process pages into physical memory "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" each page table entry (PTE) contains page status ... Loaded, IsModified, NotLoaded frame number of page (if Loaded) ... maybe others ... (e.g. last accessed time) "},{"tags":[],"text":" page status ... Loaded, IsModified, NotLoaded "},{"tags":[],"text":" frame number of page (if Loaded) "},{"tags":[],"text":" ... maybe others ... (e.g. last accessed time) "},{"tags":[],"text":" we need ⌈ProcSize /PageSize⌉ entries in this table "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" page status ... Loaded, IsModified, NotLoaded "},{"tags":[],"text":" frame number of page (if Loaded) "},{"tags":[],"text":" ... maybe others ... (e.g. last accessed time) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" initially has zero pages loaded "},{"tags":[],"text":" load page containing code for main() "},{"tags":[],"text":" load page for main()'s stack frame "},{"tags":[],"text":" load other pages when process references address within page "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" in any given window of time, a process is likely to access only a small subset of its pages "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" if each process has a relatively small working set, can hold pages for many active processes in memory at same time "},{"tags":[],"text":" if only need to hold some of process's pages in memory, process address space can be larger than physical memory "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" code is loaded from the executable file stored on disk "},{"tags":[],"text":" global data is also initially loaded from here "},{"tags":[],"text":" dynamic (heap, stack) data is created in memory "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" may need to be removed temporarily from memory (see later) "},{"tags":[],"text":" thus would also be saved on disk and restored from disk "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" exists on disk for the duration of the process's execution "},{"tags":[],"text":" and only some parts of it are in memory at any given time "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" need to ensure minimal reading from / writing to disk "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" find a free (unused) page frame in memory and use that "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" suspend the requesting process until a page is freed "},{"tags":[],"text":" replace one of the currently loaded/used pages "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" maintain a (priority) queue of processes waiting for pages "},{"tags":[],"text":" dequeue and schedule the first process on queue when page freed "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" if it's been modified since loading, save to disk ** (in the disk-based virtual memory space of the running process) "},{"tags":[],"text":" grab its frame number and give it to the requestor "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" define a \"usefulness\" measure for each frame "},{"tags":[],"text":" grab the frame with lowest usefulness (e.g. priority queue?) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" best page is one that won't be used again by its process "},{"tags":[],"text":" prefer pages that are read-only (no need to write to disk) "},{"tags":[],"text":" prefer pages that are unmodified (no need to write to disk) "},{"tags":[],"text":" prefer pages that are used by only one process (see later) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" a page not used recently may not be needed again soon "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" we replace a page which is soon used again "},{"tags":[],"text":" this causes us to replace another page "},{"tags":[],"text":" and the second page is soon used again ...... "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" recently used page is likely to be used again soon "},{"tags":[],"text":" not recently used page is unlikely to be used again soon "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" page frames are entered into a queue when loaded "},{"tags":[],"text":" page replacement uses the frame from the front of the queue "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" uses a reference bit for each frame, updated when page is used "},{"tags":[],"text":" maintains a circular list of allocated frames "},{"tags":[],"text":" uses a \"clock hand\" which iterates over page frame list skipping and resetting reference bit in all referenced pages "},{"tags":[],"text":" skipping and resetting reference bit in all referenced pages "},{"tags":[],"text":" page replacement uses first-found unreferenced frame "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" skipping and resetting reference bit in all referenced pages "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" a virtual address space with K pages needs K PT entries "},{"tags":[],"text":" since K may be large, do not want to store whole PT "},{"tags":[],"text":" especially since working set tells us n ≪ K needed at once "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" several processes include same frame in virtual address space "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" holds parts of RAM that are (hopefully) heavily used "},{"tags":[],"text":" transfers data to/from RAM in blocks (cache blocks) "},{"tags":[],"text":" memory reference hardware first looks in cache if required address is there, use its contents if not, get it from RAM and put in cache possibly replacing an existing cache block "},{"tags":[],"text":" if required address is there, use its contents "},{"tags":[],"text":" if not, get it from RAM and put in cache "},{"tags":[],"text":" possibly replacing an existing cache block "},{"tags":[],"text":" replacement strategies have similar issues to virtual memory "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" if required address is there, use its contents "},{"tags":[],"text":" if not, get it from RAM and put in cache "},{"tags":[],"text":" possibly replacing an existing cache block "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" provide specialised hardware (MMU) to do it efficiently "},{"tags":[],"text":" sometimes located on CPU chip, sometimes separate "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" lookup table containing (virtual,physical) address pairs "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" multi-tasking provided by all modern operating systems "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" control-flow independence each process executes as if the only process running on the machine "},{"tags":[],"text":" each process executes as if the only process running on the machine "},{"tags":[],"text":" private address space each process has its own address space (M bytes, addressed 0..M-1) "},{"tags":[],"text":" each process has its own address space (M bytes, addressed 0..M-1) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" each process executes as if the only process running on the machine "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" each process has its own address space (M bytes, addressed 0..M-1) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" each process uses the CPU until pre-empted or exits "},{"tags":[],"text":" then another process uses the CPU until it too is pre-empted "},{"tags":[],"text":" eventually, the first process will get another run on the CPU "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" it runs \"long enough\" and the OS replaces it by a waiting process "},{"tags":[],"text":" it attempts to perform a long-duration task, like i/o "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" the process's entire dynamic state must be saved (incl PC) "},{"tags":[],"text":" the process is flagged as temporarily suspended "},{"tags":[],"text":" it is placed on a process (priority) queue for re-start "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" static information: program code and data "},{"tags":[],"text":" dynamic state: heap, stack, registers, program counter "},{"tags":[],"text":" OS-supplied state: environment variables, stdin, stdout "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" save context for one process "},{"tags":[],"text":" restore context for another process "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" identifier: unique process ID "},{"tags":[],"text":" status: running, ready, suspended, dead "},{"tags":[],"text":" state: registers (including PC) "},{"tags":[],"text":" privileges: owner, group "},{"tags":[],"text":" if suspended, event being waited for "},{"tags":[],"text":" memory management info: (reference to) page table "},{"tags":[],"text":" accounting: CPU time used, amount of I/O done "},{"tags":[],"text":" I/O: open file descriptors "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" sh ... for creating processes via object-file name "},{"tags":[],"text":" ps, w, top ... show process information "},{"tags":[],"text":" kill ... send a signal to a process "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" fork() ... create a new child process (copy of current process) "},{"tags":[],"text":" execve() ... convert one process into another "},{"tags":[],"text":" wait() ... wait for state change in child process "},{"tags":[],"text":" kill() ... send a signal to a process "},{"tags":[],"text":" _exit() ... terminate an executing process (after clean up) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" pid ...process id, unique among current processes "},{"tags":[],"text":" ruid, euid ... real and effective user id "},{"tags":[],"text":" rgid, egid ... real and effective group id "},{"tags":[],"text":" current working directory "},{"tags":[],"text":" accumulated execution time (user/kernel) "},{"tags":[],"text":" user file descriptor table "},{"tags":[],"text":" information on how to react to signals "},{"tags":[],"text":" pointer to process page table "},{"tags":[],"text":" process state ... running, suspended, asleep, etc. "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" memory-resident since very heavily used "},{"tags":[],"text":" contains info as described above for PCB "},{"tags":[],"text":" content of PCB entry critical for scheduler "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" holds info not needed when process swapped out "},{"tags":[],"text":" e.g. execution state (registers, signal handlers, file descriptors, ...) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" requires #include <unistd.h> "},{"tags":[],"text":" creates new process by duplicating the calling process "},{"tags":[],"text":" new process is the child, calling process is the parent "},{"tags":[],"text":" child has a different process ID (pid) to the parent "},{"tags":[],"text":" in the child, fork() returns 0 "},{"tags":[],"text":" in the parent, fork() returns the pid of the child "},{"tags":[],"text":" if the system call fails, fork() returns -1 "},{"tags":[],"text":" child inherits copies of parent's address space and open fd's "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" a +ve integer, unique among currently executing processes "},{"tags":[],"text":" with type pid_t (defined in <unistd.h>) "},{"tags":[],"text":" process 0 is the scheduler (part of kernel) "},{"tags":[],"text":" process 1 is init (for starting/stopping the system) "},{"tags":[],"text":" low-numbered processes are typically system-related "},{"tags":[],"text":" regular processes have PID in the range 300 .. MaxPid (e.g. 216) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" each group is associated with a unique PGID "},{"tags":[],"text":" groups allow distribution of signals to a set of related processes "},{"tags":[],"text":" one important application: job control (control-Z) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" requires #include <sys/types.h> "},{"tags":[],"text":" returns the process ID of the current process "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" requires #include <sys/types.h> "},{"tags":[],"text":" returns the parent process ID of the current process "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" a signal can be sent to all processes in a process group "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" returns the process group ID of specified process "},{"tags":[],"text":" if pid is zero, use get PGID of current process "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" set the process group ID of specified process "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" pause current process until process pid changes state where state changes include finishing, stopping, re-starting, ... "},{"tags":[],"text":" where state changes include finishing, stopping, re-starting, ... "},{"tags":[],"text":" ensures that child resources are released on exit "},{"tags":[],"text":" special values for pid ... if pid = -1, wait on any child process if pid = 0, wait on any child in process group if pid > 0, wait on the specified process "},{"tags":[],"text":" if pid = -1, wait on any child process "},{"tags":[],"text":" if pid = 0, wait on any child in process group "},{"tags":[],"text":" if pid > 0, wait on the specified process "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" where state changes include finishing, stopping, re-starting, ... "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" if pid = -1, wait on any child process "},{"tags":[],"text":" if pid = 0, wait on any child in process group "},{"tags":[],"text":" if pid > 0, wait on the specified process "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" equivalent to waitpid(-1, &status, 0) "},{"tags":[],"text":" pauses until one of the child processes terminates "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" status is set to hold info about pid e.g. exit status if pid terminated macros allow precise determination of state change (e.g. WIFEXITED(status), WCOREDUMP(status)) "},{"tags":[],"text":" e.g. exit status if pid terminated "},{"tags":[],"text":" macros allow precise determination of state change (e.g. WIFEXITED(status), WCOREDUMP(status)) "},{"tags":[],"text":" options provide variations in waitpid() behaviour default: wait for child process to terminate WNOHANG: return immediately if no child has exited WCONTINUED: return if a stopped child has been restarted "},{"tags":[],"text":" default: wait for child process to terminate "},{"tags":[],"text":" WNOHANG: return immediately if no child has exited "},{"tags":[],"text":" WCONTINUED: return if a stopped child has been restarted "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" e.g. exit status if pid terminated "},{"tags":[],"text":" macros allow precise determination of state change (e.g. WIFEXITED(status), WCOREDUMP(status)) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" default: wait for child process to terminate "},{"tags":[],"text":" WNOHANG: return immediately if no child has exited "},{"tags":[],"text":" WCONTINUED: return if a stopped child has been restarted "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" requires #include <signal.h> "},{"tags":[],"text":" send signal SigID to process ProcID "},{"tags":[],"text":" various signals (POSIX) e.g. SIGHUP ... hangup detected on controlling terminal/process SIGINT ... interrupt from keyboard (control-C) SIGKILL ... kill signal (e.g. kill -9) SIGILL ... illegal instruction SIGFPE ... floating point exception (e.g. divide by zero) SIGSEGV ... invalid memory reference SIGPIPE ... broken pipe (no processes reading from pipe) "},{"tags":[],"text":" SIGHUP ... hangup detected on controlling terminal/process "},{"tags":[],"text":" SIGINT ... interrupt from keyboard (control-C) "},{"tags":[],"text":" SIGKILL ... kill signal (e.g. kill -9) "},{"tags":[],"text":" SIGILL ... illegal instruction "},{"tags":[],"text":" SIGFPE ... floating point exception (e.g. divide by zero) "},{"tags":[],"text":" SIGSEGV ... invalid memory reference "},{"tags":[],"text":" SIGPIPE ... broken pipe (no processes reading from pipe) "},{"tags":[],"text":" if successful, return 0; on error, return -1 and set errno "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" SIGHUP ... hangup detected on controlling terminal/process "},{"tags":[],"text":" SIGINT ... interrupt from keyboard (control-C) "},{"tags":[],"text":" SIGKILL ... kill signal (e.g. kill -9) "},{"tags":[],"text":" SIGILL ... illegal instruction "},{"tags":[],"text":" SIGFPE ... floating point exception (e.g. divide by zero) "},{"tags":[],"text":" SIGSEGV ... invalid memory reference "},{"tags":[],"text":" SIGPIPE ... broken pipe (no processes reading from pipe) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" terminates current process "},{"tags":[],"text":" closes any open file descriptors "},{"tags":[],"text":" a SIGCHLD signal is sent to parent "},{"tags":[],"text":" returns status to parent (via wait()) "},{"tags":[],"text":" any child processes are inherited by scheduler (pid=1) "},{"tags":[],"text":" termination may be delayed waiting for i/o to complete "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" terminates current process "},{"tags":[],"text":" triggers any functions registered as on_exit() "},{"tags":[],"text":" flushes stdio buffers; closes open FILE *'s "},{"tags":[],"text":" then behaves like _exit() "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" generates SIGABRT signal (normally terminates process) "},{"tags":[],"text":" closes and flushes stdio streams "},{"tags":[],"text":" used by the assert() macro "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" all processes become zombie until SIGCHLD handled "},{"tags":[],"text":" parent may be delayed e.g. slow i/o, but usually resolves quickly "},{"tags":[],"text":" bug in parent that ignores SIGCHLD creates long-term zombies "},{"tags":[],"text":" note that zombies occupy a slot in the process table "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" when parent exits, orphan is assigned pid=1 as its parent "},{"tags":[],"text":" pid=1 always handles SIGCHLD when process exits "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" replaces current process by executing Path object Path must be an executable, binary or script (starting with #!) "},{"tags":[],"text":" Path must be an executable, binary or script (starting with #!) "},{"tags":[],"text":" passes arrays of strings to new process both arrays terminated by a NULL pointer element envp[] contains strings of the form key=value "},{"tags":[],"text":" both arrays terminated by a NULL pointer element "},{"tags":[],"text":" envp[] contains strings of the form key=value "},{"tags":[],"text":" much of the state of the original process is lost, e.g. new virtual address space is created, signal handlers reset, ... "},{"tags":[],"text":" new virtual address space is created, signal handlers reset, ... "},{"tags":[],"text":" new process inherits open file descriptors from original process "},{"tags":[],"text":" on error, returns -1 and sets errno "},{"tags":[],"text":" if successful, does not return "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" Path must be an executable, binary or script (starting with #!) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" both arrays terminated by a NULL pointer element "},{"tags":[],"text":" envp[] contains strings of the form key=value "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" new virtual address space is created, signal handlers reset, ... "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" fetch instruction from memory[PC]; PC++ "},{"tags":[],"text":" decode and execute instruction if jump-type instruction, PC = new address if regular instruction, carry out operation "},{"tags":[],"text":" if jump-type instruction, PC = new address "},{"tags":[],"text":" if regular instruction, carry out operation "},{"tags":[],"text":" repeat above "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" if jump-type instruction, PC = new address "},{"tags":[],"text":" if regular instruction, carry out operation "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" \"unexpected\" conditions occuring during program execution "},{"tags":[],"text":" which require some form of immediate action (maybe just quit) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" exceptions ... from conditions within an executing program often, fatal to continued execution of program "},{"tags":[],"text":" often, fatal to continued execution of program "},{"tags":[],"text":" interrupts ... from events external to the program often, require some action and then execution can continue "},{"tags":[],"text":" often, require some action and then execution can continue "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" often, fatal to continued execution of program "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" often, require some action and then execution can continue "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" process makes system call (e.g. fork()) "},{"tags":[],"text":" generates an exception which transfers control to system call handler (in privileged mode) carries out system-level operations (e.g. modify process table) then returns control to the process (in user mode) "},{"tags":[],"text":" transfers control to system call handler (in privileged mode) "},{"tags":[],"text":" carries out system-level operations (e.g. modify process table) "},{"tags":[],"text":" then returns control to the process (in user mode) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" transfers control to system call handler (in privileged mode) "},{"tags":[],"text":" carries out system-level operations (e.g. modify process table) "},{"tags":[],"text":" then returns control to the process (in user mode) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" from another process via kill() "},{"tags":[],"text":" from the operating system (e.g. timer) "},{"tags":[],"text":" from within the process (e.g. system call) "},{"tags":[],"text":" from a fault in the process (e.g. div-by-zero) "},{"tags":[],"text":" from a device (e.g. disk read completes) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" using the signal() library function (simple) "},{"tags":[],"text":" using the sigaction() system call (powerful) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" SIGILL ... illegal instruction (Term by default) "},{"tags":[],"text":" SIGABRT ... generated by abort() (Core by default) "},{"tags":[],"text":" SIGFPE ... floating point exception (Core by default) "},{"tags":[],"text":" SIGSEGV ... invalid memory reference (Core by default) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" SIGINT ... interrupt from keyboard (Term by default) "},{"tags":[],"text":" SIGPIPE ... broken pipe (Term by default) "},{"tags":[],"text":" SIGCHLD ... child process stopped or died (Ignored by default) "},{"tags":[],"text":" SIGTSTP ... stop typed at tty (control-Z) (Stop by default) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" Term ... terminate the process "},{"tags":[],"text":" Core ... terminate the process, dump core "},{"tags":[],"text":" Stop ... stop the process "},{"tags":[],"text":" Cont ... continue the process if currently stopped "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" knows which signal it was invoked by "},{"tags":[],"text":" needs to ensure that invoking signal (at least) is blocked "},{"tags":[],"text":" carries out appropriate action; may return "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" define how to handle a particular signal "},{"tags":[],"text":" requires <signal.h> (library function, not syscall) "},{"tags":[],"text":" SigID is one of the OS-defined signals e.g. SIGHUP, SIGCHLD, SIGSEGV, ... but not SIGKILL, SIGSTOP "},{"tags":[],"text":" e.g. SIGHUP, SIGCHLD, SIGSEGV, ... but not SIGKILL, SIGSTOP "},{"tags":[],"text":" Handler can be one of ... SIG_IGN ... ignore signals of type SigID SIG_DFL ... use default handler for SigID a user-defined function to handle SigID signals "},{"tags":[],"text":" SIG_IGN ... ignore signals of type SigID "},{"tags":[],"text":" SIG_DFL ... use default handler for SigID "},{"tags":[],"text":" a user-defined function to handle SigID signals "},{"tags":[],"text":" note: typedef void (*SigHnd)(int); "},{"tags":[],"text":" returns previous value of signal handler, or SIG_ERR "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" e.g. SIGHUP, SIGCHLD, SIGSEGV, ... but not SIGKILL, SIGSTOP "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" SIG_IGN ... ignore signals of type SigID "},{"tags":[],"text":" SIG_DFL ... use default handler for SigID "},{"tags":[],"text":" a user-defined function to handle SigID signals "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" sigID is one of the OS-defined signals e.g. SIGHUP, SIGCHLD, SIGSEGV, ... but not SIGKILL, SIGSTOP "},{"tags":[],"text":" e.g. SIGHUP, SIGCHLD, SIGSEGV, ... but not SIGKILL, SIGSTOP "},{"tags":[],"text":" newAct defines how signal should be handled "},{"tags":[],"text":" oldAct saves a copy of how signal was handled "},{"tags":[],"text":" if newAct.sa_handler == SIG_IGN, signal is ignored "},{"tags":[],"text":" if newAct.sa_handler == SIG_DFL, default handler is used "},{"tags":[],"text":" on success, returns 0; on error, returns -1 and sets errno "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" e.g. SIGHUP, SIGCHLD, SIGSEGV, ... but not SIGKILL, SIGSTOP "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" void (*sa_handler)(int) pointer to a handler function, or SIG_IGN or SIG_DFL "},{"tags":[],"text":" pointer to a handler function, or SIG_IGN or SIG_DFL "},{"tags":[],"text":" void (*sa_sigaction)(int, siginfo_t *, void *) pointer to handler function; used if SA_SIGINFO flag is set allows more context info to be passed to handler "},{"tags":[],"text":" pointer to handler function; used if SA_SIGINFO flag is set "},{"tags":[],"text":" allows more context info to be passed to handler "},{"tags":[],"text":" sigset_t sa_mask a mask, where each bit specifies a signal to be blocked "},{"tags":[],"text":" a mask, where each bit specifies a signal to be blocked "},{"tags":[],"text":" int sa_flags flags to modify how signal is treated (e.g. don't block signal in its own handler) "},{"tags":[],"text":" flags to modify how signal is treated (e.g. don't block signal in its own handler) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" pointer to a handler function, or SIG_IGN or SIG_DFL "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" pointer to handler function; used if SA_SIGINFO flag is set "},{"tags":[],"text":" allows more context info to be passed to handler "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" a mask, where each bit specifies a signal to be blocked "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" flags to modify how signal is treated (e.g. don't block signal in its own handler) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" si_signo ... signal being handled "},{"tags":[],"text":" si_errno ... any errno value associated with signal "},{"tags":[],"text":" si_pid ... process ID of sending process "},{"tags":[],"text":" si_uid ... user ID of owner of sending process "},{"tags":[],"text":" si_status ... exit value for process termination "},{"tags":[],"text":" etc. etc. etc. "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" cause normal process execution to be suspended "},{"tags":[],"text":" an interrupt handler then carries out tasks related to interrupt "},{"tags":[],"text":" control is then returned to the original process "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" process requests data from disk (will take 100ms) "},{"tags":[],"text":" if process can do other work not related to requested data keep executing ... "},{"tags":[],"text":" keep executing ... "},{"tags":[],"text":" when data fetched from disk, process is interrupted "},{"tags":[],"text":" handler places data in a buffer for access by process "},{"tags":[],"text":" in-memory computation resumes "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" keep executing ... "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" process runs for a while (normal control flow) "},{"tags":[],"text":" receives a timer signal from the O/S "},{"tags":[],"text":" process is suspended and its state is saved "},{"tags":[],"text":" process is eventually added to runnable queue "},{"tags":[],"text":" removed from front of queue and state restored "},{"tags":[],"text":" process continues from where it was suspended "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" in-memory computations are very fast (ns) "},{"tags":[],"text":" input/output operations are very slow (ms) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" suspend and place on \"waiting for i/o\" queue "},{"tags":[],"text":" when i/o complete, move process to \"runnable\" queue "},{"tags":[],"text":" eventually, process resumes, with new data available "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" unexpected conditions which arise during computation "},{"tags":[],"text":" unexpected but not unanticipated (robust code) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" create() a data structure using multiple malloc()s "},{"tags":[],"text":" part-way through function, one malloc() fails "},{"tags":[],"text":" if abandoning create(), need to clean up previous malloc()s "},{"tags":[],"text":" if terminating the entire process, no need to clean up "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" processes are not necessarily executing simultaneously although this could happen if there are multiple CPUs "},{"tags":[],"text":" although this could happen if there are multiple CPUs "},{"tags":[],"text":" more likely, have a mixture of processes some are blocked waiting on a signal (e.g. i/o completion) some are runnable (ready to execute) one is running (on each CPU) "},{"tags":[],"text":" some are blocked waiting on a signal (e.g. i/o completion) "},{"tags":[],"text":" some are runnable (ready to execute) "},{"tags":[],"text":" one is running (on each CPU) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" although this could happen if there are multiple CPUs "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" some are blocked waiting on a signal (e.g. i/o completion) "},{"tags":[],"text":" some are runnable (ready to execute) "},{"tags":[],"text":" one is running (on each CPU) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" by switching process after one runs for a defined time slice "},{"tags":[],"text":" after timer counts down, current process is pre-empted "},{"tags":[],"text":" a new process is selected to run by the system scheduler "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" processes are organised into priority queue(s) where \"highest\" priority process is always at head of queue "},{"tags":[],"text":" where \"highest\" priority process is always at head of queue "},{"tags":[],"text":" priority determined by multiple factors, e.g. system processes have higher priority than user processes longer-running processes might have lower priority memory-intensive processes might have lower priority processes can also suggest their own priority "},{"tags":[],"text":" system processes have higher priority than user processes "},{"tags":[],"text":" longer-running processes might have lower priority "},{"tags":[],"text":" memory-intensive processes might have lower priority "},{"tags":[],"text":" processes can also suggest their own priority "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" where \"highest\" priority process is always at head of queue "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" system processes have higher priority than user processes "},{"tags":[],"text":" longer-running processes might have lower priority "},{"tags":[],"text":" memory-intensive processes might have lower priority "},{"tags":[],"text":" processes can also suggest their own priority "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" is priority-based (priority queue of processes) "},{"tags":[],"text":" Linux process priorities are values in range -20..139 "},{"tags":[],"text":" lower values represent higher priority "},{"tags":[],"text":" factors in determining priority user processes have lower priority than system processes processes have niceness value -20 (highest) .. +20 (lowest) recent CPU time usage by the process "},{"tags":[],"text":" user processes have lower priority than system processes "},{"tags":[],"text":" processes have niceness value -20 (highest) .. +20 (lowest) "},{"tags":[],"text":" recent CPU time usage by the process "},{"tags":[],"text":" scheduler chooses highest priority process from runnable "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" user processes have lower priority than system processes "},{"tags":[],"text":" processes have niceness value -20 (highest) .. +20 (lowest) "},{"tags":[],"text":" recent CPU time usage by the process "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" allow programs to communicate with \"the outside\" world "},{"tags":[],"text":" have significantly different characteristics to memory-based data "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" fast (ns) random access via (virtual) address "},{"tags":[],"text":" transfer data in units of bytes, halfwords, words "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" much slower (ms) access, random or sequential "},{"tags":[],"text":" often, transfer data in blocks (e.g. 128B, 512B, 4KB, ...) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" address specified by track and sector (s/t ≅ 200, s.size 512B) "},{"tags":[],"text":" access time (move to track + wait for sector + read block) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" high capacity (GB), high cost, reading faster than writing "},{"tags":[],"text":" pages 512B..4KB, blocks 32..128 pages, R/W page-at-a-time "},{"tags":[],"text":" pages updated by erase then write, limit on #updates "},{"tags":[],"text":" avg read time 11×10-6 sec, avg write time 15×10-6 sec "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" destination specified by IP address, packet size < 1KB "},{"tags":[],"text":" transfer time includes dT transmission delay ... time to push data packet onto \"the wire\" dP propagation delay ... time for packet to travel along \"the wire\" dC processing delay ... time to check header, re-route to next node dQ queueing delay ... time waiting on node before transmission need to calculate for N hops, so ≅ N(dT + dP + dC + dQ) "},{"tags":[],"text":" dT transmission delay ... time to push data packet onto \"the wire\" "},{"tags":[],"text":" dP propagation delay ... time for packet to travel along \"the wire\" "},{"tags":[],"text":" dC processing delay ... time to check header, re-route to next node "},{"tags":[],"text":" dQ queueing delay ... time waiting on node before transmission "},{"tags":[],"text":" need to calculate for N hops, so ≅ N(dT + dP + dC + dQ) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" dT transmission delay ... time to push data packet onto \"the wire\" "},{"tags":[],"text":" dP propagation delay ... time for packet to travel along \"the wire\" "},{"tags":[],"text":" dC processing delay ... time to check header, re-route to next node "},{"tags":[],"text":" dQ queueing delay ... time waiting on node before transmission "},{"tags":[],"text":" need to calculate for N hops, so ≅ N(dT + dP + dC + dQ) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" keyboard ... byte-by-byte input, often line-buffered "},{"tags":[],"text":" screen ... pixel-array output, typically via GPU "},{"tags":[],"text":" mouse ... transmit X,Y movement and button presses "},{"tags":[],"text":" camera ... convert video signal, frame-by-frame, to digital stream "},{"tags":[],"text":" microphone ... convert analog audio signal to digital stream "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" special control and data registers "},{"tags":[],"text":" locations (buffers) for data to be read/written "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" often written in assembler "},{"tags":[],"text":" are core components of the operating system "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" send request for operation (e.g. read, write, get status) "},{"tags":[],"text":" receive interrupt when request is completed "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" operating system defines special memory address "},{"tags":[],"text":" user programs perform i/o by getting/putting data into memory "},{"tags":[],"text":" virtual memory addresses are associated with data buffers of i/o device control registers of i/o device "},{"tags":[],"text":" data buffers of i/o device "},{"tags":[],"text":" control registers of i/o device "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" data buffers of i/o device "},{"tags":[],"text":" control registers of i/o device "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" uses existing memory access logic cirucits ⇒ less hardware "},{"tags":[],"text":" can use full range of CPU operations on device memory (cf. having limited set of special instructions to manipulate i/o devices) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" /dev/diskN ... (part of) a hard drive "},{"tags":[],"text":" /dev/ttyN ... a terminal device "},{"tags":[],"text":" /dev/ptyN ... a pseudo-terminal device "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" /dev/mem ... the physical memory (mostly protected) "},{"tags":[],"text":" /dev/null ... data sink or empty source "},{"tags":[],"text":" /dev/random ... stream of pseudo-random numbers "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" provide unbuffered direct access to hardware devices "},{"tags":[],"text":" programmers interact with device by writing individual bytes "},{"tags":[],"text":" do not necessarily provide byte-by-byte hardware i/o (e.g. disks) "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" provide buffered access to hardware devices "},{"tags":[],"text":" programmers interact with device by writing chunks of bytes "},{"tags":[],"text":" data transferred to device via operating system buffers "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" manipulates parameters of special files (behind open FileDesc) "},{"tags":[],"text":" Request is a device-specific request code, "},{"tags":[],"text":" Arg is either an integer modifier or pointer to data block "},{"tags":[],"text":" requires #include <sys/ioctl.h>, returns 0 if ok, -1 if error "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" HDIO_GETGEO ... get disk info in (heads,sectors,cylinders,...) "},{"tags":[],"text":" BLKGETSIZE ... get device size in sectors "},{"tags":[],"text":" in both cases, Arg is a pointer to an appropriate object "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" attempts to open device PathName in mode Flags "},{"tags":[],"text":" Flags can specify caching, async i/o, close on exec(), etc. "},{"tags":[],"text":" returns file descriptor if ok, -1 (plus errno) if error "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" attempts to read Nbytes of data into Buf from FDesc "},{"tags":[],"text":" returns # bytes actually read, 0 at EOF, -1 (plus errno) if error "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" attempts to write Nbytes of data from Buf to FDesc "},{"tags":[],"text":" returns # bytes actually written, -1 (plus errno) if error "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" OS uses a collection of buffers to hold data from devices "},{"tags":[],"text":" data is supplied to user programs normally from buffer "},{"tags":[],"text":" sometimes (infrequently?) need to access device "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" it is slow because of the context switch each time it is called "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" from tty-like devices, generally line buffered "},{"tags":[],"text":" from disk-like devices (files), read/written in BUFSIZ chunks via OS buffers, so may not need disk access each time "},{"tags":[],"text":" via OS buffers, so may not need disk access each time "},{"tags":[],"text":" buffering hidden from user, who sees getchar(), fgets(), etc. "},{"tags":[],"text":" buffer is allocated by fopen(), removed by fclose() "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" via OS buffers, so may not need disk access each time "}]},{"tags":[{"name":"list"}],"items":[{"tags":[],"text":" contains the buffer, malloc'd on fopen() "},{"tags":[],"text":" contains current position within the buffer and file "},{"tags":[],"text":" etc. etc. "}]}],"block":[{"tags":[{"name":"paragraph"}],"text":"E: Operating System Components"},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Storage Management "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Storage Management2/143 "},{"tags":[{"name":"paragraph"},{"name":"computer systems","salience":0.6192962527275085},{"name":"bulk","salience":0.21938581764698029},{"name":"storage devices","salience":0.16131789982318878}],"text":" Computer systems have bulk, persistent storage devices "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Disks3/143 "},{"tags":[{"name":"paragraph"},{"name":"hard disk drive","salience":1}],"text":" HDD = Hard Disk Drive "},{"tags":[{"name":"paragraph"},{"name":"hdds","salience":0.8827978372573853},{"name":"characteristics","salience":0.11720216274261475}],"text":" HDDs have the following characteristics: "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Disks4/143 "},{"tags":[{"name":"paragraph"},{"name":"data","salience":0.41901466250419617},{"name":"disk","salience":0.29990026354789734},{"name":"sector","salience":0.2810850739479065}],"text":" To access data on disk (one sector at-a-time) "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Disks5/143 "},{"tags":[{"name":"paragraph"},{"name":"measures","salience":0.5606412291526794},{"name":"hdds","salience":0.43935874104499817}],"text":" Typical (and historical) measures of HDDs: "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Disks6/143 "},{"tags":[{"name":"paragraph"},{"name":"devices","salience":1}],"text":" Disks are block-oriented devices "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" SSDs7/143 "},{"tags":[{"name":"paragraph"},{"name":"ssd","salience":0.766995370388031},{"name":"solid-state drive","salience":0.2330045998096466}],"text":" SSD = solid-state drive "},{"tags":[{"name":"paragraph"},{"name":"devices","salience":0.9262799024581909},{"name":"data persistenly","salience":0.07372011244297028}],"text":" SSDs are fully-electronic devices that can store data persistenly "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... SSDs8/143 "},{"tags":[{"name":"paragraph"},{"name":"oss","salience":0.5331424474716187},{"name":"ssds","salience":0.2714798152446747},{"name":"hdds","salience":0.19537773728370667}],"text":" OSs can view SSDs like HDDs "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"operating systems","salience":0.6815741658210754},{"name":"storage9","salience":0.31842583417892456}],"text":" Operating Systems and Storage9/143 "},{"tags":[{"name":"paragraph"},{"name":"operating system","salience":0.5657736659049988},{"name":"data","salience":0.28501808643341064},{"name":"bulk storage devices","salience":0.14920827746391296}],"text":" Operating System manages data stored on bulk storage devices "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" File Systems "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" File Systems11/143 "},{"tags":[{"name":"paragraph"},{"name":"file systems","salience":0.6525404453277588},{"name":"mechanism","salience":0.18145516514778137},{"name":"data","salience":0.16600437462329865}],"text":" File systems provide a mechanism for managing stored data: "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"unix","salience":0.5598768591880798},{"name":"file system12","salience":0.26435235142707825},{"name":"linux","salience":0.17577078938484192}],"text":" Unix/Linux File System12/143 "},{"tags":[{"name":"paragraph"},{"name":"unix","salience":0.48890575766563416},{"name":"file system","salience":0.29185208678245544},{"name":"linux","salience":0.2192421406507492}],"text":" Unix/Linux file system is tree-structured "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"tree","salience":0.4095093309879303},{"name":"symlinks","salience":0.3823167681694031},{"name":"graph","salience":0.20817391574382782}],"text":" (We say it's \"tree structured\", but symlinks actually make it into a graph) "},{"tags":[{"name":"paragraph"},{"name":"processes","salience":0.6419961452484131},{"name":"notion","salience":0.14537987112998962},{"name":"location","salience":0.1373872458934784},{"name":"file system","salience":0.07523675262928009}],"text":" Processes have a notion of their location within the file system "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"unix","salience":0.5808720588684082},{"name":"file system13","salience":0.2539452612400055},{"name":"linux","salience":0.16518265008926392}],"text":" ... Unix/Linux File System13/143 "},{"tags":[{"name":"paragraph"},{"name":"file system","salience":0.6178018450737},{"name":"objects","salience":0.2613927721977234},{"name":"types","salience":0.12080538272857666}],"text":" The file system is used to access various types of objects: "},{"tags":[{"name":"paragraph"},{"name":"paths","salience":1}],"text":" Paths can be "},{"tags":[{"name":"paragraph"},{"name":"home","salience":0.40839120745658875},{"name":"cs1521","salience":0.3169695734977722},{"name":"stdio.h","salience":0.27463921904563904}],"text":" e.g. /usr/include/stdio.h, /home/jas/cs1521/ "},{"tags":[{"name":"paragraph"},{"name":"path","salience":0.5154759883880615},{"name":"c","salience":0.48452404141426086}],"text":" e.g. ../../another/path/prog.c, ./a.out, a.out "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"unix","salience":0.5808720588684082},{"name":"file system14","salience":0.2539452612400055},{"name":"linux","salience":0.16518265008926392}],"text":" ... Unix/Linux File System14/143 "},{"tags":[{"name":"paragraph"},{"name":"unix","salience":0.3994970917701721},{"name":"range","salience":0.27638566493988037},{"name":"file-system","salience":0.1829618364572525},{"name":"types","salience":0.141155406832695}],"text":" Unix defines a range of file-system-related types: "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"unix","salience":0.7702145576477051},{"name":"linux file","salience":0.22978545725345612}],"text":" ... Unix/Linux File System15/143 "},{"tags":[{"name":"paragraph"},{"name":"metadata","salience":0.6508029103279114},{"name":"file system objects","salience":0.2300509661436081},{"name":"inodes","salience":0.11914613842964172}],"text":" Metadata for file system objects is stored in inodes "},{"tags":[{"name":"paragraph"},{"name":"note","salience":0.5201829671859741},{"name":"inode","salience":0.3340759873390198},{"name":"file","salience":0.08893066644668579},{"name":"name","salience":0.05681035295128822}],"text":" Note: an inode does not contain the name of the file "},{"tags":[{"name":"paragraph"},{"name":"access","salience":0.6700063943862915},{"name":"file","salience":0.15031404793262482},{"name":"name","salience":0.14063026010990143},{"name":"directory","salience":0.03904928267002106}],"text":" Access to a file by name requires a directory "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"unix","salience":0.5808720588684082},{"name":"file system16","salience":0.2539452612400055},{"name":"linux","salience":0.16518265008926392}],"text":" ... Unix/Linux File System16/143 "},{"tags":[{"name":"paragraph"},{"name":"access","salience":0.5505452156066895},{"name":"files","salience":0.26900187134742737},{"name":"name proceeds","salience":0.18045291304588318}],"text":" Access to files by name proceeds as ... "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"file system operations17","salience":1}],"text":" File System Operations17/143 "},{"tags":[{"name":"paragraph"},{"name":"unix","salience":0.5957443714141846},{"name":"interface","salience":0.30335718393325806},{"name":"file system objects","salience":0.10089844465255737}],"text":" Unix presents a uniform interface to file system objects "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" open() / close()18/143 "},{"tags":[{"name":"paragraph"},{"name":"int","salience":0.5468743443489075},{"name":"path","salience":0.16764572262763977},{"name":"char","salience":0.16580329835414886},{"name":"flags","salience":0.11967664211988449}],"text":" int open(char *Path, int Flags) "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... open() / close()19/143 "},{"tags":[{"name":"paragraph"},{"name":"filedesc","salience":1}],"text":" int close(int FileDesc) "},{"tags":[{"name":"paragraph"},{"name":"aside","salience":0.8312284350395203},{"name":"rm","salience":0.16877159476280212}],"text":" An aside: removing an object e.g. via rm "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... open() / close()20/143 "},{"tags":[{"name":"paragraph"},{"name":"example","salience":1}],"text":" Example using open() and close() "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"write","salience":1}],"text":" read() / write()21/143 "},{"tags":[{"name":"paragraph"},{"name":"filedesc","salience":0.8522800803184509},{"name":"void","salience":0.14771990478038788}],"text":" ssize_t read(int FileDesc, void *Buffer, size_t Count) "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"},{"name":"file","salience":1}],"text":" Once a file is open()'d ... "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"write","salience":1}],"text":" ... read() / write()22/143 "},{"tags":[{"name":"paragraph"},{"name":"filedesc","salience":0.9030551314353943},{"name":"void","salience":0.0969448909163475}],"text":" ssize_t write(int FileDesc, void *Buffer, size_t Count) "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"write","salience":1}],"text":" ... read() / write()23/143 "},{"tags":[{"name":"paragraph"},{"name":"functions","salience":0.6076720952987671},{"name":"stdio.h","salience":0.3923278748989105}],"text":" Functions from stdio.h tend to be char-oriented "},{"tags":[{"name":"paragraph"},{"name":"file-descriptor","salience":0.43210145831108093},{"name":"system","salience":0.30913686752319336},{"name":"byte sequences","salience":0.15789547562599182},{"name":"deal","salience":0.10086619853973389}],"text":" File-descriptor-based system calls deal with byte sequences "},{"tags":[{"name":"paragraph"},{"name":"write","salience":0.5437043905258179},{"name":"pointer values","salience":0.45629560947418213}],"text":" ** you cannot save/restore pointer values using write()/read() "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"write","salience":1}],"text":" ... read() / write()24/143 "},{"tags":[{"name":"paragraph"},{"name":"files","salience":0.7249495983123779},{"name":"records","salience":0.27505040168762207}],"text":" Files of records can be produced by "},{"tags":[{"name":"paragraph"},{"name":"write","salience":0.7425519824028015},{"name":"approach","salience":0.2574480175971985}],"text":" For the write() approach: "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"write","salience":1}],"text":" ... read() / write()25/143 "},{"tags":[{"name":"paragraph"},{"name":"example","salience":0.43529126048088074},{"name":"write","salience":0.19735674560070038},{"name":"ing records","salience":0.15765579044818878},{"name":"printf","salience":0.1294567734003067},{"name":"ing records","salience":0.08023945242166519}],"text":" Example of write()ing records vs printf()ing records "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" seek()26/143 "},{"tags":[{"name":"paragraph"},{"name":"off_t lseek","salience":0.5440206527709961},{"name":"whence","salience":0.1922203153371811},{"name":"filedesc","salience":0.16418500244617462},{"name":"int","salience":0.0995740070939064}],"text":" off_t lseek(int FileDesc, off_t Offset, int Whence) "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... seek()27/143 "},{"tags":[{"name":"paragraph"}],"text":" Example: "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" stat()28/143 "},{"tags":[{"name":"paragraph"},{"name":"int stat","salience":0.4339309632778168},{"name":"statbuf","salience":0.27870428562164307},{"name":"char","salience":0.1680559515953064},{"name":"filename","salience":0.11930878460407257}],"text":" int stat(char *FileName, struct stat *StatBuf) "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Links29/143 "},{"tags":[{"name":"paragraph"},{"name":"file system links","salience":0.6046291589736938},{"name":"paths","salience":0.2604702115058899},{"name":"data","salience":0.13490062952041626}],"text":" File system links allow multiple paths to access the same data "},{"tags":[{"name":"paragraph"}],"text":" Hard links "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Links30/143 "},{"tags":[{"name":"paragraph"},{"name":"file stat structure","salience":1}],"text":" File stat structure: "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Links31/143 "},{"tags":[{"name":"paragraph"},{"name":"bit-string","salience":0.9328392744064331},{"name":"some","salience":0.0671607032418251}],"text":" The st_mode is a bit-string containing some of: "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Links32/143 "},{"tags":[{"name":"paragraph"},{"name":"int mkdir","salience":0.6552321314811707},{"name":"char","salience":0.22914226353168488},{"name":"mode_t mode","salience":0.11562559008598328}],"text":" int mkdir(char *PathName, mode_t Mode) "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Links33/143 "},{"tags":[{"name":"paragraph"},{"name":"filedesc","salience":0.6222690939903259},{"name":"fsync","salience":0.3777309060096741}],"text":" int fsync(int FileDesc) "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Links34/143 "},{"tags":[{"name":"paragraph"},{"name":"int mount","salience":0.26483672857284546},{"name":"target","salience":0.23049423098564148},{"name":"filesystype","salience":0.15731064975261688},{"name":"char","salience":0.13627931475639343},{"name":"char","salience":0.09437230974435806},{"name":"void","salience":0.0542161762714386},{"name":"data","salience":0.03830091655254364},{"name":"flags","salience":0.024189665913581848}],"text":" int mount(char *Source, char *Target, char *FileSysType, unsigned long Flags, void *data) "},{"tags":[{"name":"paragraph"},{"name":"file system","salience":0.7136337161064148},{"name":"ext3-type","salience":0.2863662838935852}],"text":" (use disk5 to hold the /usr file system as read-only ext3-type) "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"file system summary35","salience":1}],"text":" File System Summary35/143 "},{"tags":[{"name":"paragraph"},{"name":"operating systems","salience":0.6996214985847473},{"name":"file system","salience":0.3003784716129303}],"text":" Operating systems provide a file system "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Memory Management "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Memory37/143 "},{"tags":[{"name":"paragraph"},{"name":"systems","salience":0.8569005131721497},{"name":"ram","salience":0.14309948682785034}],"text":" Systems typically contain 4-16GB of volatile RAM "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"cache memory","salience":1}],"text":" Plus other smaller faster cache memory "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Processes38/143 "},{"tags":[{"name":"paragraph"},{"name":"computation","salience":1}],"text":" A process is an active computation, consisting of "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Memory Management39/143 "},{"tags":[{"name":"paragraph"},{"name":"operating system","salience":0.5739348530769348},{"name":"memory","salience":0.17775383591651917},{"name":"view","salience":0.15019120275974274},{"name":"processes","salience":0.09812010079622269}],"text":" Operating system provides a view of memory for individual processes "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"memory management40","salience":1}],"text":" ... Memory Management40/143 "},{"tags":[{"name":"paragraph"},{"name":"system","salience":0.36458832025527954},{"name":"cpu","salience":0.2608361542224884},{"name":"memory","salience":0.2413502186536789},{"name":"processes","salience":0.13322530686855316}],"text":" On a system with e.g. 1 CPU, 1 memory and 100's of processes "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"memory management41","salience":1}],"text":" ... Memory Management41/143 "},{"tags":[{"name":"paragraph"},{"name":"process","salience":0.7305375337600708},{"name":"computation","salience":0.2694624960422516}],"text":" The good-old-days ... one process/computation at a time "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"process","salience":0.6839567422866821},{"name":"memory","salience":0.3160432279109955}],"text":" Or, if the process did not need the entire memory "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Easy to implement by initialising $sp to psize-4 "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"memory management42","salience":1}],"text":" ... Memory Management42/143 "},{"tags":[{"name":"paragraph"},{"name":"processes","salience":0.5934883952140808},{"name":"memory","salience":0.4065115749835968}],"text":" Two processes loaded into memory at once "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"memory management43","salience":1}],"text":" ... Memory Management43/143 "},{"tags":[{"name":"paragraph"}],"text":" When proc1 is loaded ... "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"memory management44","salience":1}],"text":" ... Memory Management44/143 "},{"tags":[{"name":"paragraph"},{"name":"scenario","salience":0.44561079144477844},{"name":"processes","salience":0.3223798871040344},{"name":"memory","salience":0.23200932145118713}],"text":" Consider a scenario with multiple processes loaded in memory: "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"address mapping","salience":1}],"text":" If we do on-the-fly address mapping, we need to ... "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"memory management45","salience":1}],"text":" ... Memory Management45/143 "},{"tags":[{"name":"paragraph"},{"name":"scenario","salience":0.7274385094642639},{"name":"process","salience":0.2725614607334137}],"text":" Consider the same scenario, but now we want to add a new process "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"process","salience":0.48887550830841064},{"name":"any","salience":0.3279494047164917},{"name":"slots","salience":0.18317508697509766}],"text":" The new process doesn't fit in any of the unused slots "},{"tags":[{"name":"paragraph"},{"name":"process","salience":0.698550283908844},{"name":"slot","salience":0.3014496862888336}],"text":" Could move some process to make a single large slot "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"memory management46","salience":1}],"text":" ... Memory Management46/143 "},{"tags":[{"name":"paragraph"},{"name":"strategy","salience":0.6618804335594177},{"name":"process memory","salience":0.21694540977478027},{"name":"regions","salience":0.1211741641163826}],"text":" Alternative strategy: split new process memory over two regions "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":" becomes "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"memory management47","salience":1}],"text":" ... Memory Management47/143 "},{"tags":[{"name":"paragraph"},{"name":"implications","salience":0.5947269201278687},{"name":"splitting process memory","salience":0.23518185317516327},{"name":"memory","salience":0.17009124159812927}],"text":" Implications for splitting process memory across physical memory "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"memory management48","salience":1}],"text":" ... Memory Management48/143 "},{"tags":[{"name":"paragraph"},{"name":"scheme","salience":0.7983086109161377},{"name":"mapping calculation","salience":0.20169135928153992}],"text":" Under this scheme, address mapping calculation is complicated "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"mapping","salience":0.6847590804100037},{"name":"hardware","salience":0.31524091958999634}],"text":" The above mapping must be done in hardware to be efficient. "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"memory management49","salience":1}],"text":" ... Memory Management49/143 "},{"tags":[{"name":"paragraph"},{"name":"address mapping","salience":0.8277547955513},{"name":"size","salience":0.13333843648433685},{"name":"chunks","salience":0.038906775414943695}],"text":" Address mapping would be simpler if all chunks were same size "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"memory management50","salience":1}],"text":" ... Memory Management50/143 "},{"tags":[{"name":"paragraph"},{"name":"example","salience":0.8837491273880005},{"name":"mapping table","salience":0.11625086516141891}],"text":" Example of simple mapping table: "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"memory management review51","salience":1}],"text":" Memory Management Review51/143 "},{"tags":[{"name":"paragraph"},{"name":"reminder","salience":0.6233991980552673},{"name":"process","salience":0.21800990402698517},{"name":"addresses","salience":0.1585909128189087}],"text":" Reminder: process addresses ↔ physical addresses "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Address Mapping52/143 "},{"tags":[{"name":"paragraph"},{"name":"mapping","salience":0.6560047268867493},{"name":"process address","salience":0.2566906213760376},{"name":"address","salience":0.08730464428663254}],"text":" Mapping from process address to physical address: "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"computation","salience":0.6296356320381165},{"name":"pageno","salience":0.3052015006542206},{"name":"pagesize","salience":0.06516284495592117}],"text":" Computation of pageno,offset is efficient if Pagesize == 2n "},{"tags":[{"name":"paragraph"},{"name":"entries","salience":0.42905738949775696},{"name":"information","salience":0.3062896430492401},{"name":"pageinfo","salience":0.26465296745300293}],"text":" Note that we assume PageInfo entries with more information .... "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"mapping53","salience":1}],"text":" ... Address Mapping53/143 "},{"tags":[{"name":"paragraph"},{"name":"page table entries","salience":0.7194413542747498},{"name":"address","salience":0.28055864572525024}],"text":" Page table entries typically do not store physical address "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Virtual Memory54/143 "},{"tags":[{"name":"paragraph"},{"name":"side-effect","salience":0.3858681917190552},{"name":"type","salience":0.2760603725910187},{"name":"address","salience":0.1970701962709427},{"name":"mapping","salience":0.14100123941898346}],"text":" A side-effect of this type of virtual→physical address mapping "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"memory55","salience":1}],"text":" ... Virtual Memory55/143 "},{"tags":[{"name":"paragraph"},{"name":"pages","salience":0.6017322540283203},{"name":"frames","salience":0.2881052494049072},{"name":"size","salience":0.11016249656677246}],"text":" Pages/frames are typically 512B .. 8KB in size "},{"tags":[{"name":"paragraph"},{"name":"4gb memory","salience":0.7217008471488953},{"name":"frames","salience":0.27829912304878235}],"text":" In a 4GB memory, would have ≅4 million × 1KB frames "},{"tags":[{"name":"paragraph"},{"name":"frame","salience":0.561691403388977},{"name":"page","salience":0.3161756992340088},{"name":"process address space","salience":0.12213287502527237}],"text":" Each frame can hold one page of process address space "},{"tags":[{"name":"paragraph"},{"name":"leads","salience":0.5509397387504578},{"name":"memory layout","salience":0.24979062378406525},{"name":"memory","salience":0.14215074479579926},{"name":"pages","salience":0.05711886286735535}],"text":" Leads to a memory layout like this (with L total pages of physical memory): "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"process","salience":0.3514609932899475},{"name":"all","salience":0.29174646735191345},{"name":"frames","salience":0.2305419147014618},{"name":"re-use","salience":0.12625062465667725}],"text":" When a process completes, all of its frames are released for re-use "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"memory56","salience":1}],"text":" ... Virtual Memory56/143 "},{"tags":[{"name":"paragraph"},{"name":"mapping process address","salience":0.5768159627914429},{"name":"address","salience":0.4231840670108795}],"text":" How to arrange mapping process address → physical address? "},{"tags":[{"name":"paragraph"},{"name":"page table","salience":1}],"text":" Consider a per-process page table, e.g. "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"memory57","salience":1}],"text":" ... Virtual Memory57/143 "},{"tags":[{"name":"paragraph"},{"name":"example","salience":0.6815314292907715},{"name":"page table","salience":0.2383394092321396},{"name":"process","salience":0.08012917637825012}],"text":" Example of page table for one process: "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"timestamps","salience":0.700859546661377},{"name":"page","salience":0.29914048314094543}],"text":" Timestamps show when page was loaded. "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"memory58","salience":1}],"text":" ... Virtual Memory58/143 "},{"tags":[{"name":"paragraph"},{"name":"address","salience":0.572419285774231},{"name":"address","salience":0.19484907388687134},{"name":"mapping","salience":0.1754765808582306},{"name":"detail","salience":0.05725507810711861}],"text":" Virtual address to physical address mapping (more detail): "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"working sets59","salience":1}],"text":" An Aside: Working Sets59/143 "},{"tags":[{"name":"paragraph"},{"name":"process","salience":0.7445061206817627},{"name":"execution","salience":0.2554938793182373}],"text":" Consider a new process commencing execution ... "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"working sets60","salience":1}],"text":" ... An Aside: Working Sets60/143 "},{"tags":[{"name":"paragraph"},{"name":"observations","salience":0.7983086109161377},{"name":"running programs","salience":0.20169135928153992}],"text":" From observations of running programs ... "},{"tags":[{"name":"paragraph"},{"name":"set","salience":0.4583359956741333},{"name":"pages","salience":0.3298392593860626},{"name":"process","salience":0.21182474493980408}],"text":" Only need to hold, at a given time, the process's working set of pages "},{"tags":[{"name":"paragraph"}],"text":" Implications: "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Virtual Memory61/143 "},{"tags":[{"name":"paragraph"},{"name":"load","salience":0.547021746635437},{"name":"memory","salience":0.2767849266529083},{"name":"pages","salience":0.17619332671165466}],"text":" We say that we \"load\" pages into physical memory "},{"tags":[{"name":"paragraph"}],"text":" But where are they loaded from? "},{"tags":[{"name":"paragraph"},{"name":"pages","salience":0.6508029103279114},{"name":"data","salience":0.2300509661436081},{"name":"use","salience":0.11914613842964172}],"text":" The pages of dynamic data not currently in use "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"memory62","salience":1}],"text":" ... Virtual Memory62/143 "},{"tags":[{"name":"paragraph"},{"name":"process","salience":0.5815046429634094},{"name":"address space","salience":0.41849538683891296}],"text":" We can imagine that a process's address space ... "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"},{"name":"pages","salience":0.6231241226196289},{"name":"disk","salience":0.19454050064086914},{"name":"memory","salience":0.18233537673950195}],"text":" Transferring pages between disk↔memory is very expensive "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"memory63","salience":1}],"text":" ... Virtual Memory63/143 "},{"tags":[{"name":"paragraph"},{"name":"page table","salience":0.7185789942741394},{"name":"pages","salience":0.2814210057258606}],"text":" Per-process page table, allowing for some pages to be not loaded "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"memory64","salience":1}],"text":" ... Virtual Memory64/143 "},{"tags":[{"name":"paragraph"},{"name":"mapping process","salience":0.675275981426239},{"name":"page tables","salience":0.324724018573761}],"text":" Recall the address mapping process with per-process page tables "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"page","salience":1}],"text":" What to do if the page is not loaded? "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Page Faults65/143 "},{"tags":[{"name":"paragraph"},{"name":"page fault","salience":0.5503280758857727},{"name":"page","salience":0.4496719241142273}],"text":" Requesting a non-loaded page generates a page fault. "},{"tags":[{"name":"paragraph"},{"name":"approach","salience":0.8907273411750793},{"name":"page fault","salience":0.10927264392375946}],"text":" One approach to handling a page fault ... "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"way","salience":0.6594401001930237},{"name":"frames","salience":0.3405599296092987}],"text":" Assumes that we have a way of quickly identifying free frames "},{"tags":[{"name":"paragraph"},{"name":"free list","salience":1}],"text":" Commonly handled via a free list "},{"tags":[{"name":"paragraph"},{"name":"reminder","salience":0.4732802212238312},{"name":"frames","salience":0.2214265912771225},{"name":"process","salience":0.17783032357692719},{"name":"process","salience":0.12746287882328033}],"text":" Reminder: frames allocated to a process become free when process exits "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"faults66","salience":1}],"text":" ... Page Faults66/143 "},{"tags":[{"name":"paragraph"},{"name":"page frames","salience":1}],"text":" What happens if there are currently no free page frames "},{"tags":[{"name":"paragraph"},{"name":"getfreeframe","salience":1}],"text":" What does getFreeFrame() do? "},{"tags":[{"name":"paragraph"}],"text":" Possibilities: "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Page Replacement67/143 "},{"tags":[{"name":"paragraph"},{"name":"page","salience":1}],"text":" What happens when a page is replaced? "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"page","salience":1}],"text":" ... Page Replacement68/143 "},{"tags":[{"name":"paragraph"},{"name":"factors","salience":0.8837491273880005},{"name":"page","salience":0.11625086516141891}],"text":" Factors to consider in deciding which page to replace "},{"tags":[{"name":"paragraph"}],"text":" But we do know whether it has been used recently (if we record this) "},{"tags":[{"name":"paragraph"},{"name":"heuristic","salience":0.6507119536399841},{"name":"lru replacement","salience":0.34928804636001587}],"text":" Useful heuristic: LRU replacement "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"replacement69","salience":1}],"text":" ... Page Replacement69/143 "},{"tags":[{"name":"paragraph"},{"name":"factors","salience":0.6929251551628113},{"name":"page","salience":0.3070748746395111}],"text":" Factors for choosing best page to replace are heuristic "},{"tags":[{"name":"paragraph"}],"text":" What happens if ... "},{"tags":[{"name":"paragraph"},{"name":"working set model","salience":0.585180401802063},{"name":"lru","salience":0.2184002697467804},{"name":"thrashing","salience":0.1964193433523178}],"text":" The working set model plus LRU helps avoid thrashing "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"replacement70","salience":1}],"text":" ... Page Replacement70/143 "},{"tags":[{"name":"paragraph"},{"name":"lru","salience":0.6122093200683594},{"name":"replacement strategy","salience":0.3364560604095459},{"name":"others","salience":0.05133461207151413}],"text":" LRU is one replacement strategy. Others include: "},{"tags":[{"name":"paragraph"}],"text":" First-in-first-out (FIFO) "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"virtual memory 71","salience":1}],"text":" Virtual Memory 71/143 "},{"tags":[{"name":"paragraph"},{"name":"page tables","salience":0.5919948816299438},{"name":"pts","salience":0.40800511837005615}],"text":" Page tables (PTs) revisited ... "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"virtual memory 72","salience":1}],"text":" ... Virtual Memory 72/143 "},{"tags":[{"name":"paragraph"},{"name":"strategy","salience":0.6507119536399841},{"name":"page tables","salience":0.34928804636001587}],"text":" Alternative strategy: multi-level page tables "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"pages","salience":0.305970162153244},{"name":"pages","salience":0.1717238873243332},{"name":"virtual address space","salience":0.1504078507423401},{"name":"top","salience":0.1403260976076126},{"name":"bottom","salience":0.10727047920227051},{"name":"stack","salience":0.07608141005039215},{"name":"heap","salience":0.04822011664509773}],"text":" Effective because not all pages in virtual address space are required (e.g. the pages between the top of the heap and the bottom of the stack) "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"virtual memory 73","salience":1}],"text":" ... Virtual Memory 73/143 "},{"tags":[{"name":"paragraph"},{"name":"memory","salience":0.598486602306366},{"name":"sharing","salience":0.18479937314987183},{"name":"pages","salience":0.12233351171016693},{"name":"library code","salience":0.09438054263591766}],"text":" Virtual memory allows sharing of read-only pages (e.g. library code) "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Cache Memory74/143 "},{"tags":[{"name":"paragraph"},{"name":"cache memory","salience":0.6450696587562561},{"name":"memory","salience":0.2368338257074356},{"name":"cpu","salience":0.11809652298688889}],"text":" Cache memory = small*, fast memory* close to CPU "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"},{"name":"ram","salience":1}],"text":" Small = MB, Fast = 5 × RAM "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"cache memory75","salience":1}],"text":" ... Cache Memory75/143 "},{"tags":[{"name":"paragraph"}],"text":" Cache memory "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"memory management hardware76","salience":1}],"text":" Memory Management Hardware76/143 "},{"tags":[{"name":"paragraph"},{"name":"address translation","salience":1}],"text":" Address translation is very important/frequent "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"memory management hardware77","salience":1}],"text":" ... Memory Management Hardware77/143 "},{"tags":[{"name":"paragraph"},{"name":"tlb","salience":0.766995370388031},{"name":"translation lookaside buffer","salience":0.2330045998096466}],"text":" TLB = translation lookaside buffer "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Process Management "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Processes79/143 "},{"tags":[{"name":"paragraph"},{"name":"instance","salience":0.9086937308311462},{"name":"program","salience":0.09130626171827316}],"text":" A process is an instance of an executing program "},{"tags":[{"name":"paragraph"},{"name":"processes","salience":1}],"text":" Multiple processes are \"active\" simultaneously "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Processes80/143 "},{"tags":[{"name":"paragraph"},{"name":"process","salience":0.701676070690155},{"name":"independence","salience":0.29832395911216736}],"text":" Control-flow independence (\"I am the only process, and I run until I finish\") "},{"tags":[{"name":"paragraph"},{"name":"reality","salience":0.6784997582435608},{"name":"processes","salience":0.2055036723613739},{"name":"machine","salience":0.11599655449390411}],"text":" In reality, there are multiple processes running on the machine "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"impression","salience":0.5934883952140808},{"name":"programs","salience":0.4065115749835968}],"text":" Overall impression: three programs running simultaneously "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Processes81/143 "},{"tags":[{"name":"paragraph"},{"name":"process","salience":1}],"text":" What can cause a process to be pre-empted? "},{"tags":[{"name":"paragraph"},{"name":"impression","salience":0.8599448800086975},{"name":"computation","salience":0.14005513489246368}],"text":" Overall impression: I ran until I finished all my computation "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Process Management82/143 "},{"tags":[{"name":"paragraph"},{"name":"os","salience":0.5758325457572937},{"name":"processes","salience":0.4241674542427063}],"text":" How does the OS manage multiple simultaneous processes? "},{"tags":[{"name":"paragraph"},{"name":"context","salience":0.4898326098918915},{"name":"collection","salience":0.22917072474956512},{"name":"information","salience":0.16395482420921326},{"name":"process","salience":0.11704183369874954}],"text":" Context = collection of information for one process "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"process management83","salience":1}],"text":" ... Process Management83/143 "},{"tags":[{"name":"paragraph"},{"name":"process control block","salience":0.6687821745872498},{"name":"os","salience":0.1837560087442398},{"name":"process","salience":0.09838332235813141},{"name":"info","salience":0.04907847195863724}],"text":" Process control block = where OS records info about each process "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Unix/Linux Processes84/143 "},{"tags":[{"name":"paragraph"},{"name":"environment","salience":0.5164486765861511},{"name":"processes","salience":0.23415270447731018},{"name":"unix","salience":0.09378395229578018},{"name":"systems","salience":0.0841115415096283},{"name":"linux","salience":0.07150314748287201}],"text":" Environment for processes running on Unix/Linux systems "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"unix","salience":0.6079218983650208},{"name":"linux processes85","salience":0.39207810163497925}],"text":" ... Unix/Linux Processes85/143 "},{"tags":[{"name":"paragraph"},{"name":"unix","salience":0.47769349813461304},{"name":"tools","salience":0.2187742441892624},{"name":"range","salience":0.18276888132095337},{"name":"processes","salience":0.12076336145401001}],"text":" Unix provides a range of tools for manipulating processes "},{"tags":[{"name":"paragraph"}],"text":" Commands: "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"unix","salience":0.6079218983650208},{"name":"linux processes86","salience":0.39207810163497925}],"text":" ... Unix/Linux Processes86/143 "},{"tags":[{"name":"paragraph"},{"name":"information","salience":0.5961312651634216},{"name":"processes","salience":0.20847399532794952},{"name":"pcb","salience":0.19539472460746765}],"text":" Information associated with processes (PCB): "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"unix","salience":0.6079218983650208},{"name":"linux processes87","salience":0.39207810163497925}],"text":" ... Unix/Linux Processes87/143 "},{"tags":[{"name":"paragraph"},{"name":"process info","salience":0.768847644329071},{"name":"user structure","salience":0.1407572478055954},{"name":"process table entry","salience":0.09039513766765594}],"text":" Process info is split across process table entry and user structure "},{"tags":[{"name":"paragraph"},{"name":"process table","salience":0.6370345950126648},{"name":"data structure","salience":0.20880165696144104},{"name":"processes","salience":0.15416373312473297}],"text":" Process table = kernel data structure describing all processes "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"system calls88","salience":1}],"text":" Process-related System Calls88/143 "},{"tags":[{"name":"paragraph"}],"text":" pid_t fork(void) "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"system calls89","salience":1}],"text":" ... Process-related System Calls89/143 "},{"tags":[{"name":"paragraph"},{"name":"example","salience":0.5759657621383667},{"name":"fork","salience":0.4240342378616333}],"text":" Minimal example for fork(): "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"system calls90","salience":1}],"text":" ... Process-related System Calls90/143 "},{"tags":[{"name":"paragraph"},{"name":"process","salience":0.6524925231933594},{"name":"linux","salience":0.1233791708946228},{"name":"unix","salience":0.1219639778137207},{"name":"process id","salience":0.10216434299945831}],"text":" Every process in Unix/Linux is allocated a process ID "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"system calls91","salience":1}],"text":" ... Process-related System Calls91/143 "},{"tags":[{"name":"paragraph"},{"name":"information","salience":0.7983086109161377},{"name":"process","salience":0.20169135928153992}],"text":" Getting information about a process ... "},{"tags":[{"name":"paragraph"}],"text":" pid_t getpid() "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"system calls92","salience":1}],"text":" ... Process-related System Calls92/143 "},{"tags":[{"name":"paragraph"},{"name":"processes","salience":0.7815695405006409},{"name":"groups","salience":0.21843047440052032}],"text":" Processes belong to process groups "},{"tags":[{"name":"paragraph"},{"name":"details","salience":0.3752753436565399},{"name":"man","salience":0.3517312705516815},{"name":"getpgid","salience":0.27299338579177856}],"text":" For more details: man 2 getpgid "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"system calls93","salience":1}],"text":" ... Process-related System Calls93/143 "},{"tags":[{"name":"paragraph"},{"name":"example","salience":0.5759657621383667},{"name":"getpid","salience":0.4240342378616333}],"text":" Minimal example for getpid(): "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"system calls94","salience":1}],"text":" ... Process-related System Calls94/143 "},{"tags":[{"name":"paragraph"},{"name":"int","salience":0.40450048446655273},{"name":"status","salience":0.3352769911289215},{"name":"int options","salience":0.26022252440452576}],"text":" pid_t waitpid(pid_t pid, int *status, int options) "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"system calls95","salience":1}],"text":" ... Process-related System Calls95/143 "},{"tags":[{"name":"paragraph"},{"name":"pid","salience":0.38456666469573975},{"name":"waitpid","salience":0.3386695981025696},{"name":"options","salience":0.2767637073993683}],"text":" More on waitpid(pid, &status, options) "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"system calls96","salience":1}],"text":" ... Process-related System Calls96/143 "},{"tags":[{"name":"paragraph"},{"name":"example","salience":0.5759657621383667},{"name":"wait","salience":0.4240342378616333}],"text":" Minimal example for wait(): "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"system calls97","salience":1}],"text":" ... Process-related System Calls97/143 "},{"tags":[{"name":"paragraph"},{"name":"int kill","salience":0.7264164686203003},{"name":"pid_t procid","salience":0.160118967294693},{"name":"sigid","salience":0.11346457153558731}],"text":" int kill(pid_t ProcID, int SigID) "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"system calls98","salience":1}],"text":" ... Process-related System Calls98/143 "},{"tags":[{"name":"paragraph"},{"name":"example","salience":0.5759657621383667},{"name":"kill","salience":0.4240342378616333}],"text":" Minimal example for kill(): "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"system calls99","salience":1}],"text":" ... Process-related System Calls99/143 "},{"tags":[{"name":"paragraph"},{"name":"int status","salience":1}],"text":" void _exit(int status) "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"system calls100","salience":1}],"text":" ... Process-related System Calls100/143 "},{"tags":[{"name":"paragraph"},{"name":"void exit","salience":0.7983086109161377},{"name":"int status","salience":0.20169135928153992}],"text":" void exit(int status) "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"system calls101","salience":1}],"text":" ... Process-related System Calls101/143 "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"system calls102","salience":1}],"text":" ... Process-related System Calls102/143 "},{"tags":[{"name":"paragraph"},{"name":"process","salience":0.39425191283226013},{"name":"sigchld","salience":0.24510011076927185},{"name":"parent","salience":0.2200661450624466},{"name":"signal","salience":0.14058183133602142}],"text":" When a process finishes, sends SIGCHLD signal to parent "},{"tags":[{"name":"paragraph"},{"name":"zombie process","salience":0.5734618306159973},{"name":"process","salience":0.4265381395816803}],"text":" Zombie process = a process which has exited but signal not handled "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"system calls103","salience":1}],"text":" ... Process-related System Calls103/143 "},{"tags":[{"name":"paragraph"},{"name":"envp","salience":0.4971539378166199},{"name":"execve","salience":0.26219385862350464},{"name":"char","salience":0.14128512144088745},{"name":"char","salience":0.09936708956956863}],"text":" int execve(char *Path, char *Argv[], char *Envp[]) "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"system calls104","salience":1}],"text":" ... Process-related System Calls104/143 "},{"tags":[{"name":"paragraph"},{"name":"unix","salience":0.5696773529052734},{"name":"processes","salience":0.3211084306240082},{"name":"processes","salience":0.109214186668396}],"text":" On Unix, processes create new different processes via: "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"process control flow105","salience":1}],"text":" Process Control Flow105/143 "},{"tags":[{"name":"paragraph"},{"name":"process","salience":1}],"text":" When a process is executing ... "},{"tags":[{"name":"paragraph"},{"name":"control flow","salience":0.7155919075012207},{"name":"control flow","salience":0.2844080626964569}],"text":" Regular control flow can be interrupted ⇒ exceptional control flow "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"process control flow106","salience":1}],"text":" ... Process Control Flow106/143 "},{"tags":[{"name":"paragraph"},{"name":"events","salience":1}],"text":" Exceptional events are "},{"tags":[{"name":"paragraph"},{"name":"types","salience":0.6507119536399841},{"name":"events","salience":0.34928804636001587}],"text":" Two types of exceptional events "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"process control flow107","salience":1}],"text":" ... Process Control Flow107/143 "},{"tags":[{"name":"paragraph"},{"name":"effect","salience":0.573721170425415},{"name":"exceptions","salience":0.28032588958740234},{"name":"control flow","salience":0.145952969789505}],"text":" Effect of exceptions/interrupts on control flow "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"process control flow108","salience":1}],"text":" ... Process Control Flow108/143 "},{"tags":[{"name":"paragraph"},{"name":"system calls","salience":0.6993156671524048},{"name":"exceptions","salience":0.1692907214164734},{"name":"traps","salience":0.13139362633228302}],"text":" System calls typically operate via exceptions (traps) "},{"tags":[{"name":"paragraph"},{"name":"difference","salience":0.7885791063308716},{"name":"system space","salience":0.11934556812047958},{"name":"mode","salience":0.09207533299922943}],"text":" Critical difference is transfer to system space (privileged mode) "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Signals109/143 "},{"tags":[{"name":"paragraph"},{"name":"signals","salience":0.768847644329071},{"name":"sources","salience":0.1407572478055954},{"name":"variety","salience":0.09039513766765594}],"text":" Signals can be generated from a variety of sources "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Signals110/143 "},{"tags":[{"name":"paragraph"},{"name":"signals","salience":0.7371235489845276},{"name":"process activity","salience":0.2628764510154724}],"text":" Signals from internal process activity, e.g. "},{"tags":[{"name":"paragraph"},{"name":"signals","salience":0.6738685369491577},{"name":"process events","salience":0.22087475657463074},{"name":"e.g.","salience":0.10525670647621155}],"text":" Signals from external process events, e.g. "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Signals111/143 "},{"tags":[{"name":"paragraph"},{"name":"processes","salience":0.8837491273880005},{"name":"signals","salience":0.11625086516141891}],"text":" Processes can choose to ignore most signals. "},{"tags":[{"name":"paragraph"},{"name":"signals","salience":0.6514027118682861},{"name":"ways","salience":0.34859731793403625}],"text":" If not ignored, signals can be handled in several default ways "},{"tags":[{"name":"paragraph"},{"name":"man","salience":0.40266525745391846},{"name":"signal","salience":0.2112581580877304},{"name":"signals","salience":0.13104578852653503},{"name":"details","salience":0.12586280703544617},{"name":"handling","salience":0.08900166302919388},{"name":"default","salience":0.04016631096601486}],"text":" See man 7 signal for details of signals and default handling. "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Signal Handlers112/143 "},{"tags":[{"name":"paragraph"},{"name":"handler","salience":0.5876874327659607},{"name":"function","salience":0.21545502543449402},{"name":"signal","salience":0.1257769763469696},{"name":"response","salience":0.07108055055141449}],"text":" Signal Handler = a function invoked in response to a signal "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"handlers113","salience":1}],"text":" ... Signal Handlers113/143 "},{"tags":[{"name":"paragraph"},{"name":"sigid","salience":0.5233769416809082},{"name":"sighnd","salience":0.29429787397384644},{"name":"int","salience":0.12705503404140472},{"name":"sighnd handler","salience":0.05527016147971153}],"text":" SigHnd signal(int SigID, SigHnd Handler) "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"handlers114","salience":1}],"text":" ... Signal Handlers114/143 "},{"tags":[{"name":"paragraph"},{"name":"signal handler function","salience":1}],"text":" How to define and install a signal handler function: "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Signal Handlers115/143 "},{"tags":[{"name":"paragraph"},{"name":"sigaction","salience":0.453431099653244},{"name":"sigid","salience":0.4014503061771393},{"name":"struct sigaction *newact","salience":0.08234034478664398},{"name":"sigaction *oldact","salience":0.06277826428413391}],"text":" int sigaction(int sigID, struct sigaction *newAct, struct sigaction *oldAct) "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"handlers116","salience":1}],"text":" ... Signal Handlers116/143 "},{"tags":[{"name":"paragraph"},{"name":"details","salience":0.7371235489845276},{"name":"sigaction","salience":0.2628764510154724}],"text":" Details on struct sigaction ... "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"handlers117","salience":1}],"text":" ... Signal Handlers117/143 "},{"tags":[{"name":"paragraph"},{"name":"details","salience":1}],"text":" Details on siginfo_t ... "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Interrupts118/143 "},{"tags":[{"name":"paragraph"},{"name":"signals","salience":1}],"text":" Interrupts are signals which "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Interrupts119/143 "},{"tags":[{"name":"paragraph"},{"name":"example","salience":0.7229015231132507},{"name":"process pre-emption","salience":0.27709847688674927}],"text":" Example (process pre-emption): "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Interrupts120/143 "},{"tags":[{"name":"paragraph"},{"name":"input/output","salience":1}],"text":" Interrupts are frequently associated with input/output "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Exceptions121/143 "},{"tags":[{"name":"paragraph"},{"name":"exceptions","salience":0.7791953682899475},{"name":"system ones","salience":0.2208046168088913}],"text":" Above exceptions are low-level, system ones. "},{"tags":[{"name":"paragraph"},{"name":"notion","salience":0.5934883952140808},{"name":"exceptions","salience":0.4065115749835968}],"text":" Alternative notion of exceptions: "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Exceptions122/143 "},{"tags":[{"name":"paragraph"},{"name":"exceptions","salience":0.7094624638557434},{"name":"context","salience":0.1635778844356537},{"name":"computation","salience":0.1269596517086029}],"text":" Such exceptions require handling in context of computation "},{"tags":[{"name":"paragraph"}],"text":" Example: "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"c","salience":0.7363327741622925},{"name":"exception handling","salience":0.2636672258377075}],"text":" C does not have generic exception handling; roll your own. "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Multi-tasking123/143 "},{"tags":[{"name":"paragraph"},{"name":"processes","salience":1}],"text":" Multi-tasking = multiple processes are \"active\" at the same time "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Process States124/143 "},{"tags":[{"name":"paragraph"},{"name":"process state changes","salience":0.7983086109161377},{"name":"execution","salience":0.20169135928153992}],"text":" How process state changes during execution ... "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Scheduling125/143 "},{"tags":[{"name":"paragraph"},{"name":"scheduling","salience":0.7833380699157715},{"name":"process","salience":0.21666191518306732}],"text":" Scheduling = selecting which process should run next "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Scheduling126/143 "},{"tags":[{"name":"paragraph"},{"name":"linux","salience":0.652805745601654},{"name":"process scheduler","salience":0.34719425439834595}],"text":" Linux process scheduler ... "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Scheduling127/143 "},{"tags":[{"name":"paragraph"},{"name":"view","salience":0.6507119536399841},{"name":"os scheduler","salience":0.34928804636001587}],"text":" Abstract view of the OS scheduler "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Device Management "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Device Management129/143 "},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" I/O Devices130/143 "},{"tags":[{"name":"paragraph"},{"name":"i/o","salience":0.8584428429603577},{"name":"devices","salience":0.14155717194080353}],"text":" Input/Output (I/O) devices "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"i/o devices131","salience":1}],"text":" ... I/O Devices131/143 "},{"tags":[{"name":"paragraph"},{"name":"characteristics","salience":0.5303553342819214},{"name":"hard disk","salience":0.4696446359157562}],"text":" Hard Disk characteristics: "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"cost","salience":0.6618804335594177},{"name":"latency","salience":0.21694540977478027},{"name":"ms transfer","salience":0.1211741641163826}],"text":" Typical cost: 10ms seek + 5ms latency + 0.1ms transfer "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"i/o devices132","salience":1}],"text":" ... I/O Devices132/143 "},{"tags":[{"name":"paragraph"},{"name":"solid state disk","salience":0.47944286465644836},{"name":"characteristics","salience":0.18107667565345764}],"text":" Solid State Disk (SSD) characteristics: "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"i/o devices133","salience":1}],"text":" ... I/O Devices133/143 "},{"tags":[{"name":"paragraph"},{"name":"example","salience":0.8837491273880005},{"name":"network transfer","salience":0.11625086516141891}],"text":" Example: network transfer "},{"tags":[{"name":"paragraph"},{"name":"transmission","salience":0.6482549905776978},{"name":"ping command","salience":0.35174500942230225}],"text":" Can check transmission times using the ping command "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"i/o devices134","salience":1}],"text":" ... I/O Devices134/143 "},{"tags":[{"name":"paragraph"},{"name":"types","salience":0.5934883952140808},{"name":"devices","salience":0.4065115749835968}],"text":" Other types of devices ... "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Device Drivers135/143 "},{"tags":[{"name":"paragraph"},{"name":"type","salience":0.7513734102249146},{"name":"device","salience":0.16395433247089386},{"name":"access protocol","salience":0.08467224985361099}],"text":" Each type of device has its own unique access protocol "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Memory-mapped I/O136/143 "},{"tags":[{"name":"paragraph"}],"text":" Memory-mapped input/output "},{"tags":[{"name":"paragraph"},{"name":"cf","salience":0.6866637468338013},{"name":"instructions","salience":0.11644653230905533},{"name":"set","salience":0.11509478092193604},{"name":"i/o devices","salience":0.08179492503404617}],"text":" (cf. having limited set of special instructions to manipulate i/o devices) "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"i","salience":0.7606350779533386},{"name":"o137","salience":0.23936492204666138}],"text":" ... Memory-mapped I/O137/143 "},{"tags":[{"name":"paragraph"},{"name":"example","salience":0.8504547476768494},{"name":"i/o","salience":0.14954525232315063}],"text":" Example of using memory-mapped I/O. "},{"tags":[{"name":"paragraph"},{"name":"memory address","salience":0.5934883952140808},{"name":"disk device","salience":0.4065115749835968}],"text":" Assume memory address of disk device is 0x80000200 "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"transfers data","salience":0.5320023894309998},{"name":"memory","salience":0.17611274123191833},{"name":"disk","salience":0.16476689279079437},{"name":"block","salience":0.12711797654628754}],"text":" Transfers data from memory onto the disk at specified block. "},{"tags":[{"name":"paragraph"},{"name":"disclaimer","salience":0.44682928919792175},{"name":"code","salience":0.2655790150165558},{"name":"spim","salience":0.13288819789886475},{"name":"mips","salience":0.08806311339139938},{"name":"code","salience":0.06664038449525833}],"text":" Disclaimer: Above code is not real MIPS/SPIM code. Illustrative only. "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"devices","salience":0.7034812569618225},{"name":"unix","salience":0.15331582725048065},{"name":"linux138","salience":0.14320293068885803}],"text":" Devices on Unix/Linux138/143 "},{"tags":[{"name":"paragraph"},{"name":"unix","salience":0.3994970917701721},{"name":"devices","salience":0.27638566493988037},{"name":"byte-streams","salience":0.1829618364572525},{"name":"files","salience":0.141155406832695}],"text":" Unix treats devices uniformly as byte-streams (like files). "},{"tags":[{"name":"paragraph"},{"name":"devices","salience":0.6320440173149109},{"name":"file system","salience":0.2071658819913864},{"name":"dev","salience":0.16079013049602509}],"text":" Devices can be accessed via the file system under /dev, e.g. "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"devices","salience":0.7375666499137878},{"name":"unix","salience":0.13587795197963715},{"name":"linux139","salience":0.1265554130077362}],"text":" ... Devices on Unix/Linux139/143 "},{"tags":[{"name":"paragraph"},{"name":"types","salience":0.7983086109161377},{"name":"device files","salience":0.20169135928153992}],"text":" Two standard types of \"device files\" ... "},{"tags":[{"name":"paragraph"},{"name":"character devices","salience":0.6609309315681458},{"name":"character","salience":0.2613619267940521},{"name":"files","salience":0.07770713418722153}],"text":" Character devices (aka character special files) "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"devices","salience":0.7375666499137878},{"name":"unix","salience":0.13587795197963715},{"name":"linux140","salience":0.1265554130077362}],"text":" ... Devices on Unix/Linux140/143 "},{"tags":[{"name":"paragraph"},{"name":"filedesc","salience":0.862794816493988},{"name":"request","salience":0.05888449400663376},{"name":"arg","salience":0.04481304809451103},{"name":"void","salience":0.03350762277841568}],"text":" int ioctl(int FileDesc, int Request, void *Arg) "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"},{"name":"devices","salience":0.7375666499137878},{"name":"unix","salience":0.13587795197963715},{"name":"linux141","salience":0.1265554130077362}],"text":" ... Devices on Unix/Linux141/143 "},{"tags":[{"name":"paragraph"},{"name":"devices","salience":0.7815695405006409},{"name":"write","salience":0.21843047440052032}],"text":" Devices can be manipulated by open(), read(), write() ... "},{"tags":[{"name":"paragraph"},{"name":"int","salience":0.5737122893333435},{"name":"pathname","salience":0.17587295174598694},{"name":"char","salience":0.17394012212753296},{"name":"flags","salience":0.07647465914487839}],"text":" int open(char *PathName, int Flags) "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Buffered I/O142/143 "},{"tags":[{"name":"paragraph"},{"name":"devices","salience":0.8292761445045471},{"name":"cpu speed","salience":0.17072387039661407}],"text":" Devices are typically very slow compared to CPU speed "},{"tags":[{"name":"paragraph"},{"name":"read","salience":0.45882341265678406},{"name":"device","salience":0.30469220876693726},{"name":"byte","salience":0.23648440837860107}],"text":" Using a read() from a device for each byte is inefficient "},{"tags":[{"name":"paragraph"},{"name":"read","salience":0.48887550830841064},{"name":"data","salience":0.3279494047164917},{"name":"os buffers","salience":0.18317508697509766}],"text":" Note that read() accesses data via the OS buffers "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" ... Buffered I/O143/143 "},{"tags":[{"name":"paragraph"},{"name":"i/o library","salience":0.6801586151123047},{"name":"i/o","salience":0.3198414146900177}],"text":" The standard i/o library (stdio.h) provides buffered i/o "},{"tags":[{"name":"paragraph"}],"text":""},{"tags":[{"name":"paragraph"}],"text":" Produced: 29 Apr 2018 "}]}