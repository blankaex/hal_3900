{"allTables":[{"tableRows":[{"text":"Computer Systems Architecture1/21"}]},{"tableRows":[{"text":"Evolution of Operating Systems (OSs)2/21"}]},{"tableRows":[{"text":"... Evolution of Operating Systems (OSs)3/21"}]},{"tableRows":[{"text":"... Evolution of Operating Systems (OSs)4/21"}]},{"tableRows":[{"text":"Operating Systems5/21"}]},{"tableRows":[{"text":"... Operating Systems6/21"}]},{"tableRows":[{"text":"... Operating Systems7/21"}]},{"tableRows":[{"text":"... Operating Systems8/21"}]},{"tableRows":[{"text":"... Operating Systems9/21"}]},{"tableRows":[{"text":"... Operating Systems10/21"}]},{"tableRows":[{"text":"System Calls11/21"}]},{"tableRows":[{"text":"... System Calls12/21"}]},{"tableRows":[{"text":"Libraries13/21"}]},{"tableRows":[{"text":"... Libraries14/21"}]},{"tableRows":[{"text":"Applications15/21"}]},{"tableRows":[{"text":"... Applications16/21"}]},{"tableRows":[{"text":"... Applications17/21"}]},{"tableRows":[{"text":"... Applications18/21"}]},{"tableRows":[{"text":"... Applications19/21"}]},{"tableRows":[{"text":"... Applications20/21"}]},{"tableRows":[{"text":"Roadmap21/21"}]}],"allParagraphs":[{"text":"D: Computer Systems Architecture"},{"text":" "},{"text":""},{"text":" Computer Systems Architecture1/21 "},{"text":" "},{"text":""},{"text":" "},{"text":""},{"text":" Evolution of Operating Systems (OSs)2/21 "},{"text":" 1940's (e.g. ENIAC) "},{"text":""},{"text":" ... Evolution of Operating Systems (OSs)3/21 "},{"text":" 1970's (e.g. PDP-11) "},{"text":""},{"text":" ... Evolution of Operating Systems (OSs)4/21 "},{"text":" 1980's - present "},{"text":""},{"text":" Operating Systems5/21 "},{"text":" Modern computer: devices connected via a system bus ... "},{"text":" "},{"text":""},{"text":" "},{"text":""},{"text":" ... Operating Systems6/21 "},{"text":" Operating systems (OSs) "},{"text":""},{"text":" ... Operating Systems7/21 "},{"text":" Some different flavours of OSs ... "},{"text":""},{"text":" ... Operating Systems8/21 "},{"text":" Abstractions provided by modern OSs "},{"text":""},{"text":" ... Operating Systems9/21 "},{"text":" "},{"text":""},{"text":" "},{"text":""},{"text":" ... Operating Systems10/21 "},{"text":" Critical to OS development: execution modes "},{"text":" CPUs can typically run in two modes: "},{"text":""},{"text":" System Calls11/21 "},{"text":" SPIM has no OS, but provides a simple set of \"system calls\" "},{"text":""},{"text":" ... System Calls12/21 "},{"text":" "},{"text":""},{"text":" "},{"text":""},{"text":" Libraries13/21 "},{"text":" User programs can request services via system calls "},{"text":""},{"text":" ... Libraries14/21 "},{"text":" "},{"text":""},{"text":" "},{"text":""},{"text":" Applications15/21 "},{"text":" User-level programs which perform some useful task "},{"text":" Applications are generally built using libraries "},{"text":""},{"text":" ... Applications16/21 "},{"text":" "},{"text":""},{"text":" "},{"text":""},{"text":" ... Applications17/21 "},{"text":" System calls are invoked ... "},{"text":""},{"text":" ... Applications18/21 "},{"text":" System calls attempt to perform actions, but may fail "},{"text":" User programs can detect this in several ways "},{"text":""},{"text":" ... Applications19/21 "},{"text":" Action in response to failed system call is often e.g. "},{"text":""},{"text":" Can give more precise feedback via library functions, e.g. "},{"text":""},{"text":" ... Applications20/21 "},{"text":" Linux library function to make it easy to report errors and exit "},{"text":""},{"text":" vs "},{"text":""},{"text":" "},{"text":""},{"text":" Roadmap21/21 "},{"text":" Following sections consider OS modules: "},{"text":""},{"text":" Produced: 8 Apr 2018 "}],"allLists":[{"type":"list"}," no OS ... one program at a time, manually loaded ",{"type":"list"}," programs had to take account of details of machine/devices ",{"type":"list"}," batch processing ... load several programs at once, run in sequence ",{"type":"list"}," programs had to take account of details of machine/devices ",{"type":"list"}," computers proliferate ... programmers want to transport code ",{"type":"list"}," having to cope with different config on each machine was tedious ",{"type":"list"}," solution: layer of software between raw machine and user programs ",{"type":"list"}," computers become smaller and faster (but still fridge-size) ",{"type":"list"}," complexity of 1960's OSs drove Bell Labs researchers to develop a small OS core, written mostly in HLL with a set of simple tools and ways of combining them led to the Unix programming environment ",{"type":"list"}," develop a small OS core, written mostly in HLL ",{"type":"list"}," with a set of simple tools and ways of combining them ",{"type":"list"}," led to the Unix programming environment ",{"type":"list"}," writing OS core in HLL made it portable same OS environment provided on many different machines ",{"type":"list"}," same OS environment provided on many different machines ",{"type":"list"}," Unix and variants ported to wide variety of architectures BSD, SysV, Linux, OS X, Android all based on Unix approach ",{"type":"list"}," BSD, SysV, Linux, OS X, Android all based on Unix approach ",{"type":"list"}," developments in hardware/software led to more OS services databases, O-O programming, GUI interfaces, games networking, multi-CPU systems, mobile devices, etc. ",{"type":"list"}," databases, O-O programming, GUI interfaces, games ",{"type":"list"}," networking, multi-CPU systems, mobile devices, etc. ",{"type":"list"}," embedded systems, phones, workstations, servers, ... ",{"type":"list"}," provide an abstraction layer on top of hardware ",{"type":"list"}," i.e. same view available regardless of underlying hardware ",{"type":"list"}," have privileged access to the raw machine ",{"type":"list"}," manage use of machine resources (CPU, disk, memory, etc.) ",{"type":"list"}," provide uniform interface to access machine-level operations ",{"type":"list"}," arrange for controlled execution of user programs ",{"type":"list"}," provide multi-tasking and (pseudo) parallelism ",{"type":"list"}," batch (e.g. Eniac, early IBM OSs) computational jobs run one-at-a-time via a queue ",{"type":"list"}," computational jobs run one-at-a-time via a queue ",{"type":"list"}," multi-user (e.g. Multics, Unix/Linux, OSX, Windows) mulitple jobs (appear to) run in parallel ",{"type":"list"}," mulitple jobs (appear to) run in parallel ",{"type":"list"}," embedded (e.g. Android, iOS, ...) small(ish), cut-down OS embedded in a device ",{"type":"list"}," small(ish), cut-down OS embedded in a device ",{"type":"list"}," real-time (e.g. RTLinux, DuinOS, ...) specialised OS with time guarantees on job completion ",{"type":"list"}," specialised OS with time guarantees on job completion ",{"type":"list"}," users ... who can access (login to) the system ",{"type":"list"}," access rights ... what users are allowed to do ",{"type":"list"}," file system ... how data is organised on storage devices ",{"type":"list"}," input/output ... transferring data to/from devices ",{"type":"list"}," processes ... active \"computational entities\" on the system ",{"type":"list"}," communication ... how processes interact ",{"type":"list"}," networking ... how the system talks to other systems ",{"type":"list"}," privileged mode full access to all machine operations and memory regions ",{"type":"list"}," full access to all machine operations and memory regions ",{"type":"list"}," non-privileged (user) mode a limited set of operations (but still Turing complete) access to only part of the memory ",{"type":"list"}," a limited set of operations (but still Turing complete) ",{"type":"list"}," access to only part of the memory ",{"type":"list"}," to cross the privileged/user boundary ",{"type":"list"}," in a controlled manner, via well-defined requests ",{"type":"list"}," primarily for i/o (read/write) on various types ",{"type":"list"}," also memory allocation and process exit ",{"type":"list"}," process management (e.g. fork(), exec(), _exit(), ...) ",{"type":"list"}," file management (e.g. open(), read(), fstat(), ...) ",{"type":"list"}," device management (e.g. ioctl(), ...) ",{"type":"list"}," information maintenance (e.g. settimeofday(), getuid(), ...) ",{"type":"list"}," communication (e.g. pipe(), connect(), send(), ...) ",{"type":"list"}," but system calls provide relatively low-level operations ",{"type":"list"}," collections of useful functions ",{"type":"list"}," referenced from within user programs as C functions ",{"type":"list"}," defined by #include <xxx.h> ",{"type":"list"}," integrated with user code at \"link time\" ",{"type":"list"}," stdio.h ... text-oriented, formatted input/output ",{"type":"list"}," stdlib.h ... wide range of functions, e.g. rand(), malloc() ",{"type":"list"}," possibly supplied with system e.g. ls, vim, gcc ",{"type":"list"}," possibly implemented by users e.g. dcc, check, Webcms3 ",{"type":"list"}," but may also make direct use of system calls ",{"type":"list"}," that runs as a user-level process (not privileged) ",{"type":"list"}," but can invoke other user-level processes ",{"type":"list"}," directly, through a library of system calls documented in Unix Programmers Manual section 2 (e.g. man 2 open) ",{"type":"list"}," documented in Unix Programmers Manual section 2 (e.g. man 2 open) ",{"type":"list"}," indirectly, through functions in the C libraries documented in Unix Programmers Manual section 3 (e.g. man 3 fopen) ",{"type":"list"}," documented in Unix Programmers Manual section 3 (e.g. man 3 fopen) ",{"type":"list"}," file descriptors, open(), close(), read(), write() (via #include <unistd.h>) ",{"type":"list"}," file pointers (FILE*), fopen(), fclose, scanf(), printf() (via #include <stdio.h>) ",{"type":"list"}," check return value of sys call function (-1 typically flags an error) ",{"type":"list"}," check global variable errno (contains specific error) ",{"type":"list"}," unlike other languages, C provides no exception handling ",{"type":"list"}," unless the sysetm call has a result value (e.g. #bytes read) ",{"type":"list"}," void perror(char *Message) ",{"type":"list"}," if Message not NULL, write to stderr ",{"type":"list"}," write standard message corresponding to errno ",{"type":"list"}," error(Status, ErrNum, Format, Expressions, ...) ",{"type":"list"}," print error message using prog name, Format and Expressions ",{"type":"list"}," if Status is non-zero, invoke exit(Status) after printing message ",{"type":"list"}," if ErrNum is non-zero, also print standard system error message ",{"type":"list"}," storage management disk storage, filesystems, Unix file system interface ",{"type":"list"}," disk storage, filesystems, Unix file system interface ",{"type":"list"}," memory management RAM, physical/virtual/process memory space, page faults ",{"type":"list"}," RAM, physical/virtual/process memory space, page faults ",{"type":"list"}," process management creating processes, process hierarchy, signals ",{"type":"list"}," creating processes, process hierarchy, signals ",{"type":"list"}," device management control registers, data transfer, interrupts ",{"type":"list"}," control registers, data transfer, interrupts "]}