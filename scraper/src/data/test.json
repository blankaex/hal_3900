{"object":{"grouped":[{"tags":["table"],"items":[{"text":" COMP1521 18s2 Assignment 1 Scrolling Text Computer System Fundamentals "}]},{"tags":["table","Admin"],"items":[{"text":"Marks9 (towards total course mark)"},{"text":"Group?This assignment is completed individually"},{"text":"Dueby 11:59:59pm on Sunday 2nd September"},{"text":"Submitgive cs1521 assign1 scroll.s or via Webcms "},{"text":"LatePenalty0.08 marks per hour late (approx 1.9 marks per day) off the ceiling(e.g. if you are 36 hours late, your maximum possible mark is 6.1)"},{"text":"Assessment For a guide to style, use the code in the lectures and tute solutions, and the supplied code. 5 marks for auto-testing on a range of input strings 2 marks for commenting the code; you don't need a comment on every line, but roughly one comment on each block of MIPS instructions that corresponds to a C statement 2 marks for readable code; sensible names, lining up the opcodes and the args consistently If your assembly code has syntax errors (according to spim) or run-time errors on all test cases, your auto-testing mark is capped at 3/7, depending on an assessment by your tutor. "},{"text":" 5 marks for auto-testing on a range of input strings "},{"text":" 2 marks for commenting the code; you don't need a comment on every line, but roughly one comment on each block of MIPS instructions that corresponds to a C statement "},{"text":" 2 marks for readable code; sensible names, lining up the opcodes and the args consistently "}]},{"tags":["table"],"items":[{"text":" 5 marks for auto-testing on a range of input strings "},{"text":" 2 marks for commenting the code; you don't need a comment on every line, but roughly one comment on each block of MIPS instructions that corresponds to a C statement "},{"text":" 2 marks for readable code; sensible names, lining up the opcodes and the args consistently "}]},{"tags":["table"],"items":[{"text":"main Partly complete, including the epilogue and prologue, and the command-line argument checking. "},{"text":"setUpDisplay Function prologue and epilogue ok. ToDo: function body. "},{"text":"showDisplay Function prologue and epilogue ok. ToDo: function body. "},{"text":"delay Already complete, but you can tweak the numbers if you want, to speed up or slow down the animation. "},{"text":"isUpper ToDo: function prologue and epilogue, and function body. "},{"text":"isLower Already complete (and makes isUpper very easy). "}]},{"tags":["list","Objectives"],"items":[{"text":" to give you experience writing MIPS assembly code "},{"text":" to give you experience with functions in MIPS "},{"text":" to give you experience with data and control structures in MIPS "}]},{"tags":["list"],"items":[{"text":" check the command-line argument (< 100 chars, only letters and spaces) "},{"text":" create a buffer containing big versions of the characters in argv[1] "},{"text":" add part of the content of the big-char buffer into the display buffer, starting at starting_pos "},{"text":" write the contents of the display buffer to standard output "},{"text":" repeat, moving one column to the left each time, until the message scrolls of the left of the display "}]},{"tags":["list"],"items":[{"text":" theString[100] holds a copy of the string from argv[1] "},{"text":" bigString[9][1000] holds a copy of theString in big characters and with one column of space between adjacent big characters "},{"text":" display[9][80] is where characters are placed before being written out to the screen"},{"text":" all_chars[52*9*9] array containing representation of 'A'-'Z' and 'a'-'z' as big chars (not shown in the diagram; defined in the chars.s file) "}]},{"tags":["list"],"items":[{"text":" indicate which registers the function uses "},{"text":" indicate which registers the function overwrites (clobbers) "},{"text":" give a mapping between local variables in the C code and registers in MIPS "}]},{"tags":["list","Errata"],"items":[{"text":"2018-08-19 14:30 (revision 1.5) in revision 1.3, one instance of ch was not moved. in all epilogues except delay, $sp was reloaded with LW, not LA. "},{"text":"in revision 1.3, one instance of ch was not moved."},{"text":"in all epilogues except delay, $sp was reloaded with LW, not LA."},{"text":"2018-08-18 18:50 (revision 1.4) in main, translation of break directive was incorrect at main_ch_ok+3; blt used instead of bge. "},{"text":"in main, translation of break directive was incorrect at main_ch_ok+3; blt used instead of bge."},{"text":"2018-08-18 17:20 (revision 1.3) in main, variable ch moved from register $t0 to $s2, with corresponding changes to stack frame. in main, logic of calls to isUpper, isLower, and comparison with space was corrected. "},{"text":"in main, variable ch moved from register $t0 to $s2, with corresponding changes to stack frame."},{"text":"in main, logic of calls to isUpper, isLower, and comparison with space was corrected."},{"text":"2018-08-18 08:50 (revision 1.2) in main, argument load was done with LA not LW. "},{"text":"in main, argument load was done with LA not LW."}]},{"tags":["list"],"items":[{"text":"in revision 1.3, one instance of ch was not moved."},{"text":"in all epilogues except delay, $sp was reloaded with LW, not LA."}]},{"tags":["list"],"items":[{"text":"in main, translation of break directive was incorrect at main_ch_ok+3; blt used instead of bge."}]},{"tags":["list"],"items":[{"text":"in main, variable ch moved from register $t0 to $s2, with corresponding changes to stack frame."},{"text":"in main, logic of calls to isUpper, isLower, and comparison with space was corrected."}]},{"tags":["list"],"items":[{"text":"in main, argument load was done with LA not LW."}]},{"tags":["list"],"items":[{"text":" Make the scroll repeat. If you wait until the whole message scrolls off the left hand end, this is easy. Make it do a \"continuous scroll\", where the message starts repeating from the right before when the end of the right-hand end of the message has moved 10 columns from the right-hand end of the display. "},{"text":" Change the colours of the '#' characters as they scroll. Make the colour change as aesthetically pleasing as possible. "}]}],"block":[{"tags":["paragraph","Background"],"text":" A common sight in shops is a grid of LEDs where text scrolls across the grid, something like ... "},{"tags":["paragraph"],"text":" The aim of this assignment is to complete a MIPS program that can scroll alphabetic text strings like the above video. "},{"tags":["paragraph","Setting Up"],"text":" Create a private directory for doing the assignment, and put the assignment files in it by running the following command: "},{"tags":["paragraph"],"text":" If you're working on this at home, download the ZIP file and create the files on your home machine. It's fine to work on your own machine but remember to always test your code on the CSE machines before submitting. "},{"tags":["paragraph"],"text":" The above command will create the following files: "},{"tags":["paragraph"],"text":" A file to control compilation of scroll.c. It is not critical for the MIPS assembler part: it creates the executable C program to give you an exemplar, and can produce the exe.s file. "},{"tags":["paragraph"],"text":" A complete solution, written in C. Your goal is to write a MIPS assembler program to copy the behaviour of this program. "},{"tags":["paragraph"],"text":" The array of big characters used in producing the scrolling text. This is #include'd in scroll.c. "},{"tags":["paragraph"],"text":" A partly complete solution to the assignment, written in MIPS assembler. "},{"tags":["paragraph"],"text":" A MIPS version of the array of big characters used in producing the scrolling text. This file requires no modification. "},{"tags":["paragraph"],"text":" Initially, it would be worth compiling the C program and running it on some examples to get a feel for its behaviour. The compiled C program, called scroll, expects a single command-line argument: the text string to be scrolled. "},{"tags":["paragraph"],"text":" You can compile and run the C program (scroll) as follows: "},{"tags":["paragraph","The Program"],"text":" What the scrolling program should do, whether implemented in MIPS or C: "},{"tags":["paragraph"],"text":" Both the C and the MIPS programs are structured the same, with a main function to handle the command-line arguments and then run the scrolling. The programs also have the same set of lower-level functions. In scroll.c, there are comments describing the purpose of each function and the code is hopefully clear enough that you can understand how each function works. "},{"tags":["paragraph"],"text":" The diagram below shows the major data structures used by the programs: "},{"tags":["paragraph","Exercise"],"text":" The aim of this exercise is to complete the supplied MIPS program skeleton (in the file scroll.s) to behave exactly like the C program (in scroll.c). You should not change the chars.s file; treat its contents as a read-only data structure. "},{"tags":["paragraph"],"text":" In scroll.s each function has comments to: "},{"tags":["paragraph"],"text":" Note that these are suggestions only; you can use whatever registers you like, provided that you save and restore any $s? registers that you overwrite in the function code. And, of course, provided that the code behaves the same as the C code. "},{"tags":["paragraph"],"text":" To save you some time, we have included function prologues and epilogues in some functions. These save and restore registers $fp, $ra, and any $s? registers that the function happens to use, and also maintain the stack. You can use these as templates for how to implement the prologue and epilogue in the functions that do not provide them. "},{"tags":["paragraph"],"text":" Some of the functions from scroll.s are already implemented, but others require you to write MIPS assembler for them. Here's a rundown of the functions in scroll.s and their status: "},{"tags":["paragraph","Running the program"],"text":" Note that scroll.s is not stand-alone MIPS program; it requires access to the all_chars[] array in the file chars.s. In order to run the program (either via spim or qtspim), you'll need to combine the two files. Here's an example of you might run the program using spim: "},{"tags":["paragraph"],"text":" The file exe.s is a complete program that can be loaded into qtspim as well. You will need to do the cat step each time you change the scroll.s file and want to test it. The Makefile knows how to create this file too. "},{"tags":["paragraph","Challenges"],"text":"(Worth kudos, but no marks)"},{"tags":["paragraph"],"text":" Make the scroll repeat. If you wait until the whole message scrolls off the left hand end, this is easy. Make it do a \"continuous scroll\", where the message starts repeating from the right before when the end of the right-hand end of the message has moved 10 columns from the right-hand end of the display. "},{"tags":["paragraph"],"text":" Change the colours of the '#' characters as they scroll. Make the colour change as aesthetically pleasing as possible. "},{"tags":["paragraph","Submission"],"text":" You just need to submit the scroll.s file. You can do this either through Webcms3 or using give. You must submit your work before midnight on Sunday 2nd September. "},{"tags":["paragraph"],"text":" Have fun, jas "}]}}