{"allTables":[{"tableRows":[{"text":"Course Introduction"}]},{"tableRows":[{"text":"COMP1521 18s1Computer Systems Fundamentals2/74"}]},{"tableRows":[{"text":"Course Staff3/74"}]},{"tableRows":[{"text":"COMP1521 on the Web4/74"}]},{"tableRows":[{"text":"... COMP1521 on the Web5/74"}]},{"tableRows":[{"text":"Me6/74"}]},{"tableRows":[{"text":"You7/74"}]},{"tableRows":[{"text":"Course Goals8/74"}]},{"tableRows":[{"text":"Course Context9/74"}]},{"tableRows":[{"text":"Themes10/74"}]},{"tableRows":[{"text":"Detailed Topics11/74"}]},{"tableRows":[{"text":"Textbook12/74"}]},{"tableRows":[{"text":"... Textbook13/74"}]},{"tableRows":[{"text":" Recommended reference ... Computer Systems: A Programmer's Perspective, Bryant and O'Halloren covers most topics, and quite well but uses a different machine code Available in UNSW Bookroom "}]},{"tableRows":[]},{"tableRows":[{"text":"Books vs Notes vs Slides14/74"}]},{"tableRows":[{"text":"Systems and Tools15/74"}]},{"tableRows":[{"text":"Classes16/74"}]},{"tableRows":[{"text":"... Classes17/74"}]},{"tableRows":[{"text":"Assessments18/74"}]},{"tableRows":[{"text":"... Assessments19/74"}]},{"tableRows":[{"text":"Quizzes20/74"}]},{"tableRows":[{"text":"Blogs21/74"}]},{"tableRows":[{"text":"Misconduct22/74"}]},{"tableRows":[{"text":"Final Exam23/74"}]},{"tableRows":[{"text":"Course Assessment24/74"}]},{"tableRows":[{"text":"Supplementary Exams25/74"}]},{"tableRows":[{"text":"Summary26/74"}]},{"tableRows":[{"text":"Computer Systems"}]},{"tableRows":[{"text":"Some History28/74"}]},{"tableRows":[{"text":"... Some History29/74"}]},{"tableRows":[{"text":"... Some History30/74"}]},{"tableRows":[{"text":"Computer Systems31/74"}]},{"tableRows":[{"text":"Processor32/74"}]},{"tableRows":[{"text":"Storage33/74"}]},{"tableRows":[{"text":"... Storage34/74"}]},{"tableRows":[{"text":"Computer System Layers35/74"}]},{"tableRows":[{"text":"C Program Life-cycle36/74"}]},{"tableRows":[{"text":"... C Program Life-cycle37/74"}]},{"tableRows":[{"text":"History of C Compilers38/74"}]},{"tableRows":[{"text":"C Revisited"}]},{"tableRows":[{"text":"What (I assume) You Know40/74"}]},{"tableRows":[{"text":"Type Definitions41/74"}]},{"tableRows":[{"text":"Assignment as Expression42/74"}]},{"tableRows":[{"text":"... Assignment as Expression43/74"}]},{"tableRows":[{"text":"Ignoring Expression Results44/74"}]},{"tableRows":[{"text":"... Ignoring Expression Results45/74"}]},{"tableRows":[{"text":"Fine Control46/74"}]},{"tableRows":[{"text":"... Fine Control47/74"}]},{"tableRows":[{"text":"Fine Function Control48/74"}]},{"tableRows":[{"text":"Fine Program Control49/74"}]},{"tableRows":[{"text":"Stacks, Queues, PriorityQs50/74"}]},{"tableRows":[{"text":"... Stacks, Queues, PriorityQs51/74"}]},{"tableRows":[{"text":"... Stacks, Queues, PriorityQs52/74"}]},{"tableRows":[{"text":"Example Stack/Queue/PriorityQ Usage53/74"}]},{"tableRows":[{"text":"... Example Stack/Queue/PriorityQ Usage54/74"}]},{"tableRows":[{"text":"... Example Stack/Queue/PriorityQ Usage55/74"}]},{"tableRows":[{"text":"... Example Stack/Queue/PriorityQ Usage56/74"}]},{"tableRows":[{"text":"... Example Stack/Queue/PriorityQ Usage57/74"}]},{"tableRows":[{"text":"... Example Stack/Queue/PriorityQ Usage58/74"}]},{"tableRows":[{"text":"... Example Stack/Queue/PriorityQ Usage59/74"}]},{"tableRows":[{"text":"Stack Data Structure60/74"}]},{"tableRows":[{"text":"Example Stack Client61/74"}]},{"tableRows":[{"text":"Queue Data Structure62/74"}]},{"tableRows":[{"text":"Priority Queue Data Structure63/74"}]},{"tableRows":[{"text":"Bit Manipulation"}]},{"tableRows":[{"text":"Bits in Bytes in Words65/74"}]},{"tableRows":[{"text":"Binary Constants66/74"}]},{"tableRows":[{"text":"Bitwise AND67/74"}]},{"tableRows":[{"text":"Bitwise OR68/74"}]},{"tableRows":[{"text":"Flag-bits69/74"}]},{"tableRows":[{"text":"... Flag-bits70/74"}]},{"tableRows":[{"text":"Bitwise XOR71/74"}]},{"tableRows":[{"text":"Bitwise NEG72/74"}]},{"tableRows":[{"text":"Left Shift73/74"}]},{"tableRows":[{"text":"Right Shift74/74"}]}],"allParagraphs":[{"text":"A: Introduction, C Language"},{"text":" "},{"text":""},{"text":" Course Introduction "},{"text":" "},{"text":""},{"text":" COMP1521 18s1Computer Systems Fundamentals2/74 "},{"text":" "},{"text":""},{"text":" "},{"text":""},{"text":" Course Staff3/74 "},{"text":" The Cast (of thousands): "},{"text":""},{"text":" COMP1521 on the Web4/74 "},{"text":" Primary entry point is Webcms3 "},{"text":" http://webcms3.cse.unsw.edu.au/COMP1521/18s1/ "},{"text":" Most of the content lives under "},{"text":" /home/cs1521/web/18s1/... (e.g.lecs,labs,tutes,...) "},{"text":" Most content is web-accessible via "},{"text":" http://cgi.cse.unsw.edu.au/~cs1521/18s1/index.php "},{"text":""},{"text":" ... COMP1521 on the Web5/74 "},{"text":" Most material on Webcms3 is publically readable. "},{"text":" Login to Webcms3 is via zID/zPass, and is needed for "},{"text":" Check marks via sturec (on cmd line or via Webcms3) "},{"text":" "},{"text":" For questions: use Webcms3 forum or email cs1521@cse "},{"text":""},{"text":" Me6/74 "},{"text":" Research: "},{"text":""},{"text":" You7/74 "},{"text":" Students in this course have completed: "},{"text":" COMP1511/1917 also studied linked lists, ADTs and sorting "},{"text":" Since not everyone has seen these, we won't use them "},{"text":" For this week ... "},{"text":""},{"text":" Course Goals8/74 "},{"text":" COMP1511/1911/1917 ... "},{"text":""},{"text":" Course Context9/74 "},{"text":" "},{"text":""},{"text":" "},{"text":""},{"text":" Themes10/74 "},{"text":" Major themes ... "},{"text":""},{"text":" Detailed Topics11/74 "},{"text":" "},{"text":""},{"text":" Textbook12/74 "},{"text":" There is no prescribed textbook "},{"text":" Material has been drawn from: "},{"text":""},{"text":" ... Textbook13/74 "},{"text":" Recommended reference ... Computer Systems: A Programmer's Perspective, Bryant and O'Halloren covers most topics, and quite well but uses a different machine code Available in UNSW Bookroom Books vs Notes vs Slides14/74 "},{"text":""},{"text":" "},{"text":" Textbooks ... "},{"text":""},{"text":" Systems and Tools15/74 "},{"text":" Prac work based on Linux tools "},{"text":" Assembly language: MIPS on QtSpim (also xspim in CSE) "},{"text":" Use your own favourite text editor ( I use vim ) "},{"text":" Other tools: make, gdb, man, bc -l "},{"text":" Learn to love the shell and command-line ... very useful "},{"text":""},{"text":" Classes16/74 "},{"text":" Lectures ... "},{"text":""},{"text":" ... Classes17/74 "},{"text":" Public Holidays: Friday Week 5, Wednesday Week 8 "},{"text":" Fortunately, public holidays don't clobber lecture slots "},{"text":" BUT if you have tute/lab on Friday or Wednesday "},{"text":""},{"text":" Assessments18/74 "},{"text":" Lab exercises contribute 10% to overall mark. "},{"text":" Ideally, the lab exercise for Week X must be "},{"text":" Exceptionally good submissions can get bonus (A+) "},{"text":" Total mark for labs can be > 10 (capped at 11). "},{"text":""},{"text":" ... Assessments19/74 "},{"text":" Two assignments ... "},{"text":" Good time management avoids late penalties "},{"text":""},{"text":" Quizzes20/74 "},{"text":" Five small online quizzes ... "},{"text":" Starting this week ... C revision quiz "},{"text":" Then in weeks 2, 4, 6, 8, 10 "},{"text":" Each quiz due before Sunday 11:59pm at end of week "},{"text":""},{"text":" Blogs21/74 "},{"text":" Keep a blog about what you're learning "},{"text":""},{"text":" Misconduct22/74 "},{"text":" "},{"text":""},{"text":" "},{"text":""},{"text":" Final Exam23/74 "},{"text":" 3-hour on-line torture exam during the exam period. "},{"text":" Held in CSE labs (must know lab environment) "},{"text":" On-line documentation available in exam: "},{"text":""},{"text":" Course Assessment24/74 "},{"text":" "},{"text":""},{"text":" Supplementary Exams25/74 "},{"text":" Supplementary Exams are available to students who "},{"text":""},{"text":" Summary26/74 "},{"text":" The goal is for you to become a better programmer "},{"text":""},{"text":" Computer Systems "},{"text":" "},{"text":""},{"text":" Some History28/74 "},{"text":" A potted history of \"computer systems\" ... "},{"text":""},{"text":" ... Some History29/74 "},{"text":" ENIAC ... "},{"text":" "},{"text":""},{"text":" "},{"text":""},{"text":" ... Some History30/74 "},{"text":" Whirlwind ... "},{"text":" "},{"text":""},{"text":" "},{"text":""},{"text":" Computer Systems31/74 "},{"text":" Component view of typical modern computer system "},{"text":" "},{"text":""},{"text":" "},{"text":""},{"text":" Processor32/74 "},{"text":" Modern processors provide "},{"text":""},{"text":" Storage33/74 "},{"text":" Memory (main memory) consists of "},{"text":""},{"text":" ... Storage34/74 "},{"text":" Run-time memory usage depends on language processor. "},{"text":" How typical C compiler uses the memory: "},{"text":""},{"text":" "},{"text":""},{"text":" Computer System Layers35/74 "},{"text":" View of software layers in typical computer system "},{"text":" "},{"text":""},{"text":" "},{"text":""},{"text":" C Program Life-cycle36/74 "},{"text":" Your C programs start as text "},{"text":" How to make one C program run on different machine architectures? "},{"text":""},{"text":" ... C Program Life-cycle37/74 "},{"text":" From source code to machine code ... "},{"text":" "},{"text":""},{"text":" "},{"text":""},{"text":" History of C Compilers38/74 "},{"text":" Milestones in C history "},{"text":""},{"text":" C Revisited "},{"text":" "},{"text":""},{"text":" What (I assume) You Know40/74 "},{"text":" Given a problem specification ... "},{"text":""},{"text":" Type Definitions41/74 "},{"text":" Reminder: you can give a name to a C type definition e.g. "},{"text":""},{"text":" and then use the name instead of the type definition e.g. "},{"text":""},{"text":" "},{"text":""},{"text":" Assignment as Expression42/74 "},{"text":" Assignments can be treated as expressions returning a value "},{"text":""},{"text":" Can be useful "},{"text":""},{"text":" Can be dangerous "},{"text":""},{"text":" "},{"text":""},{"text":" ... Assignment as Expression43/74 "},{"text":" Assignment-as-expression often used to simplify loops, e.g. "},{"text":""},{"text":" rather than "},{"text":""},{"text":" "},{"text":""},{"text":" Ignoring Expression Results44/74 "},{"text":" We usually ignore the value returned by an assignment. "},{"text":" Some C functions return a result which is often ignored, e.g. "},{"text":""},{"text":" printf() returns the number of characters printed. "},{"text":" "},{"text":" Exercise: what value does the above printf() return? "},{"text":" Choose answer at www.zeetings.com/jas1/0004-2402-0001 "},{"text":""},{"text":" ... Ignoring Expression Results45/74 "},{"text":" Return values not related to function semantics "},{"text":" Ignored return error statuses (stati?) are generally "},{"text":""},{"text":" Fine Control46/74 "},{"text":" break and continue provide fine loop control "},{"text":""},{"text":" ... Fine Control47/74 "},{"text":" Example: scan a[N], stop on zero or at end, ignore negative values "},{"text":""},{"text":" "},{"text":""},{"text":" Fine Function Control48/74 "},{"text":" return returns the result of a function "},{"text":" Good style says \"have a single return at end\" "},{"text":" However ... "},{"text":""},{"text":" Fine Program Control49/74 "},{"text":" Good style says \"Program returns at end of main()\" "},{"text":" However, exceptional conditions may require early exit "},{"text":" exit() terminates program with return code "},{"text":" Can be used from anywhere in program (even deeply nested functions) "},{"text":" assert() can also be used to trigger program exit "},{"text":" "},{"text":""},{"text":" "},{"text":""},{"text":" Stacks, Queues, PriorityQs50/74 "},{"text":" Computer systems frequently make use of: "},{"text":""},{"text":" ... Stacks, Queues, PriorityQs51/74 "},{"text":" All of these data structures have "},{"text":""},{"text":" "},{"text":""},{"text":" ... Stacks, Queues, PriorityQs52/74 "},{"text":" Data structures differ in "},{"text":""},{"text":" "},{"text":""},{"text":" Example Stack/Queue/PriorityQ Usage53/74 "},{"text":" Starting from data containing one item, insert 3 "},{"text":""},{"text":" "},{"text":""},{"text":" ... Example Stack/Queue/PriorityQ Usage54/74 "},{"text":" Then insert 6 "},{"text":""},{"text":" "},{"text":""},{"text":" ... Example Stack/Queue/PriorityQ Usage55/74 "},{"text":" Then insert 2 "},{"text":""},{"text":" "},{"text":""},{"text":" ... Example Stack/Queue/PriorityQ Usage56/74 "},{"text":" Then remove item "},{"text":""},{"text":" "},{"text":""},{"text":" ... Example Stack/Queue/PriorityQ Usage57/74 "},{"text":" Then insert 4 "},{"text":""},{"text":" "},{"text":""},{"text":" ... Example Stack/Queue/PriorityQ Usage58/74 "},{"text":" Then remove item "},{"text":""},{"text":" "},{"text":""},{"text":" ... Example Stack/Queue/PriorityQ Usage59/74 "},{"text":" Then remove item "},{"text":""},{"text":" "},{"text":""},{"text":" Stack Data Structure60/74 "},{"text":" Stack: Last-in, First-out (LIFO) protocol "},{"text":""},{"text":" "},{"text":""},{"text":" Example Stack Client61/74 "},{"text":" A program to use a stack of int values "},{"text":""},{"text":" "},{"text":""},{"text":" Queue Data Structure62/74 "},{"text":" Queue: First-in, First-out (FIFO) protocol "},{"text":""},{"text":" Implementation covered in tute exercises. "},{"text":""},{"text":" Priority Queue Data Structure63/74 "},{"text":" Queue: Highest-priority-out protocol "},{"text":""},{"text":" Implementation left as an exercise for the reader. "},{"text":""},{"text":" Bit Manipulation "},{"text":" "},{"text":""},{"text":" Bits in Bytes in Words65/74 "},{"text":" Values that we normally treat as atomic can be viewed as bits, e.g. "},{"text":" C provides a set of operators that act bit-by-bit on pairs of bytes. "},{"text":" E.g. (10101010 & 11110000) yields 10100000 (bitwise AND) "},{"text":" C bitwise operators: & | ^ ~ << >> "},{"text":""},{"text":" Binary Constants66/74 "},{"text":" C does not have a way of directly writing binary numbers "},{"text":" Can write numbers in decimal, hexadecimal and octal. "},{"text":" In hexadecimal, each digit represents 4 bits "},{"text":""},{"text":" In octal, each digit represents 3 bits "},{"text":""},{"text":" "},{"text":""},{"text":" Bitwise AND67/74 "},{"text":" The & operator "},{"text":""},{"text":" Used for e.g. checking whether a bit is set "},{"text":""},{"text":" Bitwise OR68/74 "},{"text":" The | operator "},{"text":""},{"text":" Used for e.g. ensuring that a bit is set "},{"text":""},{"text":" Flag-bits69/74 "},{"text":" Consider file permissions in the Unix file system "},{"text":" Each file has three sets of \"flags\" defining it permissions "},{"text":""},{"text":" "},{"text":""},{"text":" ... Flag-bits70/74 "},{"text":" One possible representation: "},{"text":""},{"text":" Another possible representation: "},{"text":""},{"text":" Compact representation: "},{"text":""},{"text":" Last representation uses 1-bit per permission \"flag\" "},{"text":""},{"text":" Bitwise XOR71/74 "},{"text":" The ^ operator "},{"text":""},{"text":" Used in e.g. generating random numbers, building adder circuits "},{"text":""},{"text":" Bitwise NEG72/74 "},{"text":" The ~ operator "},{"text":""},{"text":" Used for e.g. creating useful bit patterns "},{"text":""},{"text":" Left Shift73/74 "},{"text":" The << operator "},{"text":""},{"text":" "},{"text":""},{"text":" Right Shift74/74 "},{"text":" The >> operator "},{"text":""},{"text":" ** if signed quantity, sign bit replaces left-end bit "},{"text":""},{"text":" Produced: 2 Apr 2018 "}],"allLists":[{"type":"list"}," Convenor: John Shepherd ",{"type":"list"}," Course Admin: Wael Alghamdi ",{"type":"list"}," Tutors: Louis Cheung, Matthew Gibson, Alexander Hinds, Aydin Itil, Jashank Jeremy, Thomas Kilkelly, Daniel Li, Alex Nendick, Leon Nguyen, Kevin Ni, Ellen Oates, Shanush Prema Thasarathan, Minjie Shen ",{"type":"list"}," Lab assistants: Caspian Baska, Dylan Brotherston, Jason Chu, Jesse Colville, Junjie Lei, Oliver Richards, Harrison Scott, Simon Shields, James Ye, Michael Yoo ",{"type":"list"}," quizzes, polls, comments/forums, forming groups, ... ",{"type":"list"}," information extraction, database systems, online learning ",{"type":"list"}," UG: COMP{1921,1511,1521,2041,3311,4011} ",{"type":"list"}," PG: COMP{9311,9315}, GSOE9010 ",{"type":"list"}," Deputy Head of School (Education) ",{"type":"list"}," Craft Beer, AFL, Craft Beer, K-Drama, Craft Beer, Nordic Noir, ... ",{"type":"list"}," COMP1511 or COMP1917 or COMP1911 (maybe with bridging) ",{"type":"list"}," review/strengthen C knowledge ",{"type":"list"}," introduce/revise core data structures (stacks, queues) ",{"type":"list"}," gets you thinking like a programmer ",{"type":"list"}," solving problems by developing programs ",{"type":"list"}," expressing your solution in the C language ",{"type":"list"}," gets you thinking like a systems programmer ",{"type":"list"}," with a deep understanding of run-time behaviour ",{"type":"list"}," and better able to reason about your C programs ",{"type":"list"}," components of modern computer systems ",{"type":"list"}," how C programs execute (at the machine level) ",{"type":"list"}," how to write (MIPS) assembly language ",{"type":"list"}," Unix/Linux system-level programming ",{"type":"list"}," how operating systems and networks are structured ",{"type":"list"}," introduction to concurrency, concurrent programming ",{"type":"list"}," Processors data representation, instruction set assembler programming ",{"type":"list"}," data representation, instruction set ",{"type":"list"}," assembler programming ",{"type":"list"}," Program execution (mapping C to assembler) memory layout: stack, heap, code control structures, function calls ",{"type":"list"}," memory layout: stack, heap, code ",{"type":"list"}," control structures, function calls ",{"type":"list"}," Operating system architecture memory, cache, devices, i/o, interrupts virtual memory, processes, file systems ",{"type":"list"}," memory, cache, devices, i/o, interrupts ",{"type":"list"}," virtual memory, processes, file systems ",{"type":"list"}," Concurrency parallelism, synchronisation, coordination ",{"type":"list"}," parallelism, synchronisation, coordination ",{"type":"list"}," Network architecture ",{"type":"list"}," \"Introduction to Computing Systems: from bits and gates to C and beyond\", Patt and Patel ",{"type":"list"}," \"From NAND to Tetris: Building a modern computer system from first principles\", Nisan and Schocken ",{"type":"list"}," COMP2121 Course Web Site, Parameswaran and Guo ",{"type":"list"}," Computer Systems: A Programmer's Perspective, Bryant and O'Halloren ",{"type":"list"}," covers most topics, and quite well ",{"type":"list"}," but uses a different machine code ",{"type":"list"}," cover some parts of syllabus in great detail ",{"type":"list"}," cover whole syllabus, but not in great detail ",{"type":"list"}," summarize Course Notes and add exercises ",{"type":"list"}," all tools available on the CSE lab machines ",{"type":"list"}," can use VLab to connect to CSE from home ",{"type":"list"}," 4 hours/week for 9 Weeks (a la UNSW3+) ",{"type":"list"}," all lectures will be video'd (Echo360 and YouTube) ",{"type":"list"}," 10 Weeks, 1 hour tute, followed by 2-hour lab ",{"type":"list"}," explore lecture material via exercises ",{"type":"list"}," small(ish) implementation tasks, done in pairs ",{"type":"list"}," give skills practice (leading on to assignments/exam) ",{"type":"list"}," go to a different tute in that week ",{"type":"list"}," go to a different lab if you need help ",{"type":"list"}," submit lab by next Sunday, get your tutor to assess ",{"type":"list"}," submitted before Sunday at end of week X ",{"type":"list"}," demonstrated to tutor during Week X lab OR, demonstrated at the start of Week X+1 lab ",{"type":"list"}," aim of demo is to get feedback on design and style ",{"type":"list"}," Ass1: Assembly Language, weeks 3-6, 9 marks ",{"type":"list"}," Ass2: C Programming, weeks 7-10, 11 marks ",{"type":"list"}," both assignments are completed individually ",{"type":"list"}," can be completed on your own machine but you must test on the CSE machines before you submit ",{"type":"list"}," but you must test on the CSE machines before you submit ",{"type":"list"}," 3-4 questions, multiple-choice format ",{"type":"list"}," primarily for review of recent topics ",{"type":"list"}," taken in your own time (via Webcms3) ",{"type":"list"}," write it at least weekly ",{"type":"list"}," reflect on and plan your learning ",{"type":"list"}," you maintain regularly (weekly) ",{"type":"list"}," what you write is interesting ",{"type":"list"}," MIPS / QtSpim / C quick reference guides ",{"type":"list"}," Unix Programmers Manual (man) (very handy) ",{"type":"list"}," some programming exercises (Prac) ",{"type":"list"}," some descriptive/analytical questions (Theory) ",{"type":"list"}," do not attend the final exam ",{"type":"list"}," have a documented reason for not attending ",{"type":"list"}," have (ExamOK && 47 ≤ FinalMark < 50) ",{"type":"list"}," more confident in your own ability ",{"type":"list"}," with an expanded set of tools to draw on ",{"type":"list"}," a deeper understanding of \"run-time\" behaviour ",{"type":"list"}," able to view software from systems-level perspective ",{"type":"list"}," producing better engineered software ",{"type":"list"}," ultimately, enjoying the programming process more ",{"type":"list"}," 1613 ... first use of the word \"computer\" (meaning \"a person who performs computations\") ",{"type":"list"}," 1800's ... Babbage's mechanical computers (Analytical Engine and Difference Engine, with Ada Lovelace) ",{"type":"list"}," 1936 ... Zuse's Z1 electro-mechanical computer (first binary programmable computer) ",{"type":"list"}," 1943 ... Eckert/Mauchley's ENIAC (first fully functional electric digital computer ... 18000 valves) ",{"type":"list"}," 1949 ... EDSAC and Manchester Mark 1 (first generation stored program computers ... valves) ",{"type":"list"}," 1955 ... Whirlwhind at MIT (first digital computer with magnetic core RAM) ",{"type":"list"}," 1960 ... Digital Equipment Corporation PDP-1 (first mini-computer ... recognisable as \"modern\" computer) ",{"type":"list"}," 1971 ... Intel 4004 (first microprocessor) ",{"type":"list"}," control, arithmetic, logic, bit operators ",{"type":"list"}," relatively small set of simple instructions ",{"type":"list"}," small amount of very fast storage (registers) ",{"type":"list"}," small number of control registers (e.g. PC) ",{"type":"list"}," fast fetch-decode-execute cycle (ns) ",{"type":"list"}," access to system bus to communicate with other components ",{"type":"list"}," all integrated on a single chip ",{"type":"list"}," very large random-addressable array of bytes ",{"type":"list"}," can fetch single bytes into CPU registers ",{"type":"list"}," can fetch multi-byte chunks into CPU (e.g. 4-byte int) ",{"type":"list"}," typically: access time 70 ns, size 64 GB ",{"type":"list"}," very very large block-oriented storage ",{"type":"list"}," often on spinning disk, fetching 512B-4KB per request ",{"type":"list"}," typically: access time 30 ms, size 8 TB ",{"type":"list"}," nowadays, SSD: access time 0.8ms, size 1GB ",{"type":"list"}," well-designed, readable, maintainable, ... ",{"type":"list"}," efficiently producing correct results ",{"type":"list"}," handling error conditions robustly ",{"type":"list"}," utlising services of underlying operating system ",{"type":"list"}," cc ... original compiler by Dennis Ricthie (1971) ",{"type":"list"}," gcc ... open source compiler by Richard Stallman et al (1987) ",{"type":"list"}," gcc 2.0 ... added C++ compilation (1992) ",{"type":"list"}," clang ... gcc replacement by Apple et al (2007) ",{"type":"list"}," dcc ... Python wrapper on clang by Andrew Taylor (2012?) augments error messages to be more helpful to novices incorporates useful run-time checking to help debugging ",{"type":"list"}," augments error messages to be more helpful to novices ",{"type":"list"}," incorporates useful run-time checking to help debugging ",{"type":"list"}," design an algorithmic solution ",{"type":"list"}," describe your solution in C code, using ... variables, assignment, tests (==, !, <=, &&, etc) if, while, for, break, scanf(), printf() functions, return, prototypes, *.h, *.c arrays, files, structs, pointers, malloc(), free() ",{"type":"list"}," variables, assignment, tests (==, !, <=, &&, etc) ",{"type":"list"}," if, while, for, break, scanf(), printf() ",{"type":"list"}," functions, return, prototypes, *.h, *.c ",{"type":"list"}," arrays, files, structs, pointers, malloc(), free() ",{"type":"list"}," linked structures, ADTs, sorting, recursion, bit operations ",{"type":"list"}," are typically success/failure status ",{"type":"list"}," extreemly unlikely to occur ",{"type":"list"}," not fatal if the failure occurs ",{"type":"list"}," break exits the innermost enclosing loop ",{"type":"list"}," continue goes directly to the next iteration ",{"type":"list"}," same effect can be achieved using ifs inside loop ",{"type":"list"}," but, used carefully, can make code easier to understand ",{"type":"list"}," a function can contain several returns ",{"type":"list"}," each can capture a specific condition to complete function ",{"type":"list"}," stacks ... last-in-first-out lists e.g. used to represent function local variables ",{"type":"list"}," e.g. used to represent function local variables ",{"type":"list"}," queues ... first-in-first-out lists e.g. used to ensure fair access to a resource ",{"type":"list"}," e.g. used to ensure fair access to a resource ",{"type":"list"}," priority queues ... highest-priority-out lists e.g. used to represent weighted lists of processes ",{"type":"list"}," e.g. used to represent weighted lists of processes ",{"type":"list"}," a sequence of items ",{"type":"list"}," an operation to insert an item into the sequence ",{"type":"list"}," an operation to remove an item from the sequence ",{"type":"list"}," stack ... insert adds on top, removes from top ",{"type":"list"}," queue ... insert adds at tail, removes from head ",{"type":"list"}," priorityQ ... inserts in priority order, removes from head ",{"type":"list"}," insert operation called push() ",{"type":"list"}," remove operation called pop() ",{"type":"list"}," has a top (last item added) and a size ",{"type":"list"}," insert operation called enter (or enqueue()) ",{"type":"list"}," remove operation called leave (or dequeue()) ",{"type":"list"}," has a head (first item added), a tail (last item added), and a size ",{"type":"list"}," insert operation called enter (or enqueue()) ",{"type":"list"}," remove operation called leave (or dequeue()) ",{"type":"list"}," has a head (next for removal), a tail (lowest-priority), and a size ",{"type":"list"}," char = 1 byte = 8 bits ('a' is 01100001) ",{"type":"list"}," short = 2 bytes = 16 bits (42 is 0000000000101010) ",{"type":"list"}," int = 4 bytes = 32 bits (42 is 0000000000...0000101010) ",{"type":"list"}," double = 8 bytes = 64 bits ",{"type":"list"}," takes two values (1,2,4,8 bytes), treats as sequence of bits ",{"type":"list"}," performs logical AND on each corresponding pair of bits ",{"type":"list"}," result contains same number of bits as inputs ",{"type":"list"}," takes two values (1,2,4,8 bytes), treats as sequence of bits ",{"type":"list"}," performs logical OR on each corresponding pair of bits ",{"type":"list"}," result contains same number of bits as inputs ",{"type":"list"}," rwx gives permissions for the owner of the file ",{"type":"list"}," rw- gives permissions for group members ",{"type":"list"}," r-- gives permissions for everyone else ",{"type":"list"}," takes two values (1,2,4,8 bytes), treats as sequence of bits ",{"type":"list"}," performs logical XOR on each corresponding pair of bits ",{"type":"list"}," result contains same number of bits as inputs ",{"type":"list"}," takes a single value (1,2,4,8 bytes), treats as sequence of bits ",{"type":"list"}," performs logical negation of each bit ",{"type":"list"}," result contains same number of bits as input ",{"type":"list"}," takes a single value (1,2,4,8 bytes), treats as sequence of bits ",{"type":"list"}," and a small positive integer x ",{"type":"list"}," moves (shifts) each bit x positions to the left ",{"type":"list"}," left-end bit vanishes; right-end bit replaced by zero ",{"type":"list"}," result contains same number of bits as input ",{"type":"list"}," takes a single value (1,2,4,8 bytes), treats as sequence of bits ",{"type":"list"}," and a small positive integer x ",{"type":"list"}," moves (shifts) each bit x positions to the right ",{"type":"list"}," right-end bit vanishes; left-end bit replaced by zero** ",{"type":"list"}," result contains same number of bits as input "]}