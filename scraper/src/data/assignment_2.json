{"grouped":[{"tags":["table"],"items":[{"text":" COMP1521 18s2 Assignment 2 My Very Own Shell Computer System Fundamentals "}]},{"tags":["table","Admin"],"items":[{"text":"Marks11 (towards total course mark)"},{"text":"Group?This assignment is completed individually"},{"text":"Dueby 11:59:59pm on Sunday 7th October"},{"text":"Submitgive cs1521 assign2 mymysh.c history.h history.c or via Webcms "},{"text":"LatePenalty0.09 marks per hour late (approx 2.2 marks per day) off the ceiling(e.g. if you are 36 hours late, your maximum possible mark is 7.8/11)"},{"text":"Assessment For a guide to style, use the code in the lectures and tute solutions, and the supplied code. 9 marks for correct performance; measured by auto-testing on a range of test cases, some of which will be provided for you to test your code as you write it 1 mark for commenting the code; you don't need a comment on every line, but roughly one comment on each block of C statements that does a meaningful task 1 mark for readable code; sensible names, consistent use of indentation to highlight control structures If your submitted code won't compile, your maximum possible \"performance\" mark is 3/9. The solution: make sure your code compiles and runs under gcc before submitting. If your submitted code fails all the performance tests, your maximum possible performance mark is 5/9. In both cases, the actual mark will be determined by a tutor's assessment on how close your code is to working. "},{"text":" 9 marks for correct performance; measured by auto-testing on a range of test cases, some of which will be provided for you to test your code as you write it "},{"text":" 1 mark for commenting the code; you don't need a comment on every line, but roughly one comment on each block of C statements that does a meaningful task "},{"text":" 1 mark for readable code; sensible names, consistent use of indentation to highlight control structures "}]},{"tags":["table"],"items":[{"text":" 9 marks for correct performance; measured by auto-testing on a range of test cases, some of which will be provided for you to test your code as you write it "},{"text":" 1 mark for commenting the code; you don't need a comment on every line, but roughly one comment on each block of C statements that does a meaningful task "},{"text":" 1 mark for readable code; sensible names, consistent use of indentation to highlight control structures "}]},{"tags":["list","Objectives"],"items":[{"text":" to give you experience writing C code to manipulate processes "},{"text":" to give you experience with interprocess communication (pipes) "},{"text":" to give you further experience with data structures in C "}]},{"tags":["list"],"items":[{"text":" an executable for the command (first token) actually exists "},{"text":" stdin is redirected, but without giveng a filename to read from "},{"text":" stdin is redirected, but with a filename that is nonexistent or not readable "},{"text":" stdout is redirected, but without giving a filename to write to "},{"text":" stdout is redirected, but with a filename that is not writeable "},{"text":" using !SeqNo but with an invalid sequence number "}]},{"tags":["list"],"items":[{"text":" get \"normal\" commands running properly (Week 08 Lab) "},{"text":" then add shell built-ins "},{"text":" then add command history "},{"text":" then add history substitution "},{"text":" then add filename expansion "},{"text":" then add input/output redirection "}]}],"block":[{"tags":["paragraph"],"text":" If your submitted code won't compile, your maximum possible \"performance\" mark is 3/9. The solution: make sure your code compiles and runs under gcc before submitting. If your submitted code fails all the performance tests, your maximum possible performance mark is 5/9. In both cases, the actual mark will be determined by a tutor's assessment on how close your code is to working. "},{"tags":["paragraph","Background"],"text":" A shell is a program that executes other programs. Command-line based shells (e.g. bash) read lines of text, break each line into tokens, and execute the command indicated by the first token. For example: "},{"tags":["paragraph"],"text":" is a command with three tokens (\"ls\", \"-al\" and \"~cs1521/bin\"). The shell works out where the executable for the ls command is located, and executes it, passing the second two tokens as command-line arguments. "},{"tags":["paragraph"],"text":" However, shells do a lot more than just reading command lines and executing them. For example, they keep a history of previous commands to make it easy to re-execute them. They also allow users to capture the output of a command, by redirecting its output into a file. And, importantly on Unix/Linux, they allow users to build a pipeline of commands to achieve powerful effects without having to write a program. For example, the following pipeline produces a list of the top ten most frequently used words in a text file: "},{"tags":["paragraph"],"text":" For more details on Unix/Linux commands and how they can be combined in this way, see the COMP2041 web site. "},{"tags":["paragraph"],"text":" Unix/Linux shells also typically provide a full programming capability, if pipelines aren't quite enough. "},{"tags":["paragraph"],"text":" You will not be required to implement a shell as powerful as bash for this assignment, but you will build some of the core features. "},{"tags":["paragraph","Setting Up"],"text":" Create a private directory for doing the assignment, and put the assignment files in it by running the following command: "},{"tags":["paragraph"],"text":" If you're working on this at home, download the ZIP file and create the files on your home machine. It's fine to work on your own machine but remember to always test your code on the CSE machines before submitting. "},{"tags":["paragraph"],"text":" The above command will create the following files: "},{"tags":["paragraph"],"text":" A file to control compilation of the various modules in the system. "},{"tags":["paragraph"],"text":" A skeleton for the shell program that you are required to write. "},{"tags":["paragraph"],"text":" A complete interface for the functions on history list data. "},{"tags":["paragraph"],"text":" A skeleton for the history list functions. "},{"tags":["paragraph","Exercise"],"text":" The aim of this exercise is to complete the supplied program skeleton in mymysh.c, giving an executable called ./mymysh. This requires you to implement the command history list data structures and functions, and then use these in implementing the main program. You can add as many functions as you like to mymysh.c and history.c files. "},{"tags":["paragraph"],"text":" The shell needs to be able to do the following: "},{"tags":["paragraph"],"text":" The shell should print a prompt using the supplied prompt() function. It then reads a single line of text and interprets it as a command. A command is a sequence of space-separated tokens on a single line. The first token is treated as the name of a command, where the command exists as an executable file somewhere in the user's PATH. If no such executable is found, the shell should print a \"Command not found\" message. "},{"tags":["paragraph"],"text":" The command is invoked via the execve() library function, with the full pathname of the command as the first parameter, the sequence of tokens as the second parameter, and the user's environment (from the third argument of the the main program) as the third parameter. This is similar as the Week 08 Lab (except that the lab didn't use the available environment). "},{"tags":["paragraph"],"text":" One difference to the Lab is that the shell should print some additional information before and after the output fom the command. Before the command it should show the pathname of the command executable: use the full pathname if the command is found by using a search of the PATH; if the command name is relative, use the name as given. After the command, it should print the command's return status (as determined using WEXITSTATUS). The output from the command should be delineated by twenty hyphens, as shown below: "},{"tags":["paragraph"],"text":" Note that \"mymysh$\" is the shell's prompt. "},{"tags":["paragraph"],"text":" There are a number of built-in \"commands\" that are not executed as described above, but are handled directly by the shell. The built-ins are described below. "},{"tags":["paragraph"],"text":" If the command line has no tokens, it is simply ignored and a new shell prompt is printed. "},{"tags":["paragraph"],"text":" The shell should maintain a persistent list of the most recent 20 valid commands that the shell has executed. Each command is associated with a sequence number; sequence numbers increase constantly over time, and persist between sessions with the shell (see the examples below). "},{"tags":["paragraph"],"text":" While shell is executing, the command history is maintained in a fixed-size data structure defined in history.c. A number of interface functions are defined on this list and should be used in the main() function. If you asbolutely cannot stand the supplied data structures and functions, feel free to define your own. As long as the history behaves as required, the precise implementation of the command history is not critical. "},{"tags":["paragraph"],"text":" The command history has to persist between executions of the mymysh program. To achieve this, it saves the history in a file $HOME/.mymysh_history when mymysh terminates and restores it from this file when it next starts. The .mymysh_history is simply a text file, containing the most recent 20 commands and their sequence numbers. It must be in the same format as that produced by the mymysh binary (i.e. \"⎵%3d⎵⎵%s\\n\") which is the same format as used to display the history within the shell (where ⎵ represents a single space character). "},{"tags":["paragraph"],"text":" Commands from the history can be re-executed by using the special notation !SeqNo and giving the sequence number for one of the commands in the history. The command from the history should become the current command and then be treated as if it had been typed by the user. The special notation !! re-executes the previous command. "},{"tags":["paragraph"],"text":" Note that, unlike most Unix/Linux shells, mymysh does not place invalid commands in the history, so commands should be checked for the following before being executed: "},{"tags":["paragraph"],"text":" If the command line produces any of the above errors, it should not be placed in the history. "},{"tags":["paragraph"],"text":" The following commands are handled by the shell, and do not need to be searched for in the command path. "},{"tags":["paragraph"],"text":"terminate the shell (after saving the command history) "},{"tags":["paragraph"],"text":"display the last 20 commands, with their sequence numbers"},{"tags":["paragraph"],"text":"print the shell's current working directory (hint: getcwd())"},{"tags":["paragraph"],"text":"change the shell's working directory (after filename expansion) after changing, show the new working directory (hint: chdir() and getcwd()) "},{"tags":["paragraph"],"text":" The exit built-in is not placed in the command history. "},{"tags":["paragraph"],"text":" If any of the following characters ('*', '?', '[', '~') appears in one of the tokens, that token should be replaced by all of the tokens matching that token using the glob() library function. This may result in the tokens list becoming longer than initially. If there are no matches, use the token unchanged. This should be done before any of the actions described below. (hint: use GLOB_NOCHECK|GLOB_TILDE as the second parameter of the glob() function) "},{"tags":["paragraph"],"text":" If the command line contains the tokens < and a filename as the last two tokens, the command should be executed with its standard input connected to the named file. If the file does not exist, or is not readable, that is an error. Having < as the last token, or elsewhere in the command-line is also an error. (Hint: pipe() and dup2()) "},{"tags":["paragraph"],"text":" If the command line contains the tokens > and a filename as the last two tokens, the command should be executed with its standard output connected to the named file. If the file does not already exist or exists and is writeable, then it is truncated to zero length and it current contents are overwritten. If the file exists and is not writeable, that is an error. Having > as the last token, or elsewhere in the command-line is also an error. (Hint: pipe() and dup2()) "},{"tags":["paragraph"],"text":" Shell built-ins cannot have their output redirected. "},{"tags":["paragraph","Hints"],"text":" The main program of mymysh should be structured roughly as follows: "},{"tags":["paragraph"],"text":" Trying to implement the whole of the above at once is difficult. I'd suggest implementing it in stages: "},{"tags":["paragraph"],"text":" Marks are available for each of the components. You can get full marks for a working component, even if other components don't work or aren't implemented. "},{"tags":["paragraph"],"text":" The following example shows how the shell should work in practice: "},{"tags":["paragraph"],"text":" To resolve any ambiguities in the above, and to give you a basis for testing, an executable for the shell is available as "},{"tags":["paragraph"],"text":" Please let me know asap if you think that there are bugs in the sample executable. Disagreeing with one of the above design choices does not constitute a \"bug\". However, if the sample executable behaves differently to what is stated above, then that is definitely a bug. "},{"tags":["paragraph","Challenge"],"text":"(Worth kudos, but no marks)"},{"tags":["paragraph"],"text":" Implement command pipelines (i.e. Cmd1 | Cmd2 | ... | Cmdn, where n ≥2). "},{"tags":["paragraph"],"text":" Have fun, jas "}]}