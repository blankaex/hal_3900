{"grouped":[{"tags":["table"],"items":[{"text":"Computer Systems Architecture1/21"}]},{"tags":["table"],"items":[{"text":"Evolution of Operating Systems (OSs)2/21"}]},{"tags":["table"],"items":[{"text":"... Evolution of Operating Systems (OSs)3/21"}]},{"tags":["table"],"items":[{"text":"... Evolution of Operating Systems (OSs)4/21"}]},{"tags":["table"],"items":[{"text":"Operating Systems5/21"}]},{"tags":["table"],"items":[{"text":"... Operating Systems6/21"}]},{"tags":["table"],"items":[{"text":"... Operating Systems7/21"}]},{"tags":["table"],"items":[{"text":"... Operating Systems8/21"}]},{"tags":["table"],"items":[{"text":"... Operating Systems9/21"}]},{"tags":["table"],"items":[{"text":"... Operating Systems10/21"}]},{"tags":["table"],"items":[{"text":"System Calls11/21"}]},{"tags":["table"],"items":[{"text":"... System Calls12/21"}]},{"tags":["table"],"items":[{"text":"Libraries13/21"}]},{"tags":["table"],"items":[{"text":"... Libraries14/21"}]},{"tags":["table"],"items":[{"text":"Applications15/21"}]},{"tags":["table"],"items":[{"text":"... Applications16/21"}]},{"tags":["table"],"items":[{"text":"... Applications17/21"}]},{"tags":["table"],"items":[{"text":"... Applications18/21"}]},{"tags":["table"],"items":[{"text":"... Applications19/21"}]},{"tags":["table"],"items":[{"text":"... Applications20/21"}]},{"tags":["table"],"items":[{"text":"Roadmap21/21"}]},{"tags":["list"],"items":[{"text":" no OS ... one program at a time, manually loaded "},{"text":" programs had to take account of details of machine/devices "}]},{"tags":["list"],"items":[{"text":" batch processing ... load several programs at once, run in sequence "},{"text":" programs had to take account of details of machine/devices "}]},{"tags":["list"],"items":[{"text":" computers proliferate ... programmers want to transport code "},{"text":" having to cope with different config on each machine was tedious "},{"text":" solution: layer of software between raw machine and user programs "}]},{"tags":["list"],"items":[{"text":" computers become smaller and faster (but still fridge-size) "},{"text":" complexity of 1960's OSs drove Bell Labs researchers to develop a small OS core, written mostly in HLL with a set of simple tools and ways of combining them led to the Unix programming environment "},{"text":" develop a small OS core, written mostly in HLL "},{"text":" with a set of simple tools and ways of combining them "},{"text":" led to the Unix programming environment "},{"text":" writing OS core in HLL made it portable same OS environment provided on many different machines "},{"text":" same OS environment provided on many different machines "}]},{"tags":["list"],"items":[{"text":" develop a small OS core, written mostly in HLL "},{"text":" with a set of simple tools and ways of combining them "},{"text":" led to the Unix programming environment "}]},{"tags":["list"],"items":[{"text":" same OS environment provided on many different machines "}]},{"tags":["list"],"items":[{"text":" Unix and variants ported to wide variety of architectures BSD, SysV, Linux, OS X, Android all based on Unix approach "},{"text":" BSD, SysV, Linux, OS X, Android all based on Unix approach "},{"text":" developments in hardware/software led to more OS services databases, O-O programming, GUI interfaces, games networking, multi-CPU systems, mobile devices, etc. "},{"text":" databases, O-O programming, GUI interfaces, games "},{"text":" networking, multi-CPU systems, mobile devices, etc. "}]},{"tags":["list"],"items":[{"text":" BSD, SysV, Linux, OS X, Android all based on Unix approach "}]},{"tags":["list"],"items":[{"text":" databases, O-O programming, GUI interfaces, games "},{"text":" networking, multi-CPU systems, mobile devices, etc. "}]},{"tags":["list"],"items":[{"text":" embedded systems, phones, workstations, servers, ... "}]},{"tags":["list"],"items":[{"text":" provide an abstraction layer on top of hardware "},{"text":" i.e. same view available regardless of underlying hardware "}]},{"tags":["list"],"items":[{"text":" have privileged access to the raw machine "},{"text":" manage use of machine resources (CPU, disk, memory, etc.) "},{"text":" provide uniform interface to access machine-level operations "},{"text":" arrange for controlled execution of user programs "},{"text":" provide multi-tasking and (pseudo) parallelism "}]},{"tags":["list"],"items":[{"text":" batch (e.g. Eniac, early IBM OSs) computational jobs run one-at-a-time via a queue "},{"text":" computational jobs run one-at-a-time via a queue "},{"text":" multi-user (e.g. Multics, Unix/Linux, OSX, Windows) mulitple jobs (appear to) run in parallel "},{"text":" mulitple jobs (appear to) run in parallel "},{"text":" embedded (e.g. Android, iOS, ...) small(ish), cut-down OS embedded in a device "},{"text":" small(ish), cut-down OS embedded in a device "},{"text":" real-time (e.g. RTLinux, DuinOS, ...) specialised OS with time guarantees on job completion "},{"text":" specialised OS with time guarantees on job completion "}]},{"tags":["list"],"items":[{"text":" computational jobs run one-at-a-time via a queue "}]},{"tags":["list"],"items":[{"text":" mulitple jobs (appear to) run in parallel "}]},{"tags":["list"],"items":[{"text":" small(ish), cut-down OS embedded in a device "}]},{"tags":["list"],"items":[{"text":" specialised OS with time guarantees on job completion "}]},{"tags":["list"],"items":[{"text":" users ... who can access (login to) the system "},{"text":" access rights ... what users are allowed to do "},{"text":" file system ... how data is organised on storage devices "},{"text":" input/output ... transferring data to/from devices "},{"text":" processes ... active \"computational entities\" on the system "},{"text":" communication ... how processes interact "},{"text":" networking ... how the system talks to other systems "}]},{"tags":["list"],"items":[{"text":" privileged mode full access to all machine operations and memory regions "},{"text":" full access to all machine operations and memory regions "},{"text":" non-privileged (user) mode a limited set of operations (but still Turing complete) access to only part of the memory "},{"text":" a limited set of operations (but still Turing complete) "},{"text":" access to only part of the memory "}]},{"tags":["list"],"items":[{"text":" full access to all machine operations and memory regions "}]},{"tags":["list"],"items":[{"text":" a limited set of operations (but still Turing complete) "},{"text":" access to only part of the memory "}]},{"tags":["list"],"items":[{"text":" to cross the privileged/user boundary "},{"text":" in a controlled manner, via well-defined requests "}]},{"tags":["list"],"items":[{"text":" primarily for i/o (read/write) on various types "},{"text":" also memory allocation and process exit "}]},{"tags":["list"],"items":[{"text":" process management (e.g. fork(), exec(), _exit(), ...) "},{"text":" file management (e.g. open(), read(), fstat(), ...) "},{"text":" device management (e.g. ioctl(), ...) "},{"text":" information maintenance (e.g. settimeofday(), getuid(), ...) "},{"text":" communication (e.g. pipe(), connect(), send(), ...) "}]},{"tags":["list"],"items":[{"text":" but system calls provide relatively low-level operations "}]},{"tags":["list"],"items":[{"text":" collections of useful functions "},{"text":" referenced from within user programs as C functions "},{"text":" defined by #include <xxx.h> "},{"text":" integrated with user code at \"link time\" "}]},{"tags":["list"],"items":[{"text":" stdio.h ... text-oriented, formatted input/output "},{"text":" stdlib.h ... wide range of functions, e.g. rand(), malloc() "}]},{"tags":["list"],"items":[{"text":" possibly supplied with system e.g. ls, vim, gcc "},{"text":" possibly implemented by users e.g. dcc, check, Webcms3 "}]},{"tags":["list"],"items":[{"text":" but may also make direct use of system calls "}]},{"tags":["list"],"items":[{"text":" that runs as a user-level process (not privileged) "},{"text":" but can invoke other user-level processes "}]},{"tags":["list"],"items":[{"text":" directly, through a library of system calls documented in Unix Programmers Manual section 2 (e.g. man 2 open) "},{"text":" documented in Unix Programmers Manual section 2 (e.g. man 2 open) "},{"text":" indirectly, through functions in the C libraries documented in Unix Programmers Manual section 3 (e.g. man 3 fopen) "},{"text":" documented in Unix Programmers Manual section 3 (e.g. man 3 fopen) "}]},{"tags":["list"],"items":[{"text":" documented in Unix Programmers Manual section 2 (e.g. man 2 open) "}]},{"tags":["list"],"items":[{"text":" documented in Unix Programmers Manual section 3 (e.g. man 3 fopen) "}]},{"tags":["list"],"items":[{"text":" file descriptors, open(), close(), read(), write() (via #include <unistd.h>) "},{"text":" file pointers (FILE*), fopen(), fclose, scanf(), printf() (via #include <stdio.h>) "}]},{"tags":["list"],"items":[{"text":" check return value of sys call function (-1 typically flags an error) "},{"text":" check global variable errno (contains specific error) "}]},{"tags":["list"],"items":[{"text":" unlike other languages, C provides no exception handling "}]},{"tags":["list"],"items":[{"text":" unless the sysetm call has a result value (e.g. #bytes read) "}]},{"tags":["list"],"items":[{"text":" void perror(char *Message) "},{"text":" if Message not NULL, write to stderr "},{"text":" write standard message corresponding to errno "}]},{"tags":["list"],"items":[{"text":" error(Status, ErrNum, Format, Expressions, ...) "},{"text":" print error message using prog name, Format and Expressions "},{"text":" if Status is non-zero, invoke exit(Status) after printing message "},{"text":" if ErrNum is non-zero, also print standard system error message "}]},{"tags":["list"],"items":[{"text":" storage management disk storage, filesystems, Unix file system interface "},{"text":" disk storage, filesystems, Unix file system interface "},{"text":" memory management RAM, physical/virtual/process memory space, page faults "},{"text":" RAM, physical/virtual/process memory space, page faults "},{"text":" process management creating processes, process hierarchy, signals "},{"text":" creating processes, process hierarchy, signals "},{"text":" device management control registers, data transfer, interrupts "},{"text":" control registers, data transfer, interrupts "}]},{"tags":["list"],"items":[{"text":" disk storage, filesystems, Unix file system interface "}]},{"tags":["list"],"items":[{"text":" RAM, physical/virtual/process memory space, page faults "}]},{"tags":["list"],"items":[{"text":" creating processes, process hierarchy, signals "}]},{"tags":["list"],"items":[{"text":" control registers, data transfer, interrupts "}]}],"block":[{"tags":["paragraph"],"text":"D: Computer Systems Architecture"},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Computer Systems Architecture1/21 "},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Evolution of Operating Systems (OSs)2/21 "},{"tags":["paragraph"],"text":" 1940's (e.g. ENIAC) "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... Evolution of Operating Systems (OSs)3/21 "},{"tags":["paragraph"],"text":" 1970's (e.g. PDP-11) "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... Evolution of Operating Systems (OSs)4/21 "},{"tags":["paragraph"],"text":" 1980's - present "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Operating Systems5/21 "},{"tags":["paragraph"],"text":" Modern computer: devices connected via a system bus ... "},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... Operating Systems6/21 "},{"tags":["paragraph"],"text":" Operating systems (OSs) "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... Operating Systems7/21 "},{"tags":["paragraph"],"text":" Some different flavours of OSs ... "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... Operating Systems8/21 "},{"tags":["paragraph"],"text":" Abstractions provided by modern OSs "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... Operating Systems9/21 "},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... Operating Systems10/21 "},{"tags":["paragraph"],"text":" Critical to OS development: execution modes "},{"tags":["paragraph"],"text":" CPUs can typically run in two modes: "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" System Calls11/21 "},{"tags":["paragraph"],"text":" SPIM has no OS, but provides a simple set of \"system calls\" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... System Calls12/21 "},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Libraries13/21 "},{"tags":["paragraph"],"text":" User programs can request services via system calls "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... Libraries14/21 "},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Applications15/21 "},{"tags":["paragraph"],"text":" User-level programs which perform some useful task "},{"tags":["paragraph"],"text":" Applications are generally built using libraries "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... Applications16/21 "},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... Applications17/21 "},{"tags":["paragraph"],"text":" System calls are invoked ... "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... Applications18/21 "},{"tags":["paragraph"],"text":" System calls attempt to perform actions, but may fail "},{"tags":["paragraph"],"text":" User programs can detect this in several ways "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... Applications19/21 "},{"tags":["paragraph"],"text":" Action in response to failed system call is often e.g. "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Can give more precise feedback via library functions, e.g. "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" ... Applications20/21 "},{"tags":["paragraph"],"text":" Linux library function to make it easy to report errors and exit "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" vs "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Roadmap21/21 "},{"tags":["paragraph"],"text":" Following sections consider OS modules: "},{"tags":["paragraph"],"text":""},{"tags":["paragraph"],"text":" Produced: 8 Apr 2018 "}]}